diff --git a/logs/send-email-hub.2023-02-13.0.log b/logs/send-email-hub.2023-02-13.0.log
new file mode 100644
index 0000000..e469ac1
--- /dev/null
+++ b/logs/send-email-hub.2023-02-13.0.log
@@ -0,0 +1,607 @@
+2022-09-20 09:53:22,802 INFO vn.shb.service.ShbEmailHubApplication Starting ShbEmailHubApplication using Java 1.8.0_191 on LINHDK1 with PID 13656 (D:\Projects\shb-email-hub\target\classes started by linhdk1 in D:\Projects\shb-email-hub)
+2022-09-20 09:53:22,806 INFO vn.shb.service.ShbEmailHubApplication No active profile set, falling back to 1 default profile: "default"
+2022-09-20 09:53:22,862 INFO org.springframework.boot.devtools.restart.ChangeableUrls The Class-Path manifest attribute in C:\Users\linhdk1\.m2\repository\com\oracle\database\jdbc\ojdbc8\21.1.0.0\ojdbc8-21.1.0.0.jar referenced one or more files that do not exist: file:/C:/Users/linhdk1/.m2/repository/com/oracle/database/jdbc/ojdbc8/21.1.0.0/oraclepki.jar
+2022-09-20 09:53:22,862 INFO org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
+2022-09-20 09:53:23,444 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate Bootstrapping Spring Data JPA repositories in DEFAULT mode.
+2022-09-20 09:53:23,465 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate Finished Spring Data repository scanning in 10 ms. Found 0 JPA repository interfaces.
+2022-09-20 09:53:23,906 INFO org.hibernate.jpa.internal.util.LogHelper HHH000204: Processing PersistenceUnitInfo [name: default]
+2022-09-20 09:53:23,965 INFO org.hibernate.Version HHH000412: Hibernate ORM core version 5.6.10.Final
+2022-09-20 09:53:24,155 INFO org.hibernate.annotations.common.Version HCANN000001: Hibernate Commons Annotations {5.1.2.Final}
+2022-09-20 09:53:25,597 INFO org.hibernate.dialect.Dialect HHH000400: Using dialect: org.hibernate.dialect.Oracle10gDialect
+2022-09-20 09:53:26,451 INFO org.hibernate.engine.transaction.jta.platform.internal.JtaPlatformInitiator HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
+2022-09-20 09:53:26,464 INFO org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean Initialized JPA EntityManagerFactory for persistence unit 'default'
+2022-09-20 09:53:26,798 INFO org.quartz.impl.StdSchedulerFactory Using default implementation for ThreadExecutor
+2022-09-20 09:53:26,816 INFO org.quartz.core.SchedulerSignalerImpl Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
+2022-09-20 09:53:26,816 INFO org.quartz.core.QuartzScheduler Quartz Scheduler v.2.3.2 created.
+2022-09-20 09:53:26,817 INFO org.quartz.simpl.RAMJobStore RAMJobStore initialized.
+2022-09-20 09:53:26,818 INFO org.quartz.core.QuartzScheduler Scheduler meta-data: Quartz Scheduler (v2.3.2) 'quartzScheduler' with instanceId 'NON_CLUSTERED'
+  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
+  NOT STARTED.
+  Currently in standby mode.
+  Number of jobs executed: 0
+  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
+  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.
+
+2022-09-20 09:53:26,818 INFO org.quartz.impl.StdSchedulerFactory Quartz scheduler 'quartzScheduler' initialized from an externally provided properties instance.
+2022-09-20 09:53:26,818 INFO org.quartz.impl.StdSchedulerFactory Quartz scheduler version: 2.3.2
+2022-09-20 09:53:26,818 INFO org.quartz.core.QuartzScheduler JobFactory set to: org.springframework.scheduling.quartz.SpringBeanJobFactory@37fdcdee
+2022-09-20 09:53:26,862 INFO org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer LiveReload server is running on port 35729
+2022-09-20 09:53:26,878 INFO org.springframework.scheduling.quartz.SchedulerFactoryBean Starting Quartz Scheduler now
+2022-09-20 09:53:26,878 INFO org.quartz.core.QuartzScheduler Scheduler quartzScheduler_$_NON_CLUSTERED started.
+2022-09-20 09:53:26,896 INFO vn.shb.service.ShbEmailHubApplication Started ShbEmailHubApplication in 4.807 seconds (JVM running for 6.798)
+2022-09-20 09:53:30,013 INFO vn.shb.service.jobs.HTLSCNAllBranchJob <!-----------Start HTLSCN All Branch Job --------------->
+2022-09-20 09:53:30,151 INFO vn.shb.service.services.HtlsSumaryRepoImp getHtlsSumariesCNAllBranchByValDt >>>>>>>>>>>> : {"ID":1,"ERROR_CODE":"99"}
+2022-09-20 09:53:30,151 INFO vn.shb.service.jobs.HTLSCNBranchJob <!-----------Start HTLSCN Branch Job --------------->
+2022-09-20 09:53:30,164 INFO vn.shb.service.jobs.HTLSDNJob <!-----------Start HTLSDN Job --------------->
+2022-09-20 09:53:30,172 INFO vn.shb.service.services.HTLSDNJobService <!----------- HTLSDN Job List htlsSumaryEOD : 0--------------->
+2022-09-20 09:53:35,003 INFO vn.shb.service.jobs.HTLSDNJob <!-----------Start HTLSDN Job --------------->
+2022-09-20 09:53:35,012 INFO vn.shb.service.services.HTLSDNJobService <!----------- HTLSDN Job List htlsSumaryEOD : 0--------------->
+2022-09-20 09:53:35,012 INFO vn.shb.service.jobs.HTLSCNAllBranchJob <!-----------Start HTLSCN All Branch Job --------------->
+2022-09-20 09:53:35,018 INFO vn.shb.service.services.HtlsSumaryRepoImp getHtlsSumariesCNAllBranchByValDt >>>>>>>>>>>> : {"ID":1,"ERROR_CODE":"99"}
+2022-09-20 09:53:35,019 INFO vn.shb.service.jobs.HTLSCNBranchJob <!-----------Start HTLSCN Branch Job --------------->
+2022-09-20 09:53:40,002 INFO vn.shb.service.jobs.HTLSCNAllBranchJob <!-----------Start HTLSCN All Branch Job --------------->
+2022-09-20 09:53:40,012 INFO vn.shb.service.services.HtlsSumaryRepoImp getHtlsSumariesCNAllBranchByValDt >>>>>>>>>>>> : {"ID":1,"ERROR_CODE":"99"}
+2022-09-20 09:53:40,012 INFO vn.shb.service.jobs.HTLSCNBranchJob <!-----------Start HTLSCN Branch Job --------------->
+2022-09-20 09:53:40,018 INFO vn.shb.service.jobs.HTLSDNJob <!-----------Start HTLSDN Job --------------->
+2022-09-20 09:53:40,022 INFO vn.shb.service.services.HTLSDNJobService <!----------- HTLSDN Job List htlsSumaryEOD : 0--------------->
+2022-09-20 09:53:45,004 INFO vn.shb.service.jobs.HTLSCNAllBranchJob <!-----------Start HTLSCN All Branch Job --------------->
+2022-09-20 09:53:45,011 INFO vn.shb.service.services.HtlsSumaryRepoImp getHtlsSumariesCNAllBranchByValDt >>>>>>>>>>>> : {"ID":1,"ERROR_CODE":"99"}
+2022-09-20 09:53:45,012 INFO vn.shb.service.jobs.HTLSDNJob <!-----------Start HTLSDN Job --------------->
+2022-09-20 09:53:45,016 INFO vn.shb.service.services.HTLSDNJobService <!----------- HTLSDN Job List htlsSumaryEOD : 0--------------->
+2022-09-20 09:53:45,017 INFO vn.shb.service.jobs.HTLSCNBranchJob <!-----------Start HTLSCN Branch Job --------------->
+2022-09-20 09:53:50,015 INFO vn.shb.service.jobs.HTLSCNBranchJob <!-----------Start HTLSCN Branch Job --------------->
+2022-09-20 09:53:50,021 INFO vn.shb.service.jobs.HTLSDNJob <!-----------Start HTLSDN Job --------------->
+2022-09-20 09:53:50,027 INFO vn.shb.service.services.HTLSDNJobService <!----------- HTLSDN Job List htlsSumaryEOD : 0--------------->
+2022-09-20 09:53:50,027 INFO vn.shb.service.jobs.HTLSCNAllBranchJob <!-----------Start HTLSCN All Branch Job --------------->
+2022-09-20 09:53:50,033 INFO vn.shb.service.services.HtlsSumaryRepoImp getHtlsSumariesCNAllBranchByValDt >>>>>>>>>>>> : {"ID":1,"ERROR_CODE":"99"}
+2022-09-20 09:53:55,011 INFO vn.shb.service.jobs.HTLSCNBranchJob <!-----------Start HTLSCN Branch Job --------------->
+2022-09-20 09:53:55,023 INFO vn.shb.service.jobs.HTLSDNJob <!-----------Start HTLSDN Job --------------->
+2022-09-20 09:53:55,035 INFO vn.shb.service.services.HTLSDNJobService <!----------- HTLSDN Job List htlsSumaryEOD : 0--------------->
+2022-09-20 09:53:55,036 INFO vn.shb.service.jobs.HTLSCNAllBranchJob <!-----------Start HTLSCN All Branch Job --------------->
+2022-09-20 09:53:55,045 INFO vn.shb.service.services.HtlsSumaryRepoImp getHtlsSumariesCNAllBranchByValDt >>>>>>>>>>>> : {"ID":1,"ERROR_CODE":"99"}
+2022-09-20 09:53:57,447 INFO org.quartz.core.QuartzScheduler Scheduler quartzScheduler_$_NON_CLUSTERED paused.
+2022-09-20 09:53:57,448 INFO org.springframework.scheduling.quartz.SchedulerFactoryBean Shutting down Quartz Scheduler
+2022-09-20 09:53:57,448 INFO org.quartz.core.QuartzScheduler Scheduler quartzScheduler_$_NON_CLUSTERED shutting down.
+2022-09-20 09:53:57,449 INFO org.quartz.core.QuartzScheduler Scheduler quartzScheduler_$_NON_CLUSTERED paused.
+2022-09-20 09:53:57,449 INFO org.quartz.core.QuartzScheduler Scheduler quartzScheduler_$_NON_CLUSTERED shutdown complete.
+2022-09-20 09:53:57,451 INFO org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean Closing JPA EntityManagerFactory for persistence unit 'default'
+2022-09-20 09:56:43,158 INFO vn.shb.service.ShbEmailHubApplication Starting ShbEmailHubApplication using Java 1.8.0_191 on LINHDK1 with PID 43000 (D:\Projects\shb-email-hub\target\classes started by linhdk1 in D:\Projects\shb-email-hub)
+2022-09-20 09:56:43,159 INFO vn.shb.service.ShbEmailHubApplication No active profile set, falling back to 1 default profile: "default"
+2022-09-20 09:56:43,219 INFO org.springframework.boot.devtools.restart.ChangeableUrls The Class-Path manifest attribute in C:\Users\linhdk1\.m2\repository\com\oracle\database\jdbc\ojdbc8\21.1.0.0\ojdbc8-21.1.0.0.jar referenced one or more files that do not exist: file:/C:/Users/linhdk1/.m2/repository/com/oracle/database/jdbc/ojdbc8/21.1.0.0/oraclepki.jar
+2022-09-20 09:56:43,220 INFO org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
+2022-09-20 09:56:43,762 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate Bootstrapping Spring Data JPA repositories in DEFAULT mode.
+2022-09-20 09:56:43,783 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate Finished Spring Data repository scanning in 10 ms. Found 0 JPA repository interfaces.
+2022-09-20 09:56:44,202 INFO org.hibernate.jpa.internal.util.LogHelper HHH000204: Processing PersistenceUnitInfo [name: default]
+2022-09-20 09:56:44,257 INFO org.hibernate.Version HHH000412: Hibernate ORM core version 5.6.10.Final
+2022-09-20 09:56:44,460 INFO org.hibernate.annotations.common.Version HCANN000001: Hibernate Commons Annotations {5.1.2.Final}
+2022-09-20 09:56:45,849 INFO org.hibernate.dialect.Dialect HHH000400: Using dialect: org.hibernate.dialect.Oracle10gDialect
+2022-09-20 09:56:46,630 INFO org.hibernate.engine.transaction.jta.platform.internal.JtaPlatformInitiator HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
+2022-09-20 09:56:46,641 INFO org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean Initialized JPA EntityManagerFactory for persistence unit 'default'
+2022-09-20 09:56:46,970 INFO org.quartz.impl.StdSchedulerFactory Using default implementation for ThreadExecutor
+2022-09-20 09:56:46,983 INFO org.quartz.core.SchedulerSignalerImpl Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
+2022-09-20 09:56:46,984 INFO org.quartz.core.QuartzScheduler Quartz Scheduler v.2.3.2 created.
+2022-09-20 09:56:46,984 INFO org.quartz.simpl.RAMJobStore RAMJobStore initialized.
+2022-09-20 09:56:46,985 INFO org.quartz.core.QuartzScheduler Scheduler meta-data: Quartz Scheduler (v2.3.2) 'quartzScheduler' with instanceId 'NON_CLUSTERED'
+  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
+  NOT STARTED.
+  Currently in standby mode.
+  Number of jobs executed: 0
+  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
+  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.
+
+2022-09-20 09:56:46,985 INFO org.quartz.impl.StdSchedulerFactory Quartz scheduler 'quartzScheduler' initialized from an externally provided properties instance.
+2022-09-20 09:56:46,985 INFO org.quartz.impl.StdSchedulerFactory Quartz scheduler version: 2.3.2
+2022-09-20 09:56:46,986 INFO org.quartz.core.QuartzScheduler JobFactory set to: org.springframework.scheduling.quartz.SpringBeanJobFactory@79325c59
+2022-09-20 09:56:47,040 INFO org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer LiveReload server is running on port 35729
+2022-09-20 09:56:47,059 INFO org.springframework.scheduling.quartz.SchedulerFactoryBean Starting Quartz Scheduler now
+2022-09-20 09:56:47,060 INFO org.quartz.core.QuartzScheduler Scheduler quartzScheduler_$_NON_CLUSTERED started.
+2022-09-20 09:56:47,080 INFO vn.shb.service.ShbEmailHubApplication Started ShbEmailHubApplication in 4.595 seconds (JVM running for 6.366)
+2022-09-20 09:56:50,007 INFO vn.shb.service.jobs.HTLSCNBranchJob <!-----------Start HTLSCN Branch Job --------------->
+2022-09-20 09:56:50,119 INFO vn.shb.service.jobs.HTLSDNJob <!-----------Start HTLSDN Job --------------->
+2022-09-20 09:56:50,132 INFO vn.shb.service.services.HTLSDNJobService <!----------- HTLSDN Job List htlsSumaryEOD : 0--------------->
+2022-09-20 09:56:50,133 INFO vn.shb.service.jobs.HTLSCNAllBranchJob <!-----------Start HTLSCN All Branch Job --------------->
+2022-09-20 09:56:50,165 INFO vn.shb.service.services.HtlsSumaryRepoImp getHtlsSumariesCNAllBranchByValDt >>>>>>>>>>>> : {"ID":1,"ERROR_CODE":"99","ERROR_MSG":"No data found"}
+2022-09-20 09:56:55,014 INFO vn.shb.service.jobs.HTLSDNJob <!-----------Start HTLSDN Job --------------->
+2022-09-20 09:56:55,023 INFO vn.shb.service.services.HTLSDNJobService <!----------- HTLSDN Job List htlsSumaryEOD : 0--------------->
+2022-09-20 09:56:55,023 INFO vn.shb.service.jobs.HTLSCNBranchJob <!-----------Start HTLSCN Branch Job --------------->
+2022-09-20 09:56:55,028 INFO vn.shb.service.jobs.HTLSCNAllBranchJob <!-----------Start HTLSCN All Branch Job --------------->
+2022-09-20 09:56:55,034 INFO vn.shb.service.services.HtlsSumaryRepoImp getHtlsSumariesCNAllBranchByValDt >>>>>>>>>>>> : {"ID":1,"ERROR_CODE":"99","ERROR_MSG":"No data found"}
+2022-09-20 09:57:00,002 INFO vn.shb.service.jobs.HTLSCNAllBranchJob <!-----------Start HTLSCN All Branch Job --------------->
+2022-09-20 09:57:00,009 INFO vn.shb.service.services.HtlsSumaryRepoImp getHtlsSumariesCNAllBranchByValDt >>>>>>>>>>>> : {"ID":1,"ERROR_CODE":"99","ERROR_MSG":"No data found"}
+2022-09-20 09:57:00,009 INFO vn.shb.service.jobs.HTLSDNJob <!-----------Start HTLSDN Job --------------->
+2022-09-20 09:57:00,015 INFO vn.shb.service.services.HTLSDNJobService <!----------- HTLSDN Job List htlsSumaryEOD : 0--------------->
+2022-09-20 09:57:00,015 INFO vn.shb.service.jobs.HTLSCNBranchJob <!-----------Start HTLSCN Branch Job --------------->
+2022-09-20 09:57:05,008 INFO vn.shb.service.jobs.HTLSDNJob <!-----------Start HTLSDN Job --------------->
+2022-09-20 09:57:05,020 INFO vn.shb.service.services.HTLSDNJobService <!----------- HTLSDN Job List htlsSumaryEOD : 0--------------->
+2022-09-20 09:57:05,021 INFO vn.shb.service.jobs.HTLSCNBranchJob <!-----------Start HTLSCN Branch Job --------------->
+2022-09-20 09:57:05,029 INFO vn.shb.service.jobs.HTLSCNAllBranchJob <!-----------Start HTLSCN All Branch Job --------------->
+2022-09-20 09:57:05,043 INFO vn.shb.service.services.HtlsSumaryRepoImp getHtlsSumariesCNAllBranchByValDt >>>>>>>>>>>> : {"ID":1,"ERROR_CODE":"99","ERROR_MSG":"No data found"}
+2022-09-20 09:57:10,000 INFO vn.shb.service.jobs.HTLSDNJob <!-----------Start HTLSDN Job --------------->
+2022-09-20 09:57:10,011 INFO vn.shb.service.services.HTLSDNJobService <!----------- HTLSDN Job List htlsSumaryEOD : 0--------------->
+2022-09-20 09:57:10,012 INFO vn.shb.service.jobs.HTLSCNAllBranchJob <!-----------Start HTLSCN All Branch Job --------------->
+2022-09-20 09:57:10,020 INFO vn.shb.service.services.HtlsSumaryRepoImp getHtlsSumariesCNAllBranchByValDt >>>>>>>>>>>> : {"ID":1,"ERROR_CODE":"99","ERROR_MSG":"No data found"}
+2022-09-20 09:57:10,021 INFO vn.shb.service.jobs.HTLSCNBranchJob <!-----------Start HTLSCN Branch Job --------------->
+2022-09-20 09:57:14,293 INFO org.quartz.core.QuartzScheduler Scheduler quartzScheduler_$_NON_CLUSTERED paused.
+2022-09-20 09:57:14,295 INFO org.springframework.scheduling.quartz.SchedulerFactoryBean Shutting down Quartz Scheduler
+2022-09-20 09:57:14,295 INFO org.quartz.core.QuartzScheduler Scheduler quartzScheduler_$_NON_CLUSTERED shutting down.
+2022-09-20 09:57:14,295 INFO org.quartz.core.QuartzScheduler Scheduler quartzScheduler_$_NON_CLUSTERED paused.
+2022-09-20 09:57:14,295 INFO org.quartz.core.QuartzScheduler Scheduler quartzScheduler_$_NON_CLUSTERED shutdown complete.
+2022-09-20 09:57:14,297 INFO org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean Closing JPA EntityManagerFactory for persistence unit 'default'
+2022-09-20 10:01:27,432 INFO vn.shb.service.ShbEmailHubApplication Starting ShbEmailHubApplication using Java 1.8.0_191 on LINHDK1 with PID 38732 (D:\Projects\shb-email-hub\target\classes started by linhdk1 in D:\Projects\shb-email-hub)
+2022-09-20 10:01:27,433 INFO vn.shb.service.ShbEmailHubApplication No active profile set, falling back to 1 default profile: "default"
+2022-09-20 10:01:27,485 INFO org.springframework.boot.devtools.restart.ChangeableUrls The Class-Path manifest attribute in C:\Users\linhdk1\.m2\repository\com\oracle\database\jdbc\ojdbc8\21.1.0.0\ojdbc8-21.1.0.0.jar referenced one or more files that do not exist: file:/C:/Users/linhdk1/.m2/repository/com/oracle/database/jdbc/ojdbc8/21.1.0.0/oraclepki.jar
+2022-09-20 10:01:27,486 INFO org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
+2022-09-20 10:01:28,007 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate Bootstrapping Spring Data JPA repositories in DEFAULT mode.
+2022-09-20 10:01:28,027 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate Finished Spring Data repository scanning in 10 ms. Found 0 JPA repository interfaces.
+2022-09-20 10:01:28,431 INFO org.hibernate.jpa.internal.util.LogHelper HHH000204: Processing PersistenceUnitInfo [name: default]
+2022-09-20 10:01:28,484 INFO org.hibernate.Version HHH000412: Hibernate ORM core version 5.6.10.Final
+2022-09-20 10:01:28,645 INFO org.hibernate.annotations.common.Version HCANN000001: Hibernate Commons Annotations {5.1.2.Final}
+2022-09-20 10:01:30,027 INFO org.hibernate.dialect.Dialect HHH000400: Using dialect: org.hibernate.dialect.Oracle10gDialect
+2022-09-20 10:01:30,827 INFO org.hibernate.engine.transaction.jta.platform.internal.JtaPlatformInitiator HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
+2022-09-20 10:01:30,839 INFO org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean Initialized JPA EntityManagerFactory for persistence unit 'default'
+2022-09-20 10:01:31,139 INFO org.quartz.impl.StdSchedulerFactory Using default implementation for ThreadExecutor
+2022-09-20 10:01:31,152 INFO org.quartz.core.SchedulerSignalerImpl Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
+2022-09-20 10:01:31,152 INFO org.quartz.core.QuartzScheduler Quartz Scheduler v.2.3.2 created.
+2022-09-20 10:01:31,153 INFO org.quartz.simpl.RAMJobStore RAMJobStore initialized.
+2022-09-20 10:01:31,154 INFO org.quartz.core.QuartzScheduler Scheduler meta-data: Quartz Scheduler (v2.3.2) 'quartzScheduler' with instanceId 'NON_CLUSTERED'
+  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
+  NOT STARTED.
+  Currently in standby mode.
+  Number of jobs executed: 0
+  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
+  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.
+
+2022-09-20 10:01:31,154 INFO org.quartz.impl.StdSchedulerFactory Quartz scheduler 'quartzScheduler' initialized from an externally provided properties instance.
+2022-09-20 10:01:31,154 INFO org.quartz.impl.StdSchedulerFactory Quartz scheduler version: 2.3.2
+2022-09-20 10:01:31,154 INFO org.quartz.core.QuartzScheduler JobFactory set to: org.springframework.scheduling.quartz.SpringBeanJobFactory@1f963b18
+2022-09-20 10:01:31,197 INFO org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer LiveReload server is running on port 35729
+2022-09-20 10:01:31,214 INFO org.springframework.scheduling.quartz.SchedulerFactoryBean Starting Quartz Scheduler now
+2022-09-20 10:01:31,214 INFO org.quartz.core.QuartzScheduler Scheduler quartzScheduler_$_NON_CLUSTERED started.
+2022-09-20 10:01:31,231 INFO vn.shb.service.ShbEmailHubApplication Started ShbEmailHubApplication in 4.467 seconds (JVM running for 6.145)
+2022-09-20 10:01:35,012 INFO vn.shb.service.jobs.HTLSCNAllBranchJob <!-----------Start HTLSCN All Branch Job --------------->
+2022-09-20 10:01:35,117 INFO vn.shb.service.services.HtlsSumaryRepoImp getHtlsSumariesCNAllBranchByValDt/GET_DATA_KHCN_ALL_BRANCH >>>>>>>>>>>> : {"ID":1,"ERROR_CODE":"99","ERROR_MSG":"No data found"}
+2022-09-20 10:01:35,117 INFO vn.shb.service.jobs.HTLSCNBranchJob <!-----------Start HTLSCN Branch Job --------------->
+2022-09-20 10:01:35,129 INFO vn.shb.service.jobs.HTLSDNJob <!-----------Start HTLSDN Job --------------->
+2022-09-20 10:01:35,135 INFO vn.shb.service.services.HTLSDNJobService <!----------- HTLSDN Job List htlsSumaryEOD : 0--------------->
+2022-09-20 10:01:40,014 INFO vn.shb.service.jobs.HTLSDNJob <!-----------Start HTLSDN Job --------------->
+2022-09-20 10:01:40,021 INFO vn.shb.service.services.HTLSDNJobService <!----------- HTLSDN Job List htlsSumaryEOD : 0--------------->
+2022-09-20 10:01:40,022 INFO vn.shb.service.jobs.HTLSCNAllBranchJob <!-----------Start HTLSCN All Branch Job --------------->
+2022-09-20 10:01:40,031 INFO vn.shb.service.services.HtlsSumaryRepoImp getHtlsSumariesCNAllBranchByValDt/GET_DATA_KHCN_ALL_BRANCH >>>>>>>>>>>> : {"ID":1,"ERROR_CODE":"99","ERROR_MSG":"No data found"}
+2022-09-20 10:01:40,031 INFO vn.shb.service.jobs.HTLSCNBranchJob <!-----------Start HTLSCN Branch Job --------------->
+2022-09-20 10:01:45,011 INFO vn.shb.service.jobs.HTLSCNAllBranchJob <!-----------Start HTLSCN All Branch Job --------------->
+2022-09-20 10:01:45,022 INFO vn.shb.service.services.HtlsSumaryRepoImp getHtlsSumariesCNAllBranchByValDt/GET_DATA_KHCN_ALL_BRANCH >>>>>>>>>>>> : {"ID":1,"ERROR_CODE":"99","ERROR_MSG":"No data found"}
+2022-09-20 10:01:45,023 INFO vn.shb.service.jobs.HTLSCNBranchJob <!-----------Start HTLSCN Branch Job --------------->
+2022-09-20 10:01:45,032 INFO vn.shb.service.jobs.HTLSDNJob <!-----------Start HTLSDN Job --------------->
+2022-09-20 10:01:45,039 INFO vn.shb.service.services.HTLSDNJobService <!----------- HTLSDN Job List htlsSumaryEOD : 0--------------->
+2022-09-20 10:01:50,003 INFO vn.shb.service.jobs.HTLSCNAllBranchJob <!-----------Start HTLSCN All Branch Job --------------->
+2022-09-20 10:01:50,017 INFO vn.shb.service.services.HtlsSumaryRepoImp getHtlsSumariesCNAllBranchByValDt/GET_DATA_KHCN_ALL_BRANCH >>>>>>>>>>>> : {"ID":1,"ERROR_CODE":"99","ERROR_MSG":"No data found"}
+2022-09-20 10:01:50,018 INFO vn.shb.service.jobs.HTLSDNJob <!-----------Start HTLSDN Job --------------->
+2022-09-20 10:01:50,028 INFO vn.shb.service.services.HTLSDNJobService <!----------- HTLSDN Job List htlsSumaryEOD : 0--------------->
+2022-09-20 10:01:50,028 INFO vn.shb.service.jobs.HTLSCNBranchJob <!-----------Start HTLSCN Branch Job --------------->
+2022-09-20 10:01:55,000 INFO vn.shb.service.jobs.HTLSCNBranchJob <!-----------Start HTLSCN Branch Job --------------->
+2022-09-20 10:01:55,009 INFO vn.shb.service.jobs.HTLSCNAllBranchJob <!-----------Start HTLSCN All Branch Job --------------->
+2022-09-20 10:01:55,015 INFO vn.shb.service.services.HtlsSumaryRepoImp getHtlsSumariesCNAllBranchByValDt/GET_DATA_KHCN_ALL_BRANCH >>>>>>>>>>>> : {"ID":1,"ERROR_CODE":"99","ERROR_MSG":"No data found"}
+2022-09-20 10:01:55,016 INFO vn.shb.service.jobs.HTLSDNJob <!-----------Start HTLSDN Job --------------->
+2022-09-20 10:01:55,021 INFO vn.shb.service.services.HTLSDNJobService <!----------- HTLSDN Job List htlsSumaryEOD : 0--------------->
+2022-09-20 10:02:00,007 INFO vn.shb.service.jobs.HTLSCNAllBranchJob <!-----------Start HTLSCN All Branch Job --------------->
+2022-09-20 10:02:00,019 INFO vn.shb.service.services.HtlsSumaryRepoImp getHtlsSumariesCNAllBranchByValDt/GET_DATA_KHCN_ALL_BRANCH >>>>>>>>>>>> : {"ID":1,"ERROR_CODE":"99","ERROR_MSG":"No data found"}
+2022-09-20 10:02:00,020 INFO vn.shb.service.jobs.HTLSDNJob <!-----------Start HTLSDN Job --------------->
+2022-09-20 10:02:00,026 INFO vn.shb.service.services.HTLSDNJobService <!----------- HTLSDN Job List htlsSumaryEOD : 0--------------->
+2022-09-20 10:02:00,026 INFO vn.shb.service.jobs.HTLSCNBranchJob <!-----------Start HTLSCN Branch Job --------------->
+2022-09-20 10:02:05,013 INFO vn.shb.service.jobs.HTLSCNBranchJob <!-----------Start HTLSCN Branch Job --------------->
+2022-09-20 10:02:05,021 INFO vn.shb.service.jobs.HTLSCNAllBranchJob <!-----------Start HTLSCN All Branch Job --------------->
+2022-09-20 10:02:05,027 INFO vn.shb.service.services.HtlsSumaryRepoImp getHtlsSumariesCNAllBranchByValDt/GET_DATA_KHCN_ALL_BRANCH >>>>>>>>>>>> : {"ID":1,"ERROR_CODE":"99","ERROR_MSG":"No data found"}
+2022-09-20 10:02:05,027 INFO vn.shb.service.jobs.HTLSDNJob <!-----------Start HTLSDN Job --------------->
+2022-09-20 10:02:05,032 INFO vn.shb.service.services.HTLSDNJobService <!----------- HTLSDN Job List htlsSumaryEOD : 0--------------->
+2022-09-20 10:02:10,000 INFO vn.shb.service.jobs.HTLSDNJob <!-----------Start HTLSDN Job --------------->
+2022-09-20 10:02:10,011 INFO vn.shb.service.services.HTLSDNJobService <!----------- HTLSDN Job List htlsSumaryEOD : 0--------------->
+2022-09-20 10:02:10,011 INFO vn.shb.service.jobs.HTLSCNBranchJob <!-----------Start HTLSCN Branch Job --------------->
+2022-09-20 10:02:10,025 INFO vn.shb.service.jobs.HTLSCNAllBranchJob <!-----------Start HTLSCN All Branch Job --------------->
+2022-09-20 10:02:10,037 INFO vn.shb.service.services.HtlsSumaryRepoImp getHtlsSumariesCNAllBranchByValDt/GET_DATA_KHCN_ALL_BRANCH >>>>>>>>>>>> : {"ID":1,"ERROR_CODE":"99","ERROR_MSG":"No data found"}
+2022-09-20 10:02:11,424 INFO org.quartz.core.QuartzScheduler Scheduler quartzScheduler_$_NON_CLUSTERED paused.
+2022-09-20 10:02:11,426 INFO org.springframework.scheduling.quartz.SchedulerFactoryBean Shutting down Quartz Scheduler
+2022-09-20 10:02:11,426 INFO org.quartz.core.QuartzScheduler Scheduler quartzScheduler_$_NON_CLUSTERED shutting down.
+2022-09-20 10:02:11,426 INFO org.quartz.core.QuartzScheduler Scheduler quartzScheduler_$_NON_CLUSTERED paused.
+2022-09-20 10:02:11,427 INFO org.quartz.core.QuartzScheduler Scheduler quartzScheduler_$_NON_CLUSTERED shutdown complete.
+2022-09-20 10:02:11,429 INFO org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean Closing JPA EntityManagerFactory for persistence unit 'default'
+2022-09-20 10:03:15,731 INFO vn.shb.service.ShbEmailHubApplication Starting ShbEmailHubApplication using Java 1.8.0_191 on LINHDK1 with PID 22368 (D:\Projects\shb-email-hub\target\classes started by linhdk1 in D:\Projects\shb-email-hub)
+2022-09-20 10:03:15,731 INFO vn.shb.service.ShbEmailHubApplication No active profile set, falling back to 1 default profile: "default"
+2022-09-20 10:03:15,782 INFO org.springframework.boot.devtools.restart.ChangeableUrls The Class-Path manifest attribute in C:\Users\linhdk1\.m2\repository\com\oracle\database\jdbc\ojdbc8\21.1.0.0\ojdbc8-21.1.0.0.jar referenced one or more files that do not exist: file:/C:/Users/linhdk1/.m2/repository/com/oracle/database/jdbc/ojdbc8/21.1.0.0/oraclepki.jar
+2022-09-20 10:03:15,782 INFO org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
+2022-09-20 10:03:16,304 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate Bootstrapping Spring Data JPA repositories in DEFAULT mode.
+2022-09-20 10:03:16,324 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate Finished Spring Data repository scanning in 10 ms. Found 0 JPA repository interfaces.
+2022-09-20 10:03:16,743 INFO org.hibernate.jpa.internal.util.LogHelper HHH000204: Processing PersistenceUnitInfo [name: default]
+2022-09-20 10:03:16,799 INFO org.hibernate.Version HHH000412: Hibernate ORM core version 5.6.10.Final
+2022-09-20 10:03:16,960 INFO org.hibernate.annotations.common.Version HCANN000001: Hibernate Commons Annotations {5.1.2.Final}
+2022-09-20 10:03:18,299 INFO org.hibernate.dialect.Dialect HHH000400: Using dialect: org.hibernate.dialect.Oracle10gDialect
+2022-09-20 10:03:19,064 INFO org.hibernate.engine.transaction.jta.platform.internal.JtaPlatformInitiator HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
+2022-09-20 10:03:19,075 INFO org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean Initialized JPA EntityManagerFactory for persistence unit 'default'
+2022-09-20 10:03:19,378 INFO org.quartz.impl.StdSchedulerFactory Using default implementation for ThreadExecutor
+2022-09-20 10:03:19,389 INFO org.quartz.core.SchedulerSignalerImpl Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
+2022-09-20 10:03:19,389 INFO org.quartz.core.QuartzScheduler Quartz Scheduler v.2.3.2 created.
+2022-09-20 10:03:19,390 INFO org.quartz.simpl.RAMJobStore RAMJobStore initialized.
+2022-09-20 10:03:19,391 INFO org.quartz.core.QuartzScheduler Scheduler meta-data: Quartz Scheduler (v2.3.2) 'quartzScheduler' with instanceId 'NON_CLUSTERED'
+  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
+  NOT STARTED.
+  Currently in standby mode.
+  Number of jobs executed: 0
+  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
+  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.
+
+2022-09-20 10:03:19,392 INFO org.quartz.impl.StdSchedulerFactory Quartz scheduler 'quartzScheduler' initialized from an externally provided properties instance.
+2022-09-20 10:03:19,392 INFO org.quartz.impl.StdSchedulerFactory Quartz scheduler version: 2.3.2
+2022-09-20 10:03:19,392 INFO org.quartz.core.QuartzScheduler JobFactory set to: org.springframework.scheduling.quartz.SpringBeanJobFactory@79325c59
+2022-09-20 10:03:19,440 INFO org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer LiveReload server is running on port 35729
+2022-09-20 10:03:19,455 INFO org.springframework.scheduling.quartz.SchedulerFactoryBean Starting Quartz Scheduler now
+2022-09-20 10:03:19,455 INFO org.quartz.core.QuartzScheduler Scheduler quartzScheduler_$_NON_CLUSTERED started.
+2022-09-20 10:03:19,472 INFO vn.shb.service.ShbEmailHubApplication Started ShbEmailHubApplication in 4.41 seconds (JVM running for 6.144)
+2022-09-20 10:03:20,005 INFO vn.shb.service.jobs.HTLSCNAllBranchJob <!-----------Start HTLSCN All Branch Job --------------->
+2022-09-20 10:03:20,121 INFO vn.shb.service.services.HtlsSumaryRepoImp getHtlsSumariesCNAllBranchByValDt/GET_DATA_KHCN_ALL_BRANCH >>>>>>>>>>>> : {"ID":1,"ERROR_CODE":"99","ERROR_MSG":"No data found"}
+2022-09-20 10:03:20,121 INFO vn.shb.service.jobs.HTLSCNBranchJob <!-----------Start HTLSCN Branch Job --------------->
+2022-09-20 10:03:20,128 INFO vn.shb.service.jobs.HTLSDNJob <!-----------Start HTLSDN Job --------------->
+2022-09-20 10:03:25,001 INFO vn.shb.service.jobs.HTLSCNAllBranchJob <!-----------Start HTLSCN All Branch Job --------------->
+2022-09-20 10:03:25,009 INFO vn.shb.service.services.HtlsSumaryRepoImp getHtlsSumariesCNAllBranchByValDt/GET_DATA_KHCN_ALL_BRANCH >>>>>>>>>>>> : {"ID":1,"ERROR_CODE":"99","ERROR_MSG":"No data found"}
+2022-09-20 10:03:25,010 INFO vn.shb.service.jobs.HTLSCNBranchJob <!-----------Start HTLSCN Branch Job --------------->
+2022-09-20 10:03:25,015 INFO vn.shb.service.jobs.HTLSDNJob <!-----------Start HTLSDN Job --------------->
+2022-09-20 10:03:30,014 INFO vn.shb.service.jobs.HTLSCNAllBranchJob <!-----------Start HTLSCN All Branch Job --------------->
+2022-09-20 10:03:30,024 INFO vn.shb.service.services.HtlsSumaryRepoImp getHtlsSumariesCNAllBranchByValDt/GET_DATA_KHCN_ALL_BRANCH >>>>>>>>>>>> : {"ID":1,"ERROR_CODE":"99","ERROR_MSG":"No data found"}
+2022-09-20 10:03:30,025 INFO vn.shb.service.jobs.HTLSCNBranchJob <!-----------Start HTLSCN Branch Job --------------->
+2022-09-20 10:03:30,031 INFO vn.shb.service.jobs.HTLSDNJob <!-----------Start HTLSDN Job --------------->
+2022-09-20 10:03:35,006 INFO vn.shb.service.jobs.HTLSDNJob <!-----------Start HTLSDN Job --------------->
+2022-09-20 10:03:35,016 INFO vn.shb.service.jobs.HTLSCNBranchJob <!-----------Start HTLSCN Branch Job --------------->
+2022-09-20 10:03:35,042 INFO vn.shb.service.jobs.HTLSCNAllBranchJob <!-----------Start HTLSCN All Branch Job --------------->
+2022-09-20 10:03:35,052 INFO vn.shb.service.services.HtlsSumaryRepoImp getHtlsSumariesCNAllBranchByValDt/GET_DATA_KHCN_ALL_BRANCH >>>>>>>>>>>> : {"ID":1,"ERROR_CODE":"99","ERROR_MSG":"No data found"}
+2022-09-20 10:03:40,011 INFO vn.shb.service.jobs.HTLSCNBranchJob <!-----------Start HTLSCN Branch Job --------------->
+2022-09-20 10:03:40,022 INFO vn.shb.service.jobs.HTLSCNAllBranchJob <!-----------Start HTLSCN All Branch Job --------------->
+2022-09-20 10:03:40,030 INFO vn.shb.service.services.HtlsSumaryRepoImp getHtlsSumariesCNAllBranchByValDt/GET_DATA_KHCN_ALL_BRANCH >>>>>>>>>>>> : {"ID":1,"ERROR_CODE":"99","ERROR_MSG":"No data found"}
+2022-09-20 10:03:40,030 INFO vn.shb.service.jobs.HTLSDNJob <!-----------Start HTLSDN Job --------------->
+2022-09-20 10:03:45,006 INFO vn.shb.service.jobs.HTLSDNJob <!-----------Start HTLSDN Job --------------->
+2022-09-20 10:03:45,017 INFO vn.shb.service.jobs.HTLSCNAllBranchJob <!-----------Start HTLSCN All Branch Job --------------->
+2022-09-20 10:03:45,027 INFO vn.shb.service.services.HtlsSumaryRepoImp getHtlsSumariesCNAllBranchByValDt/GET_DATA_KHCN_ALL_BRANCH >>>>>>>>>>>> : {"ID":1,"ERROR_CODE":"99","ERROR_MSG":"No data found"}
+2022-09-20 10:03:45,027 INFO vn.shb.service.jobs.HTLSCNBranchJob <!-----------Start HTLSCN Branch Job --------------->
+2022-09-20 10:03:50,003 INFO vn.shb.service.jobs.HTLSDNJob <!-----------Start HTLSDN Job --------------->
+2022-09-20 10:03:50,012 INFO vn.shb.service.jobs.HTLSCNAllBranchJob <!-----------Start HTLSCN All Branch Job --------------->
+2022-09-20 10:03:50,019 INFO vn.shb.service.services.HtlsSumaryRepoImp getHtlsSumariesCNAllBranchByValDt/GET_DATA_KHCN_ALL_BRANCH >>>>>>>>>>>> : {"ID":1,"ERROR_CODE":"99","ERROR_MSG":"No data found"}
+2022-09-20 10:03:50,019 INFO vn.shb.service.jobs.HTLSCNBranchJob <!-----------Start HTLSCN Branch Job --------------->
+2022-09-20 10:03:55,010 INFO vn.shb.service.jobs.HTLSCNAllBranchJob <!-----------Start HTLSCN All Branch Job --------------->
+2022-09-20 10:03:55,018 INFO vn.shb.service.services.HtlsSumaryRepoImp getHtlsSumariesCNAllBranchByValDt/GET_DATA_KHCN_ALL_BRANCH >>>>>>>>>>>> : {"ID":1,"ERROR_CODE":"99","ERROR_MSG":"No data found"}
+2022-09-20 10:03:55,019 INFO vn.shb.service.jobs.HTLSDNJob <!-----------Start HTLSDN Job --------------->
+2022-09-20 10:03:55,025 INFO vn.shb.service.jobs.HTLSCNBranchJob <!-----------Start HTLSCN Branch Job --------------->
+2022-09-20 10:04:00,003 INFO vn.shb.service.jobs.HTLSCNAllBranchJob <!-----------Start HTLSCN All Branch Job --------------->
+2022-09-20 10:04:00,012 INFO vn.shb.service.services.HtlsSumaryRepoImp getHtlsSumariesCNAllBranchByValDt/GET_DATA_KHCN_ALL_BRANCH >>>>>>>>>>>> : {"ID":1,"ERROR_CODE":"99","ERROR_MSG":"No data found"}
+2022-09-20 10:04:00,013 INFO vn.shb.service.jobs.HTLSCNBranchJob <!-----------Start HTLSCN Branch Job --------------->
+2022-09-20 10:04:00,018 INFO vn.shb.service.jobs.HTLSDNJob <!-----------Start HTLSDN Job --------------->
+2022-09-20 10:04:05,007 INFO vn.shb.service.jobs.HTLSDNJob <!-----------Start HTLSDN Job --------------->
+2022-09-20 10:04:05,043 INFO vn.shb.service.jobs.HTLSCNAllBranchJob <!-----------Start HTLSCN All Branch Job --------------->
+2022-09-20 10:04:05,051 INFO vn.shb.service.services.HtlsSumaryRepoImp getHtlsSumariesCNAllBranchByValDt/GET_DATA_KHCN_ALL_BRANCH >>>>>>>>>>>> : {"ID":1,"ERROR_CODE":"99","ERROR_MSG":"No data found"}
+2022-09-20 10:04:05,052 INFO vn.shb.service.jobs.HTLSCNBranchJob <!-----------Start HTLSCN Branch Job --------------->
+2022-09-20 10:04:08,558 INFO org.quartz.core.QuartzScheduler Scheduler quartzScheduler_$_NON_CLUSTERED paused.
+2022-09-20 10:04:08,559 INFO org.springframework.scheduling.quartz.SchedulerFactoryBean Shutting down Quartz Scheduler
+2022-09-20 10:04:08,559 INFO org.quartz.core.QuartzScheduler Scheduler quartzScheduler_$_NON_CLUSTERED shutting down.
+2022-09-20 10:04:08,559 INFO org.quartz.core.QuartzScheduler Scheduler quartzScheduler_$_NON_CLUSTERED paused.
+2022-09-20 10:04:08,560 INFO org.quartz.core.QuartzScheduler Scheduler quartzScheduler_$_NON_CLUSTERED shutdown complete.
+2022-09-20 10:04:08,562 INFO org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean Closing JPA EntityManagerFactory for persistence unit 'default'
+2022-09-20 10:04:46,828 INFO vn.shb.service.ShbEmailHubApplicationTests Starting ShbEmailHubApplicationTests using Java 1.8.0_191 on LINHDK1 with PID 34968 (started by linhdk1 in D:\Projects\shb-email-hub)
+2022-09-20 10:04:46,828 INFO vn.shb.service.ShbEmailHubApplicationTests No active profile set, falling back to 1 default profile: "default"
+2022-09-20 10:04:47,298 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate Bootstrapping Spring Data JPA repositories in DEFAULT mode.
+2022-09-20 10:04:47,320 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate Finished Spring Data repository scanning in 11 ms. Found 0 JPA repository interfaces.
+2022-09-20 10:04:47,884 INFO org.hibernate.jpa.internal.util.LogHelper HHH000204: Processing PersistenceUnitInfo [name: default]
+2022-09-20 10:04:47,948 INFO org.hibernate.Version HHH000412: Hibernate ORM core version 5.6.10.Final
+2022-09-20 10:04:48,140 INFO org.hibernate.annotations.common.Version HCANN000001: Hibernate Commons Annotations {5.1.2.Final}
+2022-09-20 10:04:50,416 INFO org.hibernate.dialect.Dialect HHH000400: Using dialect: org.hibernate.dialect.Oracle10gDialect
+2022-09-20 10:04:51,402 INFO org.hibernate.engine.transaction.jta.platform.internal.JtaPlatformInitiator HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
+2022-09-20 10:04:51,416 INFO org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean Initialized JPA EntityManagerFactory for persistence unit 'default'
+2022-09-20 10:04:51,925 INFO org.quartz.impl.StdSchedulerFactory Using default implementation for ThreadExecutor
+2022-09-20 10:04:51,945 INFO org.quartz.core.SchedulerSignalerImpl Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
+2022-09-20 10:04:51,946 INFO org.quartz.core.QuartzScheduler Quartz Scheduler v.2.3.2 created.
+2022-09-20 10:04:51,947 INFO org.quartz.simpl.RAMJobStore RAMJobStore initialized.
+2022-09-20 10:04:51,949 INFO org.quartz.core.QuartzScheduler Scheduler meta-data: Quartz Scheduler (v2.3.2) 'quartzScheduler' with instanceId 'NON_CLUSTERED'
+  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
+  NOT STARTED.
+  Currently in standby mode.
+  Number of jobs executed: 0
+  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
+  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.
+
+2022-09-20 10:04:51,949 INFO org.quartz.impl.StdSchedulerFactory Quartz scheduler 'quartzScheduler' initialized from an externally provided properties instance.
+2022-09-20 10:04:51,950 INFO org.quartz.impl.StdSchedulerFactory Quartz scheduler version: 2.3.2
+2022-09-20 10:04:51,950 INFO org.quartz.core.QuartzScheduler JobFactory set to: org.springframework.scheduling.quartz.SpringBeanJobFactory@6d420cdd
+2022-09-20 10:04:52,017 INFO org.springframework.scheduling.quartz.SchedulerFactoryBean Starting Quartz Scheduler now
+2022-09-20 10:04:52,018 INFO org.quartz.core.QuartzScheduler Scheduler quartzScheduler_$_NON_CLUSTERED started.
+2022-09-20 10:04:52,035 INFO vn.shb.service.ShbEmailHubApplicationTests Started ShbEmailHubApplicationTests in 5.79 seconds (JVM running for 7.004)
+2022-09-20 10:04:52,195 INFO org.quartz.core.QuartzScheduler Scheduler quartzScheduler_$_NON_CLUSTERED paused.
+2022-09-20 10:04:52,197 INFO org.springframework.scheduling.quartz.SchedulerFactoryBean Shutting down Quartz Scheduler
+2022-09-20 10:04:52,197 INFO org.quartz.core.QuartzScheduler Scheduler quartzScheduler_$_NON_CLUSTERED shutting down.
+2022-09-20 10:04:52,197 INFO org.quartz.core.QuartzScheduler Scheduler quartzScheduler_$_NON_CLUSTERED paused.
+2022-09-20 10:04:52,198 INFO org.quartz.core.QuartzScheduler Scheduler quartzScheduler_$_NON_CLUSTERED shutdown complete.
+2022-09-20 10:04:52,201 INFO org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean Closing JPA EntityManagerFactory for persistence unit 'default'
+2022-09-20 11:01:47,212 INFO vn.shb.service.ShbEmailHubApplication Starting ShbEmailHubApplication using Java 1.8.0_191 on LINHDK1 with PID 35808 (D:\Projects\shb-email-hub\target\classes started by linhdk1 in D:\Projects\shb-email-hub)
+2022-09-20 11:01:47,213 INFO vn.shb.service.ShbEmailHubApplication No active profile set, falling back to 1 default profile: "default"
+2022-09-20 11:01:47,265 INFO org.springframework.boot.devtools.restart.ChangeableUrls The Class-Path manifest attribute in C:\Users\linhdk1\.m2\repository\com\oracle\database\jdbc\ojdbc8\21.1.0.0\ojdbc8-21.1.0.0.jar referenced one or more files that do not exist: file:/C:/Users/linhdk1/.m2/repository/com/oracle/database/jdbc/ojdbc8/21.1.0.0/oraclepki.jar
+2022-09-20 11:01:47,266 INFO org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
+2022-09-20 11:01:47,790 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate Bootstrapping Spring Data JPA repositories in DEFAULT mode.
+2022-09-20 11:01:47,811 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate Finished Spring Data repository scanning in 10 ms. Found 0 JPA repository interfaces.
+2022-09-20 11:01:48,214 INFO org.hibernate.jpa.internal.util.LogHelper HHH000204: Processing PersistenceUnitInfo [name: default]
+2022-09-20 11:01:48,274 INFO org.hibernate.Version HHH000412: Hibernate ORM core version 5.6.10.Final
+2022-09-20 11:01:48,463 INFO org.hibernate.annotations.common.Version HCANN000001: Hibernate Commons Annotations {5.1.2.Final}
+2022-09-20 11:01:49,888 INFO org.hibernate.dialect.Dialect HHH000400: Using dialect: org.hibernate.dialect.Oracle10gDialect
+2022-09-20 11:01:50,694 INFO org.hibernate.engine.transaction.jta.platform.internal.JtaPlatformInitiator HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
+2022-09-20 11:01:50,705 INFO org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean Initialized JPA EntityManagerFactory for persistence unit 'default'
+2022-09-20 11:01:51,010 INFO org.quartz.impl.StdSchedulerFactory Using default implementation for ThreadExecutor
+2022-09-20 11:01:51,022 INFO org.quartz.core.SchedulerSignalerImpl Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
+2022-09-20 11:01:51,023 INFO org.quartz.core.QuartzScheduler Quartz Scheduler v.2.3.2 created.
+2022-09-20 11:01:51,024 INFO org.quartz.simpl.RAMJobStore RAMJobStore initialized.
+2022-09-20 11:01:51,025 INFO org.quartz.core.QuartzScheduler Scheduler meta-data: Quartz Scheduler (v2.3.2) 'quartzScheduler' with instanceId 'NON_CLUSTERED'
+  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
+  NOT STARTED.
+  Currently in standby mode.
+  Number of jobs executed: 0
+  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
+  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.
+
+2022-09-20 11:01:51,025 INFO org.quartz.impl.StdSchedulerFactory Quartz scheduler 'quartzScheduler' initialized from an externally provided properties instance.
+2022-09-20 11:01:51,025 INFO org.quartz.impl.StdSchedulerFactory Quartz scheduler version: 2.3.2
+2022-09-20 11:01:51,025 INFO org.quartz.core.QuartzScheduler JobFactory set to: org.springframework.scheduling.quartz.SpringBeanJobFactory@4b3e503b
+2022-09-20 11:01:51,076 INFO org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer LiveReload server is running on port 35729
+2022-09-20 11:01:51,091 INFO org.springframework.scheduling.quartz.SchedulerFactoryBean Starting Quartz Scheduler now
+2022-09-20 11:01:51,091 INFO org.quartz.core.QuartzScheduler Scheduler quartzScheduler_$_NON_CLUSTERED started.
+2022-09-20 11:01:51,107 INFO vn.shb.service.ShbEmailHubApplication Started ShbEmailHubApplication in 4.555 seconds (JVM running for 6.279)
+2022-09-20 11:01:55,009 INFO vn.shb.service.jobs.HolidayByCurrencyJob <!-----------Start HTLSCN All Branch Job --------------->
+2022-09-20 11:02:00,015 INFO vn.shb.service.jobs.HolidayByCurrencyJob <!-----------Start HTLSCN All Branch Job --------------->
+2022-09-20 11:02:05,016 INFO vn.shb.service.jobs.HolidayByCurrencyJob <!-----------Start HTLSCN All Branch Job --------------->
+2022-09-20 11:02:06,621 INFO org.quartz.core.QuartzScheduler Scheduler quartzScheduler_$_NON_CLUSTERED paused.
+2022-09-20 11:02:06,624 INFO org.springframework.scheduling.quartz.SchedulerFactoryBean Shutting down Quartz Scheduler
+2022-09-20 11:02:06,624 INFO org.quartz.core.QuartzScheduler Scheduler quartzScheduler_$_NON_CLUSTERED shutting down.
+2022-09-20 11:02:06,625 INFO org.quartz.core.QuartzScheduler Scheduler quartzScheduler_$_NON_CLUSTERED paused.
+2022-09-20 11:02:06,625 INFO org.quartz.core.QuartzScheduler Scheduler quartzScheduler_$_NON_CLUSTERED shutdown complete.
+2022-09-20 11:02:06,627 INFO org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean Closing JPA EntityManagerFactory for persistence unit 'default'
+2022-09-20 11:09:01,566 INFO vn.shb.service.ShbEmailHubApplication Starting ShbEmailHubApplication using Java 1.8.0_191 on LINHDK1 with PID 5172 (D:\Projects\shb-email-hub\target\classes started by linhdk1 in D:\Projects\shb-email-hub)
+2022-09-20 11:09:01,567 INFO vn.shb.service.ShbEmailHubApplication No active profile set, falling back to 1 default profile: "default"
+2022-09-20 11:09:01,618 INFO org.springframework.boot.devtools.restart.ChangeableUrls The Class-Path manifest attribute in C:\Users\linhdk1\.m2\repository\com\oracle\database\jdbc\ojdbc8\21.1.0.0\ojdbc8-21.1.0.0.jar referenced one or more files that do not exist: file:/C:/Users/linhdk1/.m2/repository/com/oracle/database/jdbc/ojdbc8/21.1.0.0/oraclepki.jar
+2022-09-20 11:09:01,619 INFO org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
+2022-09-20 11:09:02,158 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate Bootstrapping Spring Data JPA repositories in DEFAULT mode.
+2022-09-20 11:09:02,179 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate Finished Spring Data repository scanning in 10 ms. Found 0 JPA repository interfaces.
+2022-09-20 11:09:02,597 INFO org.hibernate.jpa.internal.util.LogHelper HHH000204: Processing PersistenceUnitInfo [name: default]
+2022-09-20 11:09:02,653 INFO org.hibernate.Version HHH000412: Hibernate ORM core version 5.6.10.Final
+2022-09-20 11:09:02,822 INFO org.hibernate.annotations.common.Version HCANN000001: Hibernate Commons Annotations {5.1.2.Final}
+2022-09-20 11:09:04,198 INFO org.hibernate.dialect.Dialect HHH000400: Using dialect: org.hibernate.dialect.Oracle10gDialect
+2022-09-20 11:09:05,001 INFO org.hibernate.engine.transaction.jta.platform.internal.JtaPlatformInitiator HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
+2022-09-20 11:09:05,013 INFO org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean Initialized JPA EntityManagerFactory for persistence unit 'default'
+2022-09-20 11:09:05,146 WARN org.springframework.context.annotation.AnnotationConfigApplicationContext Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'holidayByCurrencyJob' defined in file [D:\Projects\shb-email-hub\target\classes\vn\shb\service\jobs\HolidayByCurrencyJob.class]: Initialization of bean failed; nested exception is java.lang.IllegalStateException: Encountered invalid @Scheduled method 'execute': Cron expression must consist of 6 fields (found 7 in "0 0 8-9 ? * * *")
+2022-09-20 11:09:05,146 INFO org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean Closing JPA EntityManagerFactory for persistence unit 'default'
+2022-09-20 11:09:05,251 INFO org.springframework.boot.autoconfigure.logging.ConditionEvaluationReportLoggingListener 
+
+Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
+2022-09-20 11:09:05,290 ERROR org.springframework.boot.SpringApplication Application run failed
+org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'holidayByCurrencyJob' defined in file [D:\Projects\shb-email-hub\target\classes\vn\shb\service\jobs\HolidayByCurrencyJob.class]: Initialization of bean failed; nested exception is java.lang.IllegalStateException: Encountered invalid @Scheduled method 'execute': Cron expression must consist of 6 fields (found 7 in "0 0 8-9 ? * * *")
+	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:628)
+	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:542)
+	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:335)
+	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
+	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:333)
+	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
+	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:955)
+	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:918)
+	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:583)
+	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:734)
+	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:408)
+	at org.springframework.boot.SpringApplication.run(SpringApplication.java:308)
+	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1306)
+	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1295)
+	at vn.shb.service.ShbEmailHubApplication.main(ShbEmailHubApplication.java:12)
+	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
+	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
+	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
+	at java.lang.reflect.Method.invoke(Method.java:498)
+	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49)
+Caused by: java.lang.IllegalStateException: Encountered invalid @Scheduled method 'execute': Cron expression must consist of 6 fields (found 7 in "0 0 8-9 ? * * *")
+	at org.springframework.scheduling.annotation.ScheduledAnnotationBeanPostProcessor.processScheduled(ScheduledAnnotationBeanPostProcessor.java:518)
+	at org.springframework.scheduling.annotation.ScheduledAnnotationBeanPostProcessor.lambda$null$1(ScheduledAnnotationBeanPostProcessor.java:380)
+	at java.lang.Iterable.forEach(Iterable.java:75)
+	at org.springframework.scheduling.annotation.ScheduledAnnotationBeanPostProcessor.lambda$postProcessAfterInitialization$2(ScheduledAnnotationBeanPostProcessor.java:380)
+	at java.util.LinkedHashMap.forEach(LinkedHashMap.java:684)
+	at org.springframework.scheduling.annotation.ScheduledAnnotationBeanPostProcessor.postProcessAfterInitialization(ScheduledAnnotationBeanPostProcessor.java:379)
+	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsAfterInitialization(AbstractAutowireCapableBeanFactory.java:455)
+	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1808)
+	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:620)
+	... 19 common frames omitted
+2022-09-20 11:09:54,975 INFO vn.shb.service.ShbEmailHubApplication Starting ShbEmailHubApplication using Java 1.8.0_191 on LINHDK1 with PID 45628 (D:\Projects\shb-email-hub\target\classes started by linhdk1 in D:\Projects\shb-email-hub)
+2022-09-20 11:09:54,976 INFO vn.shb.service.ShbEmailHubApplication No active profile set, falling back to 1 default profile: "default"
+2022-09-20 11:09:55,030 INFO org.springframework.boot.devtools.restart.ChangeableUrls The Class-Path manifest attribute in C:\Users\linhdk1\.m2\repository\com\oracle\database\jdbc\ojdbc8\21.1.0.0\ojdbc8-21.1.0.0.jar referenced one or more files that do not exist: file:/C:/Users/linhdk1/.m2/repository/com/oracle/database/jdbc/ojdbc8/21.1.0.0/oraclepki.jar
+2022-09-20 11:09:55,030 INFO org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
+2022-09-20 11:09:55,573 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate Bootstrapping Spring Data JPA repositories in DEFAULT mode.
+2022-09-20 11:09:55,595 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate Finished Spring Data repository scanning in 11 ms. Found 0 JPA repository interfaces.
+2022-09-20 11:09:56,014 INFO org.hibernate.jpa.internal.util.LogHelper HHH000204: Processing PersistenceUnitInfo [name: default]
+2022-09-20 11:09:56,072 INFO org.hibernate.Version HHH000412: Hibernate ORM core version 5.6.10.Final
+2022-09-20 11:09:56,240 INFO org.hibernate.annotations.common.Version HCANN000001: Hibernate Commons Annotations {5.1.2.Final}
+2022-09-20 11:09:57,643 INFO org.hibernate.dialect.Dialect HHH000400: Using dialect: org.hibernate.dialect.Oracle10gDialect
+2022-09-20 11:09:58,457 INFO org.hibernate.engine.transaction.jta.platform.internal.JtaPlatformInitiator HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
+2022-09-20 11:09:58,471 INFO org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean Initialized JPA EntityManagerFactory for persistence unit 'default'
+2022-09-20 11:09:58,793 INFO org.quartz.impl.StdSchedulerFactory Using default implementation for ThreadExecutor
+2022-09-20 11:09:58,805 INFO org.quartz.core.SchedulerSignalerImpl Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
+2022-09-20 11:09:58,805 INFO org.quartz.core.QuartzScheduler Quartz Scheduler v.2.3.2 created.
+2022-09-20 11:09:58,806 INFO org.quartz.simpl.RAMJobStore RAMJobStore initialized.
+2022-09-20 11:09:58,808 INFO org.quartz.core.QuartzScheduler Scheduler meta-data: Quartz Scheduler (v2.3.2) 'quartzScheduler' with instanceId 'NON_CLUSTERED'
+  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
+  NOT STARTED.
+  Currently in standby mode.
+  Number of jobs executed: 0
+  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
+  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.
+
+2022-09-20 11:09:58,808 INFO org.quartz.impl.StdSchedulerFactory Quartz scheduler 'quartzScheduler' initialized from an externally provided properties instance.
+2022-09-20 11:09:58,808 INFO org.quartz.impl.StdSchedulerFactory Quartz scheduler version: 2.3.2
+2022-09-20 11:09:58,808 INFO org.quartz.core.QuartzScheduler JobFactory set to: org.springframework.scheduling.quartz.SpringBeanJobFactory@62c10e84
+2022-09-20 11:09:58,855 INFO org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer LiveReload server is running on port 35729
+2022-09-20 11:09:58,870 INFO org.springframework.scheduling.quartz.SchedulerFactoryBean Starting Quartz Scheduler now
+2022-09-20 11:09:58,870 INFO org.quartz.core.QuartzScheduler Scheduler quartzScheduler_$_NON_CLUSTERED started.
+2022-09-20 11:09:58,886 INFO vn.shb.service.ShbEmailHubApplication Started ShbEmailHubApplication in 4.589 seconds (JVM running for 6.396)
+2022-09-20 11:11:03,655 INFO org.quartz.core.QuartzScheduler Scheduler quartzScheduler_$_NON_CLUSTERED paused.
+2022-09-20 11:11:03,657 INFO org.springframework.scheduling.quartz.SchedulerFactoryBean Shutting down Quartz Scheduler
+2022-09-20 11:11:03,658 INFO org.quartz.core.QuartzScheduler Scheduler quartzScheduler_$_NON_CLUSTERED shutting down.
+2022-09-20 11:11:03,658 INFO org.quartz.core.QuartzScheduler Scheduler quartzScheduler_$_NON_CLUSTERED paused.
+2022-09-20 11:11:03,659 INFO org.quartz.core.QuartzScheduler Scheduler quartzScheduler_$_NON_CLUSTERED shutdown complete.
+2022-09-20 11:11:03,662 INFO org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean Closing JPA EntityManagerFactory for persistence unit 'default'
+2022-09-20 11:11:09,952 INFO vn.shb.service.ShbEmailHubApplication Starting ShbEmailHubApplication using Java 1.8.0_191 on LINHDK1 with PID 39172 (D:\Projects\shb-email-hub\target\classes started by linhdk1 in D:\Projects\shb-email-hub)
+2022-09-20 11:11:09,952 INFO vn.shb.service.ShbEmailHubApplication No active profile set, falling back to 1 default profile: "default"
+2022-09-20 11:11:10,010 INFO org.springframework.boot.devtools.restart.ChangeableUrls The Class-Path manifest attribute in C:\Users\linhdk1\.m2\repository\com\oracle\database\jdbc\ojdbc8\21.1.0.0\ojdbc8-21.1.0.0.jar referenced one or more files that do not exist: file:/C:/Users/linhdk1/.m2/repository/com/oracle/database/jdbc/ojdbc8/21.1.0.0/oraclepki.jar
+2022-09-20 11:11:10,011 INFO org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
+2022-09-20 11:11:10,570 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate Bootstrapping Spring Data JPA repositories in DEFAULT mode.
+2022-09-20 11:11:10,592 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate Finished Spring Data repository scanning in 11 ms. Found 0 JPA repository interfaces.
+2022-09-20 11:11:11,037 INFO org.hibernate.jpa.internal.util.LogHelper HHH000204: Processing PersistenceUnitInfo [name: default]
+2022-09-20 11:11:11,097 INFO org.hibernate.Version HHH000412: Hibernate ORM core version 5.6.10.Final
+2022-09-20 11:11:11,271 INFO org.hibernate.annotations.common.Version HCANN000001: Hibernate Commons Annotations {5.1.2.Final}
+2022-09-20 11:11:12,705 INFO org.hibernate.dialect.Dialect HHH000400: Using dialect: org.hibernate.dialect.Oracle10gDialect
+2022-09-20 11:11:13,535 INFO org.hibernate.engine.transaction.jta.platform.internal.JtaPlatformInitiator HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
+2022-09-20 11:11:13,546 INFO org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean Initialized JPA EntityManagerFactory for persistence unit 'default'
+2022-09-20 11:11:13,873 INFO org.quartz.impl.StdSchedulerFactory Using default implementation for ThreadExecutor
+2022-09-20 11:11:13,885 INFO org.quartz.core.SchedulerSignalerImpl Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
+2022-09-20 11:11:13,885 INFO org.quartz.core.QuartzScheduler Quartz Scheduler v.2.3.2 created.
+2022-09-20 11:11:13,886 INFO org.quartz.simpl.RAMJobStore RAMJobStore initialized.
+2022-09-20 11:11:13,887 INFO org.quartz.core.QuartzScheduler Scheduler meta-data: Quartz Scheduler (v2.3.2) 'quartzScheduler' with instanceId 'NON_CLUSTERED'
+  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
+  NOT STARTED.
+  Currently in standby mode.
+  Number of jobs executed: 0
+  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
+  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.
+
+2022-09-20 11:11:13,887 INFO org.quartz.impl.StdSchedulerFactory Quartz scheduler 'quartzScheduler' initialized from an externally provided properties instance.
+2022-09-20 11:11:13,887 INFO org.quartz.impl.StdSchedulerFactory Quartz scheduler version: 2.3.2
+2022-09-20 11:11:13,887 INFO org.quartz.core.QuartzScheduler JobFactory set to: org.springframework.scheduling.quartz.SpringBeanJobFactory@62c10e84
+2022-09-20 11:11:13,935 INFO org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer LiveReload server is running on port 35729
+2022-09-20 11:11:13,951 INFO org.springframework.scheduling.quartz.SchedulerFactoryBean Starting Quartz Scheduler now
+2022-09-20 11:11:13,951 INFO org.quartz.core.QuartzScheduler Scheduler quartzScheduler_$_NON_CLUSTERED started.
+2022-09-20 11:11:13,968 INFO vn.shb.service.ShbEmailHubApplication Started ShbEmailHubApplication in 4.728 seconds (JVM running for 6.443)
+2022-09-20 11:11:15,001 INFO vn.shb.service.jobs.HolidayByCurrencyJob <!-----------Start HolidayByCurrency Job --------------->
+2022-09-20 11:11:30,016 INFO vn.shb.service.jobs.HolidayByCurrencyJob <!-----------Start HolidayByCurrency Job --------------->
+2022-09-20 11:11:45,005 INFO vn.shb.service.jobs.HolidayByCurrencyJob <!-----------Start HolidayByCurrency Job --------------->
+2022-09-20 11:12:00,010 INFO vn.shb.service.jobs.HolidayByCurrencyJob <!-----------Start HolidayByCurrency Job --------------->
+2022-09-20 11:12:15,006 INFO vn.shb.service.jobs.HolidayByCurrencyJob <!-----------Start HolidayByCurrency Job --------------->
+2022-09-20 11:12:30,010 INFO vn.shb.service.jobs.HolidayByCurrencyJob <!-----------Start HolidayByCurrency Job --------------->
+2022-09-20 11:12:45,012 INFO vn.shb.service.jobs.HolidayByCurrencyJob <!-----------Start HolidayByCurrency Job --------------->
+2022-09-20 11:12:47,792 INFO org.quartz.core.QuartzScheduler Scheduler quartzScheduler_$_NON_CLUSTERED paused.
+2022-09-20 11:12:47,794 INFO org.springframework.scheduling.quartz.SchedulerFactoryBean Shutting down Quartz Scheduler
+2022-09-20 11:12:47,795 INFO org.quartz.core.QuartzScheduler Scheduler quartzScheduler_$_NON_CLUSTERED shutting down.
+2022-09-20 11:12:47,795 INFO org.quartz.core.QuartzScheduler Scheduler quartzScheduler_$_NON_CLUSTERED paused.
+2022-09-20 11:12:47,795 INFO org.quartz.core.QuartzScheduler Scheduler quartzScheduler_$_NON_CLUSTERED shutdown complete.
+2022-09-20 11:12:47,798 INFO org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean Closing JPA EntityManagerFactory for persistence unit 'default'
+2022-09-20 15:02:44,874 INFO vn.shb.service.ShbEmailHubApplication Starting ShbEmailHubApplication using Java 1.8.0_191 on LINHDK1 with PID 42468 (D:\Projects\shb-email-hub\target\classes started by linhdk1 in D:\Projects\shb-email-hub)
+2022-09-20 15:02:44,875 INFO vn.shb.service.ShbEmailHubApplication No active profile set, falling back to 1 default profile: "default"
+2022-09-20 15:02:44,930 INFO org.springframework.boot.devtools.restart.ChangeableUrls The Class-Path manifest attribute in C:\Users\linhdk1\.m2\repository\com\oracle\database\jdbc\ojdbc8\21.1.0.0\ojdbc8-21.1.0.0.jar referenced one or more files that do not exist: file:/C:/Users/linhdk1/.m2/repository/com/oracle/database/jdbc/ojdbc8/21.1.0.0/oraclepki.jar
+2022-09-20 15:02:44,930 INFO org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
+2022-09-20 15:02:45,489 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate Bootstrapping Spring Data JPA repositories in DEFAULT mode.
+2022-09-20 15:02:45,509 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate Finished Spring Data repository scanning in 10 ms. Found 0 JPA repository interfaces.
+2022-09-20 15:02:45,901 INFO org.hibernate.jpa.internal.util.LogHelper HHH000204: Processing PersistenceUnitInfo [name: default]
+2022-09-20 15:02:45,955 INFO org.hibernate.Version HHH000412: Hibernate ORM core version 5.6.10.Final
+2022-09-20 15:02:46,120 INFO org.hibernate.annotations.common.Version HCANN000001: Hibernate Commons Annotations {5.1.2.Final}
+2022-09-20 15:02:47,515 INFO org.hibernate.dialect.Dialect HHH000400: Using dialect: org.hibernate.dialect.Oracle10gDialect
+2022-09-20 15:02:48,270 INFO org.hibernate.engine.transaction.jta.platform.internal.JtaPlatformInitiator HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
+2022-09-20 15:02:48,281 INFO org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean Initialized JPA EntityManagerFactory for persistence unit 'default'
+2022-09-20 15:02:48,597 INFO org.quartz.impl.StdSchedulerFactory Using default implementation for ThreadExecutor
+2022-09-20 15:02:48,609 INFO org.quartz.core.SchedulerSignalerImpl Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
+2022-09-20 15:02:48,610 INFO org.quartz.core.QuartzScheduler Quartz Scheduler v.2.3.2 created.
+2022-09-20 15:02:48,611 INFO org.quartz.simpl.RAMJobStore RAMJobStore initialized.
+2022-09-20 15:02:48,612 INFO org.quartz.core.QuartzScheduler Scheduler meta-data: Quartz Scheduler (v2.3.2) 'quartzScheduler' with instanceId 'NON_CLUSTERED'
+  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
+  NOT STARTED.
+  Currently in standby mode.
+  Number of jobs executed: 0
+  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
+  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.
+
+2022-09-20 15:02:48,612 INFO org.quartz.impl.StdSchedulerFactory Quartz scheduler 'quartzScheduler' initialized from an externally provided properties instance.
+2022-09-20 15:02:48,612 INFO org.quartz.impl.StdSchedulerFactory Quartz scheduler version: 2.3.2
+2022-09-20 15:02:48,612 INFO org.quartz.core.QuartzScheduler JobFactory set to: org.springframework.scheduling.quartz.SpringBeanJobFactory@5799aa57
+2022-09-20 15:02:48,661 INFO org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer LiveReload server is running on port 35729
+2022-09-20 15:02:48,675 INFO org.springframework.scheduling.quartz.SchedulerFactoryBean Starting Quartz Scheduler now
+2022-09-20 15:02:48,676 INFO org.quartz.core.QuartzScheduler Scheduler quartzScheduler_$_NON_CLUSTERED started.
+2022-09-20 15:02:48,691 INFO vn.shb.service.ShbEmailHubApplication Started ShbEmailHubApplication in 4.505 seconds (JVM running for 6.227)
+2022-09-20 15:02:50,003 INFO vn.shb.service.jobs.HolidayByCurrencyJob <!-----------Start HolidayByCurrency Job --------------->
+2022-09-20 15:02:55,009 INFO vn.shb.service.jobs.HolidayByCurrencyJob <!-----------Start HolidayByCurrency Job --------------->
+2022-09-20 15:03:00,009 INFO vn.shb.service.jobs.HolidayByCurrencyJob <!-----------Start HolidayByCurrency Job --------------->
+2022-09-20 15:03:03,122 INFO org.quartz.core.QuartzScheduler Scheduler quartzScheduler_$_NON_CLUSTERED paused.
+2022-09-20 15:03:03,126 INFO org.springframework.scheduling.quartz.SchedulerFactoryBean Shutting down Quartz Scheduler
+2022-09-20 15:03:03,126 INFO org.quartz.core.QuartzScheduler Scheduler quartzScheduler_$_NON_CLUSTERED shutting down.
+2022-09-20 15:03:03,127 INFO org.quartz.core.QuartzScheduler Scheduler quartzScheduler_$_NON_CLUSTERED paused.
+2022-09-20 15:03:03,127 INFO org.quartz.core.QuartzScheduler Scheduler quartzScheduler_$_NON_CLUSTERED shutdown complete.
+2022-09-20 15:03:03,129 INFO org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean Closing JPA EntityManagerFactory for persistence unit 'default'
+2022-09-20 15:03:33,346 INFO vn.shb.service.ShbEmailHubApplication Starting ShbEmailHubApplication using Java 1.8.0_191 on LINHDK1 with PID 19076 (D:\Projects\shb-email-hub\target\classes started by linhdk1 in D:\Projects\shb-email-hub)
+2022-09-20 15:03:33,347 INFO vn.shb.service.ShbEmailHubApplication No active profile set, falling back to 1 default profile: "default"
+2022-09-20 15:03:33,402 INFO org.springframework.boot.devtools.restart.ChangeableUrls The Class-Path manifest attribute in C:\Users\linhdk1\.m2\repository\com\oracle\database\jdbc\ojdbc8\21.1.0.0\ojdbc8-21.1.0.0.jar referenced one or more files that do not exist: file:/C:/Users/linhdk1/.m2/repository/com/oracle/database/jdbc/ojdbc8/21.1.0.0/oraclepki.jar
+2022-09-20 15:03:33,402 INFO org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
+2022-09-20 15:03:33,937 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate Bootstrapping Spring Data JPA repositories in DEFAULT mode.
+2022-09-20 15:03:33,956 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate Finished Spring Data repository scanning in 10 ms. Found 0 JPA repository interfaces.
+2022-09-20 15:03:34,353 INFO org.hibernate.jpa.internal.util.LogHelper HHH000204: Processing PersistenceUnitInfo [name: default]
+2022-09-20 15:03:34,407 INFO org.hibernate.Version HHH000412: Hibernate ORM core version 5.6.10.Final
+2022-09-20 15:03:34,571 INFO org.hibernate.annotations.common.Version HCANN000001: Hibernate Commons Annotations {5.1.2.Final}
+2022-09-20 15:03:35,996 INFO org.hibernate.dialect.Dialect HHH000400: Using dialect: org.hibernate.dialect.Oracle10gDialect
+2022-09-20 15:03:36,773 INFO org.hibernate.engine.transaction.jta.platform.internal.JtaPlatformInitiator HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
+2022-09-20 15:03:36,788 INFO org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean Initialized JPA EntityManagerFactory for persistence unit 'default'
+2022-09-20 15:03:37,093 INFO org.quartz.impl.StdSchedulerFactory Using default implementation for ThreadExecutor
+2022-09-20 15:03:37,104 INFO org.quartz.core.SchedulerSignalerImpl Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
+2022-09-20 15:03:37,105 INFO org.quartz.core.QuartzScheduler Quartz Scheduler v.2.3.2 created.
+2022-09-20 15:03:37,105 INFO org.quartz.simpl.RAMJobStore RAMJobStore initialized.
+2022-09-20 15:03:37,106 INFO org.quartz.core.QuartzScheduler Scheduler meta-data: Quartz Scheduler (v2.3.2) 'quartzScheduler' with instanceId 'NON_CLUSTERED'
+  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
+  NOT STARTED.
+  Currently in standby mode.
+  Number of jobs executed: 0
+  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
+  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.
+
+2022-09-20 15:03:37,107 INFO org.quartz.impl.StdSchedulerFactory Quartz scheduler 'quartzScheduler' initialized from an externally provided properties instance.
+2022-09-20 15:03:37,107 INFO org.quartz.impl.StdSchedulerFactory Quartz scheduler version: 2.3.2
+2022-09-20 15:03:37,107 INFO org.quartz.core.QuartzScheduler JobFactory set to: org.springframework.scheduling.quartz.SpringBeanJobFactory@5799aa57
+2022-09-20 15:03:37,159 INFO org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer LiveReload server is running on port 35729
+2022-09-20 15:03:37,175 INFO org.springframework.scheduling.quartz.SchedulerFactoryBean Starting Quartz Scheduler now
+2022-09-20 15:03:37,175 INFO org.quartz.core.QuartzScheduler Scheduler quartzScheduler_$_NON_CLUSTERED started.
+2022-09-20 15:03:37,191 INFO vn.shb.service.ShbEmailHubApplication Started ShbEmailHubApplication in 4.543 seconds (JVM running for 6.315)
+2022-09-20 15:03:40,017 INFO vn.shb.service.jobs.HolidayByCurrencyJob <!-----------Start HolidayByCurrency Job --------------->
+2022-09-20 15:05:13,353 INFO org.quartz.core.QuartzScheduler Scheduler quartzScheduler_$_NON_CLUSTERED paused.
+2022-09-20 15:05:13,355 INFO org.springframework.scheduling.quartz.SchedulerFactoryBean Shutting down Quartz Scheduler
+2022-09-20 15:05:13,355 INFO org.quartz.core.QuartzScheduler Scheduler quartzScheduler_$_NON_CLUSTERED shutting down.
+2022-09-20 15:05:13,355 INFO org.quartz.core.QuartzScheduler Scheduler quartzScheduler_$_NON_CLUSTERED paused.
+2022-09-20 15:05:13,356 INFO org.quartz.core.QuartzScheduler Scheduler quartzScheduler_$_NON_CLUSTERED shutdown complete.
+2022-09-20 15:05:13,358 INFO org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean Closing JPA EntityManagerFactory for persistence unit 'default'
+2022-09-20 15:05:13,360 WARN org.hibernate.engine.jdbc.spi.SqlExceptionHelper SQL Error: 17002, SQLState: 08006
+2022-09-20 15:05:13,360 ERROR org.hibernate.engine.jdbc.spi.SqlExceptionHelper IO Error: Socket read interrupted
+2022-09-20 15:05:13,386 ERROR vn.shb.service.services.HolidayByCurrencyImpl {"message":"PKG_SHB_EMAIL_HUB.GET_HOLIDAY_BY_CURRENCY/org.hibernate.exception.JDBCConnectionException: Error extracting results from CallableStatement","detailMessage":"org.hibernate.exception.JDBCConnectionException: Error extracting results from CallableStatement","elements":[{"declaringClass":"org.hibernate.internal.ExceptionConverterImpl","methodName":"convert","fileName":"ExceptionConverterImpl.java","lineNumber":154},{"declaringClass":"org.hibernate.internal.ExceptionConverterImpl","methodName":"convert","fileName":"ExceptionConverterImpl.java","lineNumber":181},{"declaringClass":"org.hibernate.procedure.internal.ProcedureCallImpl","methodName":"getResultList","fileName":"ProcedureCallImpl.java","lineNumber":733},{"declaringClass":"vn.shb.service.services.HolidayByCurrencyImpl","methodName":"getListHolidayCCY","fileName":"HolidayByCurrencyImpl.java","lineNumber":32},{"declaringClass":"vn.shb.service.services.HolidayByCurrencyJobService","methodName":"run","fileName":"HolidayByCurrencyJobService.java","lineNumber":30},{"declaringClass":"vn.shb.service.jobs.HolidayByCurrencyJob","methodName":"execute","fileName":"HolidayByCurrencyJob.java","lineNumber":26},{"declaringClass":"sun.reflect.NativeMethodAccessorImpl","methodName":"invoke0","fileName":"NativeMethodAccessorImpl.java","lineNumber":-2},{"declaringClass":"sun.reflect.NativeMethodAccessorImpl","methodName":"invoke","fileName":"NativeMethodAccessorImpl.java","lineNumber":62},{"declaringClass":"sun.reflect.DelegatingMethodAccessorImpl","methodName":"invoke","fileName":"DelegatingMethodAccessorImpl.java","lineNumber":43},{"declaringClass":"java.lang.reflect.Method","methodName":"invoke","fileName":"Method.java","lineNumber":498},{"declaringClass":"org.springframework.scheduling.support.ScheduledMethodRunnable","methodName":"run","fileName":"ScheduledMethodRunnable.java","lineNumber":84},{"declaringClass":"org.springframework.scheduling.support.DelegatingErrorHandlingRunnable","methodName":"run","fileName":"DelegatingErrorHandlingRunnable.java","lineNumber":54},{"declaringClass":"org.springframework.scheduling.concurrent.ReschedulingRunnable","methodName":"run","fileName":"ReschedulingRunnable.java","lineNumber":95},{"declaringClass":"java.util.concurrent.Executors$RunnableAdapter","methodName":"call","fileName":"Executors.java","lineNumber":511},{"declaringClass":"java.util.concurrent.FutureTask","methodName":"run$$$capture","fileName":"FutureTask.java","lineNumber":266},{"declaringClass":"java.util.concurrent.FutureTask","methodName":"run","fileName":"FutureTask.java","lineNumber":-1},{"declaringClass":"java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask","methodName":"access$201","fileName":"ScheduledThreadPoolExecutor.java","lineNumber":180},{"declaringClass":"java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask","methodName":"run","fileName":"ScheduledThreadPoolExecutor.java","lineNumber":293},{"declaringClass":"java.util.concurrent.ThreadPoolExecutor","methodName":"runWorker","fileName":"ThreadPoolExecutor.java","lineNumber":1149},{"declaringClass":"java.util.concurrent.ThreadPoolExecutor$Worker","methodName":"run","fileName":"ThreadPoolExecutor.java","lineNumber":624},{"declaringClass":"java.lang.Thread","methodName":"run","fileName":"Thread.java","lineNumber":748}]}
+2022-09-20 15:14:24,134 INFO vn.shb.service.ShbEmailHubApplication Starting ShbEmailHubApplication using Java 1.8.0_191 on LINHDK1 with PID 47040 (D:\Projects\shb-email-hub\target\classes started by linhdk1 in D:\Projects\shb-email-hub)
+2022-09-20 15:14:24,134 INFO vn.shb.service.ShbEmailHubApplication No active profile set, falling back to 1 default profile: "default"
+2022-09-20 15:14:24,192 INFO org.springframework.boot.devtools.restart.ChangeableUrls The Class-Path manifest attribute in C:\Users\linhdk1\.m2\repository\com\oracle\database\jdbc\ojdbc8\21.1.0.0\ojdbc8-21.1.0.0.jar referenced one or more files that do not exist: file:/C:/Users/linhdk1/.m2/repository/com/oracle/database/jdbc/ojdbc8/21.1.0.0/oraclepki.jar
+2022-09-20 15:14:24,192 INFO org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
+2022-09-20 15:14:24,769 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate Bootstrapping Spring Data JPA repositories in DEFAULT mode.
+2022-09-20 15:14:24,791 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate Finished Spring Data repository scanning in 11 ms. Found 0 JPA repository interfaces.
+2022-09-20 15:14:25,204 INFO org.hibernate.jpa.internal.util.LogHelper HHH000204: Processing PersistenceUnitInfo [name: default]
+2022-09-20 15:14:25,259 INFO org.hibernate.Version HHH000412: Hibernate ORM core version 5.6.10.Final
+2022-09-20 15:14:25,435 INFO org.hibernate.annotations.common.Version HCANN000001: Hibernate Commons Annotations {5.1.2.Final}
+2022-09-20 15:14:26,841 INFO org.hibernate.dialect.Dialect HHH000400: Using dialect: org.hibernate.dialect.Oracle10gDialect
+2022-09-20 15:14:27,663 INFO org.hibernate.engine.transaction.jta.platform.internal.JtaPlatformInitiator HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
+2022-09-20 15:14:27,675 INFO org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean Initialized JPA EntityManagerFactory for persistence unit 'default'
+2022-09-20 15:14:27,997 INFO org.quartz.impl.StdSchedulerFactory Using default implementation for ThreadExecutor
+2022-09-20 15:14:28,011 INFO org.quartz.core.SchedulerSignalerImpl Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
+2022-09-20 15:14:28,011 INFO org.quartz.core.QuartzScheduler Quartz Scheduler v.2.3.2 created.
+2022-09-20 15:14:28,012 INFO org.quartz.simpl.RAMJobStore RAMJobStore initialized.
+2022-09-20 15:14:28,013 INFO org.quartz.core.QuartzScheduler Scheduler meta-data: Quartz Scheduler (v2.3.2) 'quartzScheduler' with instanceId 'NON_CLUSTERED'
+  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
+  NOT STARTED.
+  Currently in standby mode.
+  Number of jobs executed: 0
+  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
+  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.
+
+2022-09-20 15:14:28,013 INFO org.quartz.impl.StdSchedulerFactory Quartz scheduler 'quartzScheduler' initialized from an externally provided properties instance.
+2022-09-20 15:14:28,013 INFO org.quartz.impl.StdSchedulerFactory Quartz scheduler version: 2.3.2
+2022-09-20 15:14:28,013 INFO org.quartz.core.QuartzScheduler JobFactory set to: org.springframework.scheduling.quartz.SpringBeanJobFactory@16db778
+2022-09-20 15:14:28,061 INFO org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer LiveReload server is running on port 35729
+2022-09-20 15:14:28,077 INFO org.springframework.scheduling.quartz.SchedulerFactoryBean Starting Quartz Scheduler now
+2022-09-20 15:14:28,077 INFO org.quartz.core.QuartzScheduler Scheduler quartzScheduler_$_NON_CLUSTERED started.
+2022-09-20 15:14:28,093 INFO vn.shb.service.ShbEmailHubApplication Started ShbEmailHubApplication in 4.646 seconds (JVM running for 6.453)
+2022-09-20 15:14:30,015 INFO vn.shb.service.jobs.HolidayByCurrencyJob <!-----------Start HolidayByCurrency Job --------------->
+2022-09-20 15:14:54,304 INFO org.quartz.core.QuartzScheduler Scheduler quartzScheduler_$_NON_CLUSTERED paused.
+2022-09-20 15:14:54,306 INFO org.springframework.scheduling.quartz.SchedulerFactoryBean Shutting down Quartz Scheduler
+2022-09-20 15:14:54,306 INFO org.quartz.core.QuartzScheduler Scheduler quartzScheduler_$_NON_CLUSTERED shutting down.
+2022-09-20 15:14:54,307 INFO org.quartz.core.QuartzScheduler Scheduler quartzScheduler_$_NON_CLUSTERED paused.
+2022-09-20 15:14:54,307 INFO org.quartz.core.QuartzScheduler Scheduler quartzScheduler_$_NON_CLUSTERED shutdown complete.
+2022-09-20 15:14:54,310 INFO org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean Closing JPA EntityManagerFactory for persistence unit 'default'
diff --git a/logs/send-email-hub.log b/logs/send-email-hub.log
index e469ac1..e5608ff 100644
--- a/logs/send-email-hub.log
+++ b/logs/send-email-hub.log
@@ -1,380 +1,23 @@
-2022-09-20 09:53:22,802 INFO vn.shb.service.ShbEmailHubApplication Starting ShbEmailHubApplication using Java 1.8.0_191 on LINHDK1 with PID 13656 (D:\Projects\shb-email-hub\target\classes started by linhdk1 in D:\Projects\shb-email-hub)
-2022-09-20 09:53:22,806 INFO vn.shb.service.ShbEmailHubApplication No active profile set, falling back to 1 default profile: "default"
-2022-09-20 09:53:22,862 INFO org.springframework.boot.devtools.restart.ChangeableUrls The Class-Path manifest attribute in C:\Users\linhdk1\.m2\repository\com\oracle\database\jdbc\ojdbc8\21.1.0.0\ojdbc8-21.1.0.0.jar referenced one or more files that do not exist: file:/C:/Users/linhdk1/.m2/repository/com/oracle/database/jdbc/ojdbc8/21.1.0.0/oraclepki.jar
-2022-09-20 09:53:22,862 INFO org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
-2022-09-20 09:53:23,444 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate Bootstrapping Spring Data JPA repositories in DEFAULT mode.
-2022-09-20 09:53:23,465 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate Finished Spring Data repository scanning in 10 ms. Found 0 JPA repository interfaces.
-2022-09-20 09:53:23,906 INFO org.hibernate.jpa.internal.util.LogHelper HHH000204: Processing PersistenceUnitInfo [name: default]
-2022-09-20 09:53:23,965 INFO org.hibernate.Version HHH000412: Hibernate ORM core version 5.6.10.Final
-2022-09-20 09:53:24,155 INFO org.hibernate.annotations.common.Version HCANN000001: Hibernate Commons Annotations {5.1.2.Final}
-2022-09-20 09:53:25,597 INFO org.hibernate.dialect.Dialect HHH000400: Using dialect: org.hibernate.dialect.Oracle10gDialect
-2022-09-20 09:53:26,451 INFO org.hibernate.engine.transaction.jta.platform.internal.JtaPlatformInitiator HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
-2022-09-20 09:53:26,464 INFO org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean Initialized JPA EntityManagerFactory for persistence unit 'default'
-2022-09-20 09:53:26,798 INFO org.quartz.impl.StdSchedulerFactory Using default implementation for ThreadExecutor
-2022-09-20 09:53:26,816 INFO org.quartz.core.SchedulerSignalerImpl Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
-2022-09-20 09:53:26,816 INFO org.quartz.core.QuartzScheduler Quartz Scheduler v.2.3.2 created.
-2022-09-20 09:53:26,817 INFO org.quartz.simpl.RAMJobStore RAMJobStore initialized.
-2022-09-20 09:53:26,818 INFO org.quartz.core.QuartzScheduler Scheduler meta-data: Quartz Scheduler (v2.3.2) 'quartzScheduler' with instanceId 'NON_CLUSTERED'
-  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
-  NOT STARTED.
-  Currently in standby mode.
-  Number of jobs executed: 0
-  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
-  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.
-
-2022-09-20 09:53:26,818 INFO org.quartz.impl.StdSchedulerFactory Quartz scheduler 'quartzScheduler' initialized from an externally provided properties instance.
-2022-09-20 09:53:26,818 INFO org.quartz.impl.StdSchedulerFactory Quartz scheduler version: 2.3.2
-2022-09-20 09:53:26,818 INFO org.quartz.core.QuartzScheduler JobFactory set to: org.springframework.scheduling.quartz.SpringBeanJobFactory@37fdcdee
-2022-09-20 09:53:26,862 INFO org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer LiveReload server is running on port 35729
-2022-09-20 09:53:26,878 INFO org.springframework.scheduling.quartz.SchedulerFactoryBean Starting Quartz Scheduler now
-2022-09-20 09:53:26,878 INFO org.quartz.core.QuartzScheduler Scheduler quartzScheduler_$_NON_CLUSTERED started.
-2022-09-20 09:53:26,896 INFO vn.shb.service.ShbEmailHubApplication Started ShbEmailHubApplication in 4.807 seconds (JVM running for 6.798)
-2022-09-20 09:53:30,013 INFO vn.shb.service.jobs.HTLSCNAllBranchJob <!-----------Start HTLSCN All Branch Job --------------->
-2022-09-20 09:53:30,151 INFO vn.shb.service.services.HtlsSumaryRepoImp getHtlsSumariesCNAllBranchByValDt >>>>>>>>>>>> : {"ID":1,"ERROR_CODE":"99"}
-2022-09-20 09:53:30,151 INFO vn.shb.service.jobs.HTLSCNBranchJob <!-----------Start HTLSCN Branch Job --------------->
-2022-09-20 09:53:30,164 INFO vn.shb.service.jobs.HTLSDNJob <!-----------Start HTLSDN Job --------------->
-2022-09-20 09:53:30,172 INFO vn.shb.service.services.HTLSDNJobService <!----------- HTLSDN Job List htlsSumaryEOD : 0--------------->
-2022-09-20 09:53:35,003 INFO vn.shb.service.jobs.HTLSDNJob <!-----------Start HTLSDN Job --------------->
-2022-09-20 09:53:35,012 INFO vn.shb.service.services.HTLSDNJobService <!----------- HTLSDN Job List htlsSumaryEOD : 0--------------->
-2022-09-20 09:53:35,012 INFO vn.shb.service.jobs.HTLSCNAllBranchJob <!-----------Start HTLSCN All Branch Job --------------->
-2022-09-20 09:53:35,018 INFO vn.shb.service.services.HtlsSumaryRepoImp getHtlsSumariesCNAllBranchByValDt >>>>>>>>>>>> : {"ID":1,"ERROR_CODE":"99"}
-2022-09-20 09:53:35,019 INFO vn.shb.service.jobs.HTLSCNBranchJob <!-----------Start HTLSCN Branch Job --------------->
-2022-09-20 09:53:40,002 INFO vn.shb.service.jobs.HTLSCNAllBranchJob <!-----------Start HTLSCN All Branch Job --------------->
-2022-09-20 09:53:40,012 INFO vn.shb.service.services.HtlsSumaryRepoImp getHtlsSumariesCNAllBranchByValDt >>>>>>>>>>>> : {"ID":1,"ERROR_CODE":"99"}
-2022-09-20 09:53:40,012 INFO vn.shb.service.jobs.HTLSCNBranchJob <!-----------Start HTLSCN Branch Job --------------->
-2022-09-20 09:53:40,018 INFO vn.shb.service.jobs.HTLSDNJob <!-----------Start HTLSDN Job --------------->
-2022-09-20 09:53:40,022 INFO vn.shb.service.services.HTLSDNJobService <!----------- HTLSDN Job List htlsSumaryEOD : 0--------------->
-2022-09-20 09:53:45,004 INFO vn.shb.service.jobs.HTLSCNAllBranchJob <!-----------Start HTLSCN All Branch Job --------------->
-2022-09-20 09:53:45,011 INFO vn.shb.service.services.HtlsSumaryRepoImp getHtlsSumariesCNAllBranchByValDt >>>>>>>>>>>> : {"ID":1,"ERROR_CODE":"99"}
-2022-09-20 09:53:45,012 INFO vn.shb.service.jobs.HTLSDNJob <!-----------Start HTLSDN Job --------------->
-2022-09-20 09:53:45,016 INFO vn.shb.service.services.HTLSDNJobService <!----------- HTLSDN Job List htlsSumaryEOD : 0--------------->
-2022-09-20 09:53:45,017 INFO vn.shb.service.jobs.HTLSCNBranchJob <!-----------Start HTLSCN Branch Job --------------->
-2022-09-20 09:53:50,015 INFO vn.shb.service.jobs.HTLSCNBranchJob <!-----------Start HTLSCN Branch Job --------------->
-2022-09-20 09:53:50,021 INFO vn.shb.service.jobs.HTLSDNJob <!-----------Start HTLSDN Job --------------->
-2022-09-20 09:53:50,027 INFO vn.shb.service.services.HTLSDNJobService <!----------- HTLSDN Job List htlsSumaryEOD : 0--------------->
-2022-09-20 09:53:50,027 INFO vn.shb.service.jobs.HTLSCNAllBranchJob <!-----------Start HTLSCN All Branch Job --------------->
-2022-09-20 09:53:50,033 INFO vn.shb.service.services.HtlsSumaryRepoImp getHtlsSumariesCNAllBranchByValDt >>>>>>>>>>>> : {"ID":1,"ERROR_CODE":"99"}
-2022-09-20 09:53:55,011 INFO vn.shb.service.jobs.HTLSCNBranchJob <!-----------Start HTLSCN Branch Job --------------->
-2022-09-20 09:53:55,023 INFO vn.shb.service.jobs.HTLSDNJob <!-----------Start HTLSDN Job --------------->
-2022-09-20 09:53:55,035 INFO vn.shb.service.services.HTLSDNJobService <!----------- HTLSDN Job List htlsSumaryEOD : 0--------------->
-2022-09-20 09:53:55,036 INFO vn.shb.service.jobs.HTLSCNAllBranchJob <!-----------Start HTLSCN All Branch Job --------------->
-2022-09-20 09:53:55,045 INFO vn.shb.service.services.HtlsSumaryRepoImp getHtlsSumariesCNAllBranchByValDt >>>>>>>>>>>> : {"ID":1,"ERROR_CODE":"99"}
-2022-09-20 09:53:57,447 INFO org.quartz.core.QuartzScheduler Scheduler quartzScheduler_$_NON_CLUSTERED paused.
-2022-09-20 09:53:57,448 INFO org.springframework.scheduling.quartz.SchedulerFactoryBean Shutting down Quartz Scheduler
-2022-09-20 09:53:57,448 INFO org.quartz.core.QuartzScheduler Scheduler quartzScheduler_$_NON_CLUSTERED shutting down.
-2022-09-20 09:53:57,449 INFO org.quartz.core.QuartzScheduler Scheduler quartzScheduler_$_NON_CLUSTERED paused.
-2022-09-20 09:53:57,449 INFO org.quartz.core.QuartzScheduler Scheduler quartzScheduler_$_NON_CLUSTERED shutdown complete.
-2022-09-20 09:53:57,451 INFO org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean Closing JPA EntityManagerFactory for persistence unit 'default'
-2022-09-20 09:56:43,158 INFO vn.shb.service.ShbEmailHubApplication Starting ShbEmailHubApplication using Java 1.8.0_191 on LINHDK1 with PID 43000 (D:\Projects\shb-email-hub\target\classes started by linhdk1 in D:\Projects\shb-email-hub)
-2022-09-20 09:56:43,159 INFO vn.shb.service.ShbEmailHubApplication No active profile set, falling back to 1 default profile: "default"
-2022-09-20 09:56:43,219 INFO org.springframework.boot.devtools.restart.ChangeableUrls The Class-Path manifest attribute in C:\Users\linhdk1\.m2\repository\com\oracle\database\jdbc\ojdbc8\21.1.0.0\ojdbc8-21.1.0.0.jar referenced one or more files that do not exist: file:/C:/Users/linhdk1/.m2/repository/com/oracle/database/jdbc/ojdbc8/21.1.0.0/oraclepki.jar
-2022-09-20 09:56:43,220 INFO org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
-2022-09-20 09:56:43,762 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate Bootstrapping Spring Data JPA repositories in DEFAULT mode.
-2022-09-20 09:56:43,783 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate Finished Spring Data repository scanning in 10 ms. Found 0 JPA repository interfaces.
-2022-09-20 09:56:44,202 INFO org.hibernate.jpa.internal.util.LogHelper HHH000204: Processing PersistenceUnitInfo [name: default]
-2022-09-20 09:56:44,257 INFO org.hibernate.Version HHH000412: Hibernate ORM core version 5.6.10.Final
-2022-09-20 09:56:44,460 INFO org.hibernate.annotations.common.Version HCANN000001: Hibernate Commons Annotations {5.1.2.Final}
-2022-09-20 09:56:45,849 INFO org.hibernate.dialect.Dialect HHH000400: Using dialect: org.hibernate.dialect.Oracle10gDialect
-2022-09-20 09:56:46,630 INFO org.hibernate.engine.transaction.jta.platform.internal.JtaPlatformInitiator HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
-2022-09-20 09:56:46,641 INFO org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean Initialized JPA EntityManagerFactory for persistence unit 'default'
-2022-09-20 09:56:46,970 INFO org.quartz.impl.StdSchedulerFactory Using default implementation for ThreadExecutor
-2022-09-20 09:56:46,983 INFO org.quartz.core.SchedulerSignalerImpl Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
-2022-09-20 09:56:46,984 INFO org.quartz.core.QuartzScheduler Quartz Scheduler v.2.3.2 created.
-2022-09-20 09:56:46,984 INFO org.quartz.simpl.RAMJobStore RAMJobStore initialized.
-2022-09-20 09:56:46,985 INFO org.quartz.core.QuartzScheduler Scheduler meta-data: Quartz Scheduler (v2.3.2) 'quartzScheduler' with instanceId 'NON_CLUSTERED'
-  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
-  NOT STARTED.
-  Currently in standby mode.
-  Number of jobs executed: 0
-  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
-  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.
-
-2022-09-20 09:56:46,985 INFO org.quartz.impl.StdSchedulerFactory Quartz scheduler 'quartzScheduler' initialized from an externally provided properties instance.
-2022-09-20 09:56:46,985 INFO org.quartz.impl.StdSchedulerFactory Quartz scheduler version: 2.3.2
-2022-09-20 09:56:46,986 INFO org.quartz.core.QuartzScheduler JobFactory set to: org.springframework.scheduling.quartz.SpringBeanJobFactory@79325c59
-2022-09-20 09:56:47,040 INFO org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer LiveReload server is running on port 35729
-2022-09-20 09:56:47,059 INFO org.springframework.scheduling.quartz.SchedulerFactoryBean Starting Quartz Scheduler now
-2022-09-20 09:56:47,060 INFO org.quartz.core.QuartzScheduler Scheduler quartzScheduler_$_NON_CLUSTERED started.
-2022-09-20 09:56:47,080 INFO vn.shb.service.ShbEmailHubApplication Started ShbEmailHubApplication in 4.595 seconds (JVM running for 6.366)
-2022-09-20 09:56:50,007 INFO vn.shb.service.jobs.HTLSCNBranchJob <!-----------Start HTLSCN Branch Job --------------->
-2022-09-20 09:56:50,119 INFO vn.shb.service.jobs.HTLSDNJob <!-----------Start HTLSDN Job --------------->
-2022-09-20 09:56:50,132 INFO vn.shb.service.services.HTLSDNJobService <!----------- HTLSDN Job List htlsSumaryEOD : 0--------------->
-2022-09-20 09:56:50,133 INFO vn.shb.service.jobs.HTLSCNAllBranchJob <!-----------Start HTLSCN All Branch Job --------------->
-2022-09-20 09:56:50,165 INFO vn.shb.service.services.HtlsSumaryRepoImp getHtlsSumariesCNAllBranchByValDt >>>>>>>>>>>> : {"ID":1,"ERROR_CODE":"99","ERROR_MSG":"No data found"}
-2022-09-20 09:56:55,014 INFO vn.shb.service.jobs.HTLSDNJob <!-----------Start HTLSDN Job --------------->
-2022-09-20 09:56:55,023 INFO vn.shb.service.services.HTLSDNJobService <!----------- HTLSDN Job List htlsSumaryEOD : 0--------------->
-2022-09-20 09:56:55,023 INFO vn.shb.service.jobs.HTLSCNBranchJob <!-----------Start HTLSCN Branch Job --------------->
-2022-09-20 09:56:55,028 INFO vn.shb.service.jobs.HTLSCNAllBranchJob <!-----------Start HTLSCN All Branch Job --------------->
-2022-09-20 09:56:55,034 INFO vn.shb.service.services.HtlsSumaryRepoImp getHtlsSumariesCNAllBranchByValDt >>>>>>>>>>>> : {"ID":1,"ERROR_CODE":"99","ERROR_MSG":"No data found"}
-2022-09-20 09:57:00,002 INFO vn.shb.service.jobs.HTLSCNAllBranchJob <!-----------Start HTLSCN All Branch Job --------------->
-2022-09-20 09:57:00,009 INFO vn.shb.service.services.HtlsSumaryRepoImp getHtlsSumariesCNAllBranchByValDt >>>>>>>>>>>> : {"ID":1,"ERROR_CODE":"99","ERROR_MSG":"No data found"}
-2022-09-20 09:57:00,009 INFO vn.shb.service.jobs.HTLSDNJob <!-----------Start HTLSDN Job --------------->
-2022-09-20 09:57:00,015 INFO vn.shb.service.services.HTLSDNJobService <!----------- HTLSDN Job List htlsSumaryEOD : 0--------------->
-2022-09-20 09:57:00,015 INFO vn.shb.service.jobs.HTLSCNBranchJob <!-----------Start HTLSCN Branch Job --------------->
-2022-09-20 09:57:05,008 INFO vn.shb.service.jobs.HTLSDNJob <!-----------Start HTLSDN Job --------------->
-2022-09-20 09:57:05,020 INFO vn.shb.service.services.HTLSDNJobService <!----------- HTLSDN Job List htlsSumaryEOD : 0--------------->
-2022-09-20 09:57:05,021 INFO vn.shb.service.jobs.HTLSCNBranchJob <!-----------Start HTLSCN Branch Job --------------->
-2022-09-20 09:57:05,029 INFO vn.shb.service.jobs.HTLSCNAllBranchJob <!-----------Start HTLSCN All Branch Job --------------->
-2022-09-20 09:57:05,043 INFO vn.shb.service.services.HtlsSumaryRepoImp getHtlsSumariesCNAllBranchByValDt >>>>>>>>>>>> : {"ID":1,"ERROR_CODE":"99","ERROR_MSG":"No data found"}
-2022-09-20 09:57:10,000 INFO vn.shb.service.jobs.HTLSDNJob <!-----------Start HTLSDN Job --------------->
-2022-09-20 09:57:10,011 INFO vn.shb.service.services.HTLSDNJobService <!----------- HTLSDN Job List htlsSumaryEOD : 0--------------->
-2022-09-20 09:57:10,012 INFO vn.shb.service.jobs.HTLSCNAllBranchJob <!-----------Start HTLSCN All Branch Job --------------->
-2022-09-20 09:57:10,020 INFO vn.shb.service.services.HtlsSumaryRepoImp getHtlsSumariesCNAllBranchByValDt >>>>>>>>>>>> : {"ID":1,"ERROR_CODE":"99","ERROR_MSG":"No data found"}
-2022-09-20 09:57:10,021 INFO vn.shb.service.jobs.HTLSCNBranchJob <!-----------Start HTLSCN Branch Job --------------->
-2022-09-20 09:57:14,293 INFO org.quartz.core.QuartzScheduler Scheduler quartzScheduler_$_NON_CLUSTERED paused.
-2022-09-20 09:57:14,295 INFO org.springframework.scheduling.quartz.SchedulerFactoryBean Shutting down Quartz Scheduler
-2022-09-20 09:57:14,295 INFO org.quartz.core.QuartzScheduler Scheduler quartzScheduler_$_NON_CLUSTERED shutting down.
-2022-09-20 09:57:14,295 INFO org.quartz.core.QuartzScheduler Scheduler quartzScheduler_$_NON_CLUSTERED paused.
-2022-09-20 09:57:14,295 INFO org.quartz.core.QuartzScheduler Scheduler quartzScheduler_$_NON_CLUSTERED shutdown complete.
-2022-09-20 09:57:14,297 INFO org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean Closing JPA EntityManagerFactory for persistence unit 'default'
-2022-09-20 10:01:27,432 INFO vn.shb.service.ShbEmailHubApplication Starting ShbEmailHubApplication using Java 1.8.0_191 on LINHDK1 with PID 38732 (D:\Projects\shb-email-hub\target\classes started by linhdk1 in D:\Projects\shb-email-hub)
-2022-09-20 10:01:27,433 INFO vn.shb.service.ShbEmailHubApplication No active profile set, falling back to 1 default profile: "default"
-2022-09-20 10:01:27,485 INFO org.springframework.boot.devtools.restart.ChangeableUrls The Class-Path manifest attribute in C:\Users\linhdk1\.m2\repository\com\oracle\database\jdbc\ojdbc8\21.1.0.0\ojdbc8-21.1.0.0.jar referenced one or more files that do not exist: file:/C:/Users/linhdk1/.m2/repository/com/oracle/database/jdbc/ojdbc8/21.1.0.0/oraclepki.jar
-2022-09-20 10:01:27,486 INFO org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
-2022-09-20 10:01:28,007 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate Bootstrapping Spring Data JPA repositories in DEFAULT mode.
-2022-09-20 10:01:28,027 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate Finished Spring Data repository scanning in 10 ms. Found 0 JPA repository interfaces.
-2022-09-20 10:01:28,431 INFO org.hibernate.jpa.internal.util.LogHelper HHH000204: Processing PersistenceUnitInfo [name: default]
-2022-09-20 10:01:28,484 INFO org.hibernate.Version HHH000412: Hibernate ORM core version 5.6.10.Final
-2022-09-20 10:01:28,645 INFO org.hibernate.annotations.common.Version HCANN000001: Hibernate Commons Annotations {5.1.2.Final}
-2022-09-20 10:01:30,027 INFO org.hibernate.dialect.Dialect HHH000400: Using dialect: org.hibernate.dialect.Oracle10gDialect
-2022-09-20 10:01:30,827 INFO org.hibernate.engine.transaction.jta.platform.internal.JtaPlatformInitiator HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
-2022-09-20 10:01:30,839 INFO org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean Initialized JPA EntityManagerFactory for persistence unit 'default'
-2022-09-20 10:01:31,139 INFO org.quartz.impl.StdSchedulerFactory Using default implementation for ThreadExecutor
-2022-09-20 10:01:31,152 INFO org.quartz.core.SchedulerSignalerImpl Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
-2022-09-20 10:01:31,152 INFO org.quartz.core.QuartzScheduler Quartz Scheduler v.2.3.2 created.
-2022-09-20 10:01:31,153 INFO org.quartz.simpl.RAMJobStore RAMJobStore initialized.
-2022-09-20 10:01:31,154 INFO org.quartz.core.QuartzScheduler Scheduler meta-data: Quartz Scheduler (v2.3.2) 'quartzScheduler' with instanceId 'NON_CLUSTERED'
-  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
-  NOT STARTED.
-  Currently in standby mode.
-  Number of jobs executed: 0
-  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
-  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.
-
-2022-09-20 10:01:31,154 INFO org.quartz.impl.StdSchedulerFactory Quartz scheduler 'quartzScheduler' initialized from an externally provided properties instance.
-2022-09-20 10:01:31,154 INFO org.quartz.impl.StdSchedulerFactory Quartz scheduler version: 2.3.2
-2022-09-20 10:01:31,154 INFO org.quartz.core.QuartzScheduler JobFactory set to: org.springframework.scheduling.quartz.SpringBeanJobFactory@1f963b18
-2022-09-20 10:01:31,197 INFO org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer LiveReload server is running on port 35729
-2022-09-20 10:01:31,214 INFO org.springframework.scheduling.quartz.SchedulerFactoryBean Starting Quartz Scheduler now
-2022-09-20 10:01:31,214 INFO org.quartz.core.QuartzScheduler Scheduler quartzScheduler_$_NON_CLUSTERED started.
-2022-09-20 10:01:31,231 INFO vn.shb.service.ShbEmailHubApplication Started ShbEmailHubApplication in 4.467 seconds (JVM running for 6.145)
-2022-09-20 10:01:35,012 INFO vn.shb.service.jobs.HTLSCNAllBranchJob <!-----------Start HTLSCN All Branch Job --------------->
-2022-09-20 10:01:35,117 INFO vn.shb.service.services.HtlsSumaryRepoImp getHtlsSumariesCNAllBranchByValDt/GET_DATA_KHCN_ALL_BRANCH >>>>>>>>>>>> : {"ID":1,"ERROR_CODE":"99","ERROR_MSG":"No data found"}
-2022-09-20 10:01:35,117 INFO vn.shb.service.jobs.HTLSCNBranchJob <!-----------Start HTLSCN Branch Job --------------->
-2022-09-20 10:01:35,129 INFO vn.shb.service.jobs.HTLSDNJob <!-----------Start HTLSDN Job --------------->
-2022-09-20 10:01:35,135 INFO vn.shb.service.services.HTLSDNJobService <!----------- HTLSDN Job List htlsSumaryEOD : 0--------------->
-2022-09-20 10:01:40,014 INFO vn.shb.service.jobs.HTLSDNJob <!-----------Start HTLSDN Job --------------->
-2022-09-20 10:01:40,021 INFO vn.shb.service.services.HTLSDNJobService <!----------- HTLSDN Job List htlsSumaryEOD : 0--------------->
-2022-09-20 10:01:40,022 INFO vn.shb.service.jobs.HTLSCNAllBranchJob <!-----------Start HTLSCN All Branch Job --------------->
-2022-09-20 10:01:40,031 INFO vn.shb.service.services.HtlsSumaryRepoImp getHtlsSumariesCNAllBranchByValDt/GET_DATA_KHCN_ALL_BRANCH >>>>>>>>>>>> : {"ID":1,"ERROR_CODE":"99","ERROR_MSG":"No data found"}
-2022-09-20 10:01:40,031 INFO vn.shb.service.jobs.HTLSCNBranchJob <!-----------Start HTLSCN Branch Job --------------->
-2022-09-20 10:01:45,011 INFO vn.shb.service.jobs.HTLSCNAllBranchJob <!-----------Start HTLSCN All Branch Job --------------->
-2022-09-20 10:01:45,022 INFO vn.shb.service.services.HtlsSumaryRepoImp getHtlsSumariesCNAllBranchByValDt/GET_DATA_KHCN_ALL_BRANCH >>>>>>>>>>>> : {"ID":1,"ERROR_CODE":"99","ERROR_MSG":"No data found"}
-2022-09-20 10:01:45,023 INFO vn.shb.service.jobs.HTLSCNBranchJob <!-----------Start HTLSCN Branch Job --------------->
-2022-09-20 10:01:45,032 INFO vn.shb.service.jobs.HTLSDNJob <!-----------Start HTLSDN Job --------------->
-2022-09-20 10:01:45,039 INFO vn.shb.service.services.HTLSDNJobService <!----------- HTLSDN Job List htlsSumaryEOD : 0--------------->
-2022-09-20 10:01:50,003 INFO vn.shb.service.jobs.HTLSCNAllBranchJob <!-----------Start HTLSCN All Branch Job --------------->
-2022-09-20 10:01:50,017 INFO vn.shb.service.services.HtlsSumaryRepoImp getHtlsSumariesCNAllBranchByValDt/GET_DATA_KHCN_ALL_BRANCH >>>>>>>>>>>> : {"ID":1,"ERROR_CODE":"99","ERROR_MSG":"No data found"}
-2022-09-20 10:01:50,018 INFO vn.shb.service.jobs.HTLSDNJob <!-----------Start HTLSDN Job --------------->
-2022-09-20 10:01:50,028 INFO vn.shb.service.services.HTLSDNJobService <!----------- HTLSDN Job List htlsSumaryEOD : 0--------------->
-2022-09-20 10:01:50,028 INFO vn.shb.service.jobs.HTLSCNBranchJob <!-----------Start HTLSCN Branch Job --------------->
-2022-09-20 10:01:55,000 INFO vn.shb.service.jobs.HTLSCNBranchJob <!-----------Start HTLSCN Branch Job --------------->
-2022-09-20 10:01:55,009 INFO vn.shb.service.jobs.HTLSCNAllBranchJob <!-----------Start HTLSCN All Branch Job --------------->
-2022-09-20 10:01:55,015 INFO vn.shb.service.services.HtlsSumaryRepoImp getHtlsSumariesCNAllBranchByValDt/GET_DATA_KHCN_ALL_BRANCH >>>>>>>>>>>> : {"ID":1,"ERROR_CODE":"99","ERROR_MSG":"No data found"}
-2022-09-20 10:01:55,016 INFO vn.shb.service.jobs.HTLSDNJob <!-----------Start HTLSDN Job --------------->
-2022-09-20 10:01:55,021 INFO vn.shb.service.services.HTLSDNJobService <!----------- HTLSDN Job List htlsSumaryEOD : 0--------------->
-2022-09-20 10:02:00,007 INFO vn.shb.service.jobs.HTLSCNAllBranchJob <!-----------Start HTLSCN All Branch Job --------------->
-2022-09-20 10:02:00,019 INFO vn.shb.service.services.HtlsSumaryRepoImp getHtlsSumariesCNAllBranchByValDt/GET_DATA_KHCN_ALL_BRANCH >>>>>>>>>>>> : {"ID":1,"ERROR_CODE":"99","ERROR_MSG":"No data found"}
-2022-09-20 10:02:00,020 INFO vn.shb.service.jobs.HTLSDNJob <!-----------Start HTLSDN Job --------------->
-2022-09-20 10:02:00,026 INFO vn.shb.service.services.HTLSDNJobService <!----------- HTLSDN Job List htlsSumaryEOD : 0--------------->
-2022-09-20 10:02:00,026 INFO vn.shb.service.jobs.HTLSCNBranchJob <!-----------Start HTLSCN Branch Job --------------->
-2022-09-20 10:02:05,013 INFO vn.shb.service.jobs.HTLSCNBranchJob <!-----------Start HTLSCN Branch Job --------------->
-2022-09-20 10:02:05,021 INFO vn.shb.service.jobs.HTLSCNAllBranchJob <!-----------Start HTLSCN All Branch Job --------------->
-2022-09-20 10:02:05,027 INFO vn.shb.service.services.HtlsSumaryRepoImp getHtlsSumariesCNAllBranchByValDt/GET_DATA_KHCN_ALL_BRANCH >>>>>>>>>>>> : {"ID":1,"ERROR_CODE":"99","ERROR_MSG":"No data found"}
-2022-09-20 10:02:05,027 INFO vn.shb.service.jobs.HTLSDNJob <!-----------Start HTLSDN Job --------------->
-2022-09-20 10:02:05,032 INFO vn.shb.service.services.HTLSDNJobService <!----------- HTLSDN Job List htlsSumaryEOD : 0--------------->
-2022-09-20 10:02:10,000 INFO vn.shb.service.jobs.HTLSDNJob <!-----------Start HTLSDN Job --------------->
-2022-09-20 10:02:10,011 INFO vn.shb.service.services.HTLSDNJobService <!----------- HTLSDN Job List htlsSumaryEOD : 0--------------->
-2022-09-20 10:02:10,011 INFO vn.shb.service.jobs.HTLSCNBranchJob <!-----------Start HTLSCN Branch Job --------------->
-2022-09-20 10:02:10,025 INFO vn.shb.service.jobs.HTLSCNAllBranchJob <!-----------Start HTLSCN All Branch Job --------------->
-2022-09-20 10:02:10,037 INFO vn.shb.service.services.HtlsSumaryRepoImp getHtlsSumariesCNAllBranchByValDt/GET_DATA_KHCN_ALL_BRANCH >>>>>>>>>>>> : {"ID":1,"ERROR_CODE":"99","ERROR_MSG":"No data found"}
-2022-09-20 10:02:11,424 INFO org.quartz.core.QuartzScheduler Scheduler quartzScheduler_$_NON_CLUSTERED paused.
-2022-09-20 10:02:11,426 INFO org.springframework.scheduling.quartz.SchedulerFactoryBean Shutting down Quartz Scheduler
-2022-09-20 10:02:11,426 INFO org.quartz.core.QuartzScheduler Scheduler quartzScheduler_$_NON_CLUSTERED shutting down.
-2022-09-20 10:02:11,426 INFO org.quartz.core.QuartzScheduler Scheduler quartzScheduler_$_NON_CLUSTERED paused.
-2022-09-20 10:02:11,427 INFO org.quartz.core.QuartzScheduler Scheduler quartzScheduler_$_NON_CLUSTERED shutdown complete.
-2022-09-20 10:02:11,429 INFO org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean Closing JPA EntityManagerFactory for persistence unit 'default'
-2022-09-20 10:03:15,731 INFO vn.shb.service.ShbEmailHubApplication Starting ShbEmailHubApplication using Java 1.8.0_191 on LINHDK1 with PID 22368 (D:\Projects\shb-email-hub\target\classes started by linhdk1 in D:\Projects\shb-email-hub)
-2022-09-20 10:03:15,731 INFO vn.shb.service.ShbEmailHubApplication No active profile set, falling back to 1 default profile: "default"
-2022-09-20 10:03:15,782 INFO org.springframework.boot.devtools.restart.ChangeableUrls The Class-Path manifest attribute in C:\Users\linhdk1\.m2\repository\com\oracle\database\jdbc\ojdbc8\21.1.0.0\ojdbc8-21.1.0.0.jar referenced one or more files that do not exist: file:/C:/Users/linhdk1/.m2/repository/com/oracle/database/jdbc/ojdbc8/21.1.0.0/oraclepki.jar
-2022-09-20 10:03:15,782 INFO org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
-2022-09-20 10:03:16,304 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate Bootstrapping Spring Data JPA repositories in DEFAULT mode.
-2022-09-20 10:03:16,324 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate Finished Spring Data repository scanning in 10 ms. Found 0 JPA repository interfaces.
-2022-09-20 10:03:16,743 INFO org.hibernate.jpa.internal.util.LogHelper HHH000204: Processing PersistenceUnitInfo [name: default]
-2022-09-20 10:03:16,799 INFO org.hibernate.Version HHH000412: Hibernate ORM core version 5.6.10.Final
-2022-09-20 10:03:16,960 INFO org.hibernate.annotations.common.Version HCANN000001: Hibernate Commons Annotations {5.1.2.Final}
-2022-09-20 10:03:18,299 INFO org.hibernate.dialect.Dialect HHH000400: Using dialect: org.hibernate.dialect.Oracle10gDialect
-2022-09-20 10:03:19,064 INFO org.hibernate.engine.transaction.jta.platform.internal.JtaPlatformInitiator HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
-2022-09-20 10:03:19,075 INFO org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean Initialized JPA EntityManagerFactory for persistence unit 'default'
-2022-09-20 10:03:19,378 INFO org.quartz.impl.StdSchedulerFactory Using default implementation for ThreadExecutor
-2022-09-20 10:03:19,389 INFO org.quartz.core.SchedulerSignalerImpl Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
-2022-09-20 10:03:19,389 INFO org.quartz.core.QuartzScheduler Quartz Scheduler v.2.3.2 created.
-2022-09-20 10:03:19,390 INFO org.quartz.simpl.RAMJobStore RAMJobStore initialized.
-2022-09-20 10:03:19,391 INFO org.quartz.core.QuartzScheduler Scheduler meta-data: Quartz Scheduler (v2.3.2) 'quartzScheduler' with instanceId 'NON_CLUSTERED'
-  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
-  NOT STARTED.
-  Currently in standby mode.
-  Number of jobs executed: 0
-  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
-  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.
-
-2022-09-20 10:03:19,392 INFO org.quartz.impl.StdSchedulerFactory Quartz scheduler 'quartzScheduler' initialized from an externally provided properties instance.
-2022-09-20 10:03:19,392 INFO org.quartz.impl.StdSchedulerFactory Quartz scheduler version: 2.3.2
-2022-09-20 10:03:19,392 INFO org.quartz.core.QuartzScheduler JobFactory set to: org.springframework.scheduling.quartz.SpringBeanJobFactory@79325c59
-2022-09-20 10:03:19,440 INFO org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer LiveReload server is running on port 35729
-2022-09-20 10:03:19,455 INFO org.springframework.scheduling.quartz.SchedulerFactoryBean Starting Quartz Scheduler now
-2022-09-20 10:03:19,455 INFO org.quartz.core.QuartzScheduler Scheduler quartzScheduler_$_NON_CLUSTERED started.
-2022-09-20 10:03:19,472 INFO vn.shb.service.ShbEmailHubApplication Started ShbEmailHubApplication in 4.41 seconds (JVM running for 6.144)
-2022-09-20 10:03:20,005 INFO vn.shb.service.jobs.HTLSCNAllBranchJob <!-----------Start HTLSCN All Branch Job --------------->
-2022-09-20 10:03:20,121 INFO vn.shb.service.services.HtlsSumaryRepoImp getHtlsSumariesCNAllBranchByValDt/GET_DATA_KHCN_ALL_BRANCH >>>>>>>>>>>> : {"ID":1,"ERROR_CODE":"99","ERROR_MSG":"No data found"}
-2022-09-20 10:03:20,121 INFO vn.shb.service.jobs.HTLSCNBranchJob <!-----------Start HTLSCN Branch Job --------------->
-2022-09-20 10:03:20,128 INFO vn.shb.service.jobs.HTLSDNJob <!-----------Start HTLSDN Job --------------->
-2022-09-20 10:03:25,001 INFO vn.shb.service.jobs.HTLSCNAllBranchJob <!-----------Start HTLSCN All Branch Job --------------->
-2022-09-20 10:03:25,009 INFO vn.shb.service.services.HtlsSumaryRepoImp getHtlsSumariesCNAllBranchByValDt/GET_DATA_KHCN_ALL_BRANCH >>>>>>>>>>>> : {"ID":1,"ERROR_CODE":"99","ERROR_MSG":"No data found"}
-2022-09-20 10:03:25,010 INFO vn.shb.service.jobs.HTLSCNBranchJob <!-----------Start HTLSCN Branch Job --------------->
-2022-09-20 10:03:25,015 INFO vn.shb.service.jobs.HTLSDNJob <!-----------Start HTLSDN Job --------------->
-2022-09-20 10:03:30,014 INFO vn.shb.service.jobs.HTLSCNAllBranchJob <!-----------Start HTLSCN All Branch Job --------------->
-2022-09-20 10:03:30,024 INFO vn.shb.service.services.HtlsSumaryRepoImp getHtlsSumariesCNAllBranchByValDt/GET_DATA_KHCN_ALL_BRANCH >>>>>>>>>>>> : {"ID":1,"ERROR_CODE":"99","ERROR_MSG":"No data found"}
-2022-09-20 10:03:30,025 INFO vn.shb.service.jobs.HTLSCNBranchJob <!-----------Start HTLSCN Branch Job --------------->
-2022-09-20 10:03:30,031 INFO vn.shb.service.jobs.HTLSDNJob <!-----------Start HTLSDN Job --------------->
-2022-09-20 10:03:35,006 INFO vn.shb.service.jobs.HTLSDNJob <!-----------Start HTLSDN Job --------------->
-2022-09-20 10:03:35,016 INFO vn.shb.service.jobs.HTLSCNBranchJob <!-----------Start HTLSCN Branch Job --------------->
-2022-09-20 10:03:35,042 INFO vn.shb.service.jobs.HTLSCNAllBranchJob <!-----------Start HTLSCN All Branch Job --------------->
-2022-09-20 10:03:35,052 INFO vn.shb.service.services.HtlsSumaryRepoImp getHtlsSumariesCNAllBranchByValDt/GET_DATA_KHCN_ALL_BRANCH >>>>>>>>>>>> : {"ID":1,"ERROR_CODE":"99","ERROR_MSG":"No data found"}
-2022-09-20 10:03:40,011 INFO vn.shb.service.jobs.HTLSCNBranchJob <!-----------Start HTLSCN Branch Job --------------->
-2022-09-20 10:03:40,022 INFO vn.shb.service.jobs.HTLSCNAllBranchJob <!-----------Start HTLSCN All Branch Job --------------->
-2022-09-20 10:03:40,030 INFO vn.shb.service.services.HtlsSumaryRepoImp getHtlsSumariesCNAllBranchByValDt/GET_DATA_KHCN_ALL_BRANCH >>>>>>>>>>>> : {"ID":1,"ERROR_CODE":"99","ERROR_MSG":"No data found"}
-2022-09-20 10:03:40,030 INFO vn.shb.service.jobs.HTLSDNJob <!-----------Start HTLSDN Job --------------->
-2022-09-20 10:03:45,006 INFO vn.shb.service.jobs.HTLSDNJob <!-----------Start HTLSDN Job --------------->
-2022-09-20 10:03:45,017 INFO vn.shb.service.jobs.HTLSCNAllBranchJob <!-----------Start HTLSCN All Branch Job --------------->
-2022-09-20 10:03:45,027 INFO vn.shb.service.services.HtlsSumaryRepoImp getHtlsSumariesCNAllBranchByValDt/GET_DATA_KHCN_ALL_BRANCH >>>>>>>>>>>> : {"ID":1,"ERROR_CODE":"99","ERROR_MSG":"No data found"}
-2022-09-20 10:03:45,027 INFO vn.shb.service.jobs.HTLSCNBranchJob <!-----------Start HTLSCN Branch Job --------------->
-2022-09-20 10:03:50,003 INFO vn.shb.service.jobs.HTLSDNJob <!-----------Start HTLSDN Job --------------->
-2022-09-20 10:03:50,012 INFO vn.shb.service.jobs.HTLSCNAllBranchJob <!-----------Start HTLSCN All Branch Job --------------->
-2022-09-20 10:03:50,019 INFO vn.shb.service.services.HtlsSumaryRepoImp getHtlsSumariesCNAllBranchByValDt/GET_DATA_KHCN_ALL_BRANCH >>>>>>>>>>>> : {"ID":1,"ERROR_CODE":"99","ERROR_MSG":"No data found"}
-2022-09-20 10:03:50,019 INFO vn.shb.service.jobs.HTLSCNBranchJob <!-----------Start HTLSCN Branch Job --------------->
-2022-09-20 10:03:55,010 INFO vn.shb.service.jobs.HTLSCNAllBranchJob <!-----------Start HTLSCN All Branch Job --------------->
-2022-09-20 10:03:55,018 INFO vn.shb.service.services.HtlsSumaryRepoImp getHtlsSumariesCNAllBranchByValDt/GET_DATA_KHCN_ALL_BRANCH >>>>>>>>>>>> : {"ID":1,"ERROR_CODE":"99","ERROR_MSG":"No data found"}
-2022-09-20 10:03:55,019 INFO vn.shb.service.jobs.HTLSDNJob <!-----------Start HTLSDN Job --------------->
-2022-09-20 10:03:55,025 INFO vn.shb.service.jobs.HTLSCNBranchJob <!-----------Start HTLSCN Branch Job --------------->
-2022-09-20 10:04:00,003 INFO vn.shb.service.jobs.HTLSCNAllBranchJob <!-----------Start HTLSCN All Branch Job --------------->
-2022-09-20 10:04:00,012 INFO vn.shb.service.services.HtlsSumaryRepoImp getHtlsSumariesCNAllBranchByValDt/GET_DATA_KHCN_ALL_BRANCH >>>>>>>>>>>> : {"ID":1,"ERROR_CODE":"99","ERROR_MSG":"No data found"}
-2022-09-20 10:04:00,013 INFO vn.shb.service.jobs.HTLSCNBranchJob <!-----------Start HTLSCN Branch Job --------------->
-2022-09-20 10:04:00,018 INFO vn.shb.service.jobs.HTLSDNJob <!-----------Start HTLSDN Job --------------->
-2022-09-20 10:04:05,007 INFO vn.shb.service.jobs.HTLSDNJob <!-----------Start HTLSDN Job --------------->
-2022-09-20 10:04:05,043 INFO vn.shb.service.jobs.HTLSCNAllBranchJob <!-----------Start HTLSCN All Branch Job --------------->
-2022-09-20 10:04:05,051 INFO vn.shb.service.services.HtlsSumaryRepoImp getHtlsSumariesCNAllBranchByValDt/GET_DATA_KHCN_ALL_BRANCH >>>>>>>>>>>> : {"ID":1,"ERROR_CODE":"99","ERROR_MSG":"No data found"}
-2022-09-20 10:04:05,052 INFO vn.shb.service.jobs.HTLSCNBranchJob <!-----------Start HTLSCN Branch Job --------------->
-2022-09-20 10:04:08,558 INFO org.quartz.core.QuartzScheduler Scheduler quartzScheduler_$_NON_CLUSTERED paused.
-2022-09-20 10:04:08,559 INFO org.springframework.scheduling.quartz.SchedulerFactoryBean Shutting down Quartz Scheduler
-2022-09-20 10:04:08,559 INFO org.quartz.core.QuartzScheduler Scheduler quartzScheduler_$_NON_CLUSTERED shutting down.
-2022-09-20 10:04:08,559 INFO org.quartz.core.QuartzScheduler Scheduler quartzScheduler_$_NON_CLUSTERED paused.
-2022-09-20 10:04:08,560 INFO org.quartz.core.QuartzScheduler Scheduler quartzScheduler_$_NON_CLUSTERED shutdown complete.
-2022-09-20 10:04:08,562 INFO org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean Closing JPA EntityManagerFactory for persistence unit 'default'
-2022-09-20 10:04:46,828 INFO vn.shb.service.ShbEmailHubApplicationTests Starting ShbEmailHubApplicationTests using Java 1.8.0_191 on LINHDK1 with PID 34968 (started by linhdk1 in D:\Projects\shb-email-hub)
-2022-09-20 10:04:46,828 INFO vn.shb.service.ShbEmailHubApplicationTests No active profile set, falling back to 1 default profile: "default"
-2022-09-20 10:04:47,298 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate Bootstrapping Spring Data JPA repositories in DEFAULT mode.
-2022-09-20 10:04:47,320 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate Finished Spring Data repository scanning in 11 ms. Found 0 JPA repository interfaces.
-2022-09-20 10:04:47,884 INFO org.hibernate.jpa.internal.util.LogHelper HHH000204: Processing PersistenceUnitInfo [name: default]
-2022-09-20 10:04:47,948 INFO org.hibernate.Version HHH000412: Hibernate ORM core version 5.6.10.Final
-2022-09-20 10:04:48,140 INFO org.hibernate.annotations.common.Version HCANN000001: Hibernate Commons Annotations {5.1.2.Final}
-2022-09-20 10:04:50,416 INFO org.hibernate.dialect.Dialect HHH000400: Using dialect: org.hibernate.dialect.Oracle10gDialect
-2022-09-20 10:04:51,402 INFO org.hibernate.engine.transaction.jta.platform.internal.JtaPlatformInitiator HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
-2022-09-20 10:04:51,416 INFO org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean Initialized JPA EntityManagerFactory for persistence unit 'default'
-2022-09-20 10:04:51,925 INFO org.quartz.impl.StdSchedulerFactory Using default implementation for ThreadExecutor
-2022-09-20 10:04:51,945 INFO org.quartz.core.SchedulerSignalerImpl Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
-2022-09-20 10:04:51,946 INFO org.quartz.core.QuartzScheduler Quartz Scheduler v.2.3.2 created.
-2022-09-20 10:04:51,947 INFO org.quartz.simpl.RAMJobStore RAMJobStore initialized.
-2022-09-20 10:04:51,949 INFO org.quartz.core.QuartzScheduler Scheduler meta-data: Quartz Scheduler (v2.3.2) 'quartzScheduler' with instanceId 'NON_CLUSTERED'
-  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
-  NOT STARTED.
-  Currently in standby mode.
-  Number of jobs executed: 0
-  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
-  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.
-
-2022-09-20 10:04:51,949 INFO org.quartz.impl.StdSchedulerFactory Quartz scheduler 'quartzScheduler' initialized from an externally provided properties instance.
-2022-09-20 10:04:51,950 INFO org.quartz.impl.StdSchedulerFactory Quartz scheduler version: 2.3.2
-2022-09-20 10:04:51,950 INFO org.quartz.core.QuartzScheduler JobFactory set to: org.springframework.scheduling.quartz.SpringBeanJobFactory@6d420cdd
-2022-09-20 10:04:52,017 INFO org.springframework.scheduling.quartz.SchedulerFactoryBean Starting Quartz Scheduler now
-2022-09-20 10:04:52,018 INFO org.quartz.core.QuartzScheduler Scheduler quartzScheduler_$_NON_CLUSTERED started.
-2022-09-20 10:04:52,035 INFO vn.shb.service.ShbEmailHubApplicationTests Started ShbEmailHubApplicationTests in 5.79 seconds (JVM running for 7.004)
-2022-09-20 10:04:52,195 INFO org.quartz.core.QuartzScheduler Scheduler quartzScheduler_$_NON_CLUSTERED paused.
-2022-09-20 10:04:52,197 INFO org.springframework.scheduling.quartz.SchedulerFactoryBean Shutting down Quartz Scheduler
-2022-09-20 10:04:52,197 INFO org.quartz.core.QuartzScheduler Scheduler quartzScheduler_$_NON_CLUSTERED shutting down.
-2022-09-20 10:04:52,197 INFO org.quartz.core.QuartzScheduler Scheduler quartzScheduler_$_NON_CLUSTERED paused.
-2022-09-20 10:04:52,198 INFO org.quartz.core.QuartzScheduler Scheduler quartzScheduler_$_NON_CLUSTERED shutdown complete.
-2022-09-20 10:04:52,201 INFO org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean Closing JPA EntityManagerFactory for persistence unit 'default'
-2022-09-20 11:01:47,212 INFO vn.shb.service.ShbEmailHubApplication Starting ShbEmailHubApplication using Java 1.8.0_191 on LINHDK1 with PID 35808 (D:\Projects\shb-email-hub\target\classes started by linhdk1 in D:\Projects\shb-email-hub)
-2022-09-20 11:01:47,213 INFO vn.shb.service.ShbEmailHubApplication No active profile set, falling back to 1 default profile: "default"
-2022-09-20 11:01:47,265 INFO org.springframework.boot.devtools.restart.ChangeableUrls The Class-Path manifest attribute in C:\Users\linhdk1\.m2\repository\com\oracle\database\jdbc\ojdbc8\21.1.0.0\ojdbc8-21.1.0.0.jar referenced one or more files that do not exist: file:/C:/Users/linhdk1/.m2/repository/com/oracle/database/jdbc/ojdbc8/21.1.0.0/oraclepki.jar
-2022-09-20 11:01:47,266 INFO org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
-2022-09-20 11:01:47,790 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate Bootstrapping Spring Data JPA repositories in DEFAULT mode.
-2022-09-20 11:01:47,811 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate Finished Spring Data repository scanning in 10 ms. Found 0 JPA repository interfaces.
-2022-09-20 11:01:48,214 INFO org.hibernate.jpa.internal.util.LogHelper HHH000204: Processing PersistenceUnitInfo [name: default]
-2022-09-20 11:01:48,274 INFO org.hibernate.Version HHH000412: Hibernate ORM core version 5.6.10.Final
-2022-09-20 11:01:48,463 INFO org.hibernate.annotations.common.Version HCANN000001: Hibernate Commons Annotations {5.1.2.Final}
-2022-09-20 11:01:49,888 INFO org.hibernate.dialect.Dialect HHH000400: Using dialect: org.hibernate.dialect.Oracle10gDialect
-2022-09-20 11:01:50,694 INFO org.hibernate.engine.transaction.jta.platform.internal.JtaPlatformInitiator HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
-2022-09-20 11:01:50,705 INFO org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean Initialized JPA EntityManagerFactory for persistence unit 'default'
-2022-09-20 11:01:51,010 INFO org.quartz.impl.StdSchedulerFactory Using default implementation for ThreadExecutor
-2022-09-20 11:01:51,022 INFO org.quartz.core.SchedulerSignalerImpl Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
-2022-09-20 11:01:51,023 INFO org.quartz.core.QuartzScheduler Quartz Scheduler v.2.3.2 created.
-2022-09-20 11:01:51,024 INFO org.quartz.simpl.RAMJobStore RAMJobStore initialized.
-2022-09-20 11:01:51,025 INFO org.quartz.core.QuartzScheduler Scheduler meta-data: Quartz Scheduler (v2.3.2) 'quartzScheduler' with instanceId 'NON_CLUSTERED'
-  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
-  NOT STARTED.
-  Currently in standby mode.
-  Number of jobs executed: 0
-  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
-  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.
-
-2022-09-20 11:01:51,025 INFO org.quartz.impl.StdSchedulerFactory Quartz scheduler 'quartzScheduler' initialized from an externally provided properties instance.
-2022-09-20 11:01:51,025 INFO org.quartz.impl.StdSchedulerFactory Quartz scheduler version: 2.3.2
-2022-09-20 11:01:51,025 INFO org.quartz.core.QuartzScheduler JobFactory set to: org.springframework.scheduling.quartz.SpringBeanJobFactory@4b3e503b
-2022-09-20 11:01:51,076 INFO org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer LiveReload server is running on port 35729
-2022-09-20 11:01:51,091 INFO org.springframework.scheduling.quartz.SchedulerFactoryBean Starting Quartz Scheduler now
-2022-09-20 11:01:51,091 INFO org.quartz.core.QuartzScheduler Scheduler quartzScheduler_$_NON_CLUSTERED started.
-2022-09-20 11:01:51,107 INFO vn.shb.service.ShbEmailHubApplication Started ShbEmailHubApplication in 4.555 seconds (JVM running for 6.279)
-2022-09-20 11:01:55,009 INFO vn.shb.service.jobs.HolidayByCurrencyJob <!-----------Start HTLSCN All Branch Job --------------->
-2022-09-20 11:02:00,015 INFO vn.shb.service.jobs.HolidayByCurrencyJob <!-----------Start HTLSCN All Branch Job --------------->
-2022-09-20 11:02:05,016 INFO vn.shb.service.jobs.HolidayByCurrencyJob <!-----------Start HTLSCN All Branch Job --------------->
-2022-09-20 11:02:06,621 INFO org.quartz.core.QuartzScheduler Scheduler quartzScheduler_$_NON_CLUSTERED paused.
-2022-09-20 11:02:06,624 INFO org.springframework.scheduling.quartz.SchedulerFactoryBean Shutting down Quartz Scheduler
-2022-09-20 11:02:06,624 INFO org.quartz.core.QuartzScheduler Scheduler quartzScheduler_$_NON_CLUSTERED shutting down.
-2022-09-20 11:02:06,625 INFO org.quartz.core.QuartzScheduler Scheduler quartzScheduler_$_NON_CLUSTERED paused.
-2022-09-20 11:02:06,625 INFO org.quartz.core.QuartzScheduler Scheduler quartzScheduler_$_NON_CLUSTERED shutdown complete.
-2022-09-20 11:02:06,627 INFO org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean Closing JPA EntityManagerFactory for persistence unit 'default'
-2022-09-20 11:09:01,566 INFO vn.shb.service.ShbEmailHubApplication Starting ShbEmailHubApplication using Java 1.8.0_191 on LINHDK1 with PID 5172 (D:\Projects\shb-email-hub\target\classes started by linhdk1 in D:\Projects\shb-email-hub)
-2022-09-20 11:09:01,567 INFO vn.shb.service.ShbEmailHubApplication No active profile set, falling back to 1 default profile: "default"
-2022-09-20 11:09:01,618 INFO org.springframework.boot.devtools.restart.ChangeableUrls The Class-Path manifest attribute in C:\Users\linhdk1\.m2\repository\com\oracle\database\jdbc\ojdbc8\21.1.0.0\ojdbc8-21.1.0.0.jar referenced one or more files that do not exist: file:/C:/Users/linhdk1/.m2/repository/com/oracle/database/jdbc/ojdbc8/21.1.0.0/oraclepki.jar
-2022-09-20 11:09:01,619 INFO org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
-2022-09-20 11:09:02,158 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate Bootstrapping Spring Data JPA repositories in DEFAULT mode.
-2022-09-20 11:09:02,179 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate Finished Spring Data repository scanning in 10 ms. Found 0 JPA repository interfaces.
-2022-09-20 11:09:02,597 INFO org.hibernate.jpa.internal.util.LogHelper HHH000204: Processing PersistenceUnitInfo [name: default]
-2022-09-20 11:09:02,653 INFO org.hibernate.Version HHH000412: Hibernate ORM core version 5.6.10.Final
-2022-09-20 11:09:02,822 INFO org.hibernate.annotations.common.Version HCANN000001: Hibernate Commons Annotations {5.1.2.Final}
-2022-09-20 11:09:04,198 INFO org.hibernate.dialect.Dialect HHH000400: Using dialect: org.hibernate.dialect.Oracle10gDialect
-2022-09-20 11:09:05,001 INFO org.hibernate.engine.transaction.jta.platform.internal.JtaPlatformInitiator HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
-2022-09-20 11:09:05,013 INFO org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean Initialized JPA EntityManagerFactory for persistence unit 'default'
-2022-09-20 11:09:05,146 WARN org.springframework.context.annotation.AnnotationConfigApplicationContext Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'holidayByCurrencyJob' defined in file [D:\Projects\shb-email-hub\target\classes\vn\shb\service\jobs\HolidayByCurrencyJob.class]: Initialization of bean failed; nested exception is java.lang.IllegalStateException: Encountered invalid @Scheduled method 'execute': Cron expression must consist of 6 fields (found 7 in "0 0 8-9 ? * * *")
-2022-09-20 11:09:05,146 INFO org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean Closing JPA EntityManagerFactory for persistence unit 'default'
-2022-09-20 11:09:05,251 INFO org.springframework.boot.autoconfigure.logging.ConditionEvaluationReportLoggingListener 
+2023-02-14 09:25:33,143 INFO vn.shb.service.ShbEmailHubApplicationTests Starting ShbEmailHubApplicationTests using Java 1.8.0_292 on TRINHNV with PID 40800 (started by tiennv3 in E:\TienNV4\Project\NoTanThu\shb-email-hub)
+2023-02-14 09:25:33,150 INFO vn.shb.service.ShbEmailHubApplicationTests No active profile set, falling back to 1 default profile: "default"
+2023-02-14 09:25:33,986 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate Bootstrapping Spring Data JPA repositories in DEFAULT mode.
+2023-02-14 09:25:34,134 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate Finished Spring Data repository scanning in 130 ms. Found 2 JPA repository interfaces.
+2023-02-14 09:25:34,966 INFO org.hibernate.jpa.internal.util.LogHelper HHH000204: Processing PersistenceUnitInfo [name: default]
+2023-02-14 09:25:35,050 INFO org.hibernate.Version HHH000412: Hibernate ORM core version 5.6.10.Final
+2023-02-14 09:25:35,327 INFO org.hibernate.annotations.common.Version HCANN000001: Hibernate Commons Annotations {5.1.2.Final}
+2023-02-14 09:25:37,286 INFO org.hibernate.dialect.Dialect HHH000400: Using dialect: org.hibernate.dialect.Oracle10gDialect
+2023-02-14 09:25:38,810 INFO org.hibernate.engine.transaction.jta.platform.internal.JtaPlatformInitiator HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
+2023-02-14 09:25:38,829 INFO org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean Initialized JPA EntityManagerFactory for persistence unit 'default'
+2023-02-14 09:25:38,844 WARN org.springframework.context.annotation.AnnotationConfigApplicationContext Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'paramsConfigs': Injection of autowired dependencies failed; nested exception is java.lang.IllegalArgumentException: Could not resolve placeholder 'params.maxRecord' in value "${params.maxRecord}"
+2023-02-14 09:25:38,845 INFO org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean Closing JPA EntityManagerFactory for persistence unit 'default'
+2023-02-14 09:25:38,930 INFO org.springframework.boot.autoconfigure.logging.ConditionEvaluationReportLoggingListener 
 
 Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
-2022-09-20 11:09:05,290 ERROR org.springframework.boot.SpringApplication Application run failed
-org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'holidayByCurrencyJob' defined in file [D:\Projects\shb-email-hub\target\classes\vn\shb\service\jobs\HolidayByCurrencyJob.class]: Initialization of bean failed; nested exception is java.lang.IllegalStateException: Encountered invalid @Scheduled method 'execute': Cron expression must consist of 6 fields (found 7 in "0 0 8-9 ? * * *")
-	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:628)
+2023-02-14 09:25:38,975 ERROR org.springframework.boot.SpringApplication Application run failed
+org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'paramsConfigs': Injection of autowired dependencies failed; nested exception is java.lang.IllegalArgumentException: Could not resolve placeholder 'params.maxRecord' in value "${params.maxRecord}"
+	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor.java:405)
+	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1431)
+	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:619)
 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:542)
 	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:335)
 	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
@@ -386,222 +29,638 @@ org.springframework.beans.factory.BeanCreationException: Error creating bean wit
 	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:734)
 	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:408)
 	at org.springframework.boot.SpringApplication.run(SpringApplication.java:308)
-	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1306)
-	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1295)
-	at vn.shb.service.ShbEmailHubApplication.main(ShbEmailHubApplication.java:12)
-	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
-	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
-	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
-	at java.lang.reflect.Method.invoke(Method.java:498)
-	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49)
-Caused by: java.lang.IllegalStateException: Encountered invalid @Scheduled method 'execute': Cron expression must consist of 6 fields (found 7 in "0 0 8-9 ? * * *")
-	at org.springframework.scheduling.annotation.ScheduledAnnotationBeanPostProcessor.processScheduled(ScheduledAnnotationBeanPostProcessor.java:518)
-	at org.springframework.scheduling.annotation.ScheduledAnnotationBeanPostProcessor.lambda$null$1(ScheduledAnnotationBeanPostProcessor.java:380)
-	at java.lang.Iterable.forEach(Iterable.java:75)
-	at org.springframework.scheduling.annotation.ScheduledAnnotationBeanPostProcessor.lambda$postProcessAfterInitialization$2(ScheduledAnnotationBeanPostProcessor.java:380)
-	at java.util.LinkedHashMap.forEach(LinkedHashMap.java:684)
-	at org.springframework.scheduling.annotation.ScheduledAnnotationBeanPostProcessor.postProcessAfterInitialization(ScheduledAnnotationBeanPostProcessor.java:379)
-	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsAfterInitialization(AbstractAutowireCapableBeanFactory.java:455)
-	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1808)
-	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:620)
-	... 19 common frames omitted
-2022-09-20 11:09:54,975 INFO vn.shb.service.ShbEmailHubApplication Starting ShbEmailHubApplication using Java 1.8.0_191 on LINHDK1 with PID 45628 (D:\Projects\shb-email-hub\target\classes started by linhdk1 in D:\Projects\shb-email-hub)
-2022-09-20 11:09:54,976 INFO vn.shb.service.ShbEmailHubApplication No active profile set, falling back to 1 default profile: "default"
-2022-09-20 11:09:55,030 INFO org.springframework.boot.devtools.restart.ChangeableUrls The Class-Path manifest attribute in C:\Users\linhdk1\.m2\repository\com\oracle\database\jdbc\ojdbc8\21.1.0.0\ojdbc8-21.1.0.0.jar referenced one or more files that do not exist: file:/C:/Users/linhdk1/.m2/repository/com/oracle/database/jdbc/ojdbc8/21.1.0.0/oraclepki.jar
-2022-09-20 11:09:55,030 INFO org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
-2022-09-20 11:09:55,573 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate Bootstrapping Spring Data JPA repositories in DEFAULT mode.
-2022-09-20 11:09:55,595 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate Finished Spring Data repository scanning in 11 ms. Found 0 JPA repository interfaces.
-2022-09-20 11:09:56,014 INFO org.hibernate.jpa.internal.util.LogHelper HHH000204: Processing PersistenceUnitInfo [name: default]
-2022-09-20 11:09:56,072 INFO org.hibernate.Version HHH000412: Hibernate ORM core version 5.6.10.Final
-2022-09-20 11:09:56,240 INFO org.hibernate.annotations.common.Version HCANN000001: Hibernate Commons Annotations {5.1.2.Final}
-2022-09-20 11:09:57,643 INFO org.hibernate.dialect.Dialect HHH000400: Using dialect: org.hibernate.dialect.Oracle10gDialect
-2022-09-20 11:09:58,457 INFO org.hibernate.engine.transaction.jta.platform.internal.JtaPlatformInitiator HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
-2022-09-20 11:09:58,471 INFO org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean Initialized JPA EntityManagerFactory for persistence unit 'default'
-2022-09-20 11:09:58,793 INFO org.quartz.impl.StdSchedulerFactory Using default implementation for ThreadExecutor
-2022-09-20 11:09:58,805 INFO org.quartz.core.SchedulerSignalerImpl Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
-2022-09-20 11:09:58,805 INFO org.quartz.core.QuartzScheduler Quartz Scheduler v.2.3.2 created.
-2022-09-20 11:09:58,806 INFO org.quartz.simpl.RAMJobStore RAMJobStore initialized.
-2022-09-20 11:09:58,808 INFO org.quartz.core.QuartzScheduler Scheduler meta-data: Quartz Scheduler (v2.3.2) 'quartzScheduler' with instanceId 'NON_CLUSTERED'
-  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
-  NOT STARTED.
-  Currently in standby mode.
-  Number of jobs executed: 0
-  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
-  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.
-
-2022-09-20 11:09:58,808 INFO org.quartz.impl.StdSchedulerFactory Quartz scheduler 'quartzScheduler' initialized from an externally provided properties instance.
-2022-09-20 11:09:58,808 INFO org.quartz.impl.StdSchedulerFactory Quartz scheduler version: 2.3.2
-2022-09-20 11:09:58,808 INFO org.quartz.core.QuartzScheduler JobFactory set to: org.springframework.scheduling.quartz.SpringBeanJobFactory@62c10e84
-2022-09-20 11:09:58,855 INFO org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer LiveReload server is running on port 35729
-2022-09-20 11:09:58,870 INFO org.springframework.scheduling.quartz.SchedulerFactoryBean Starting Quartz Scheduler now
-2022-09-20 11:09:58,870 INFO org.quartz.core.QuartzScheduler Scheduler quartzScheduler_$_NON_CLUSTERED started.
-2022-09-20 11:09:58,886 INFO vn.shb.service.ShbEmailHubApplication Started ShbEmailHubApplication in 4.589 seconds (JVM running for 6.396)
-2022-09-20 11:11:03,655 INFO org.quartz.core.QuartzScheduler Scheduler quartzScheduler_$_NON_CLUSTERED paused.
-2022-09-20 11:11:03,657 INFO org.springframework.scheduling.quartz.SchedulerFactoryBean Shutting down Quartz Scheduler
-2022-09-20 11:11:03,658 INFO org.quartz.core.QuartzScheduler Scheduler quartzScheduler_$_NON_CLUSTERED shutting down.
-2022-09-20 11:11:03,658 INFO org.quartz.core.QuartzScheduler Scheduler quartzScheduler_$_NON_CLUSTERED paused.
-2022-09-20 11:11:03,659 INFO org.quartz.core.QuartzScheduler Scheduler quartzScheduler_$_NON_CLUSTERED shutdown complete.
-2022-09-20 11:11:03,662 INFO org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean Closing JPA EntityManagerFactory for persistence unit 'default'
-2022-09-20 11:11:09,952 INFO vn.shb.service.ShbEmailHubApplication Starting ShbEmailHubApplication using Java 1.8.0_191 on LINHDK1 with PID 39172 (D:\Projects\shb-email-hub\target\classes started by linhdk1 in D:\Projects\shb-email-hub)
-2022-09-20 11:11:09,952 INFO vn.shb.service.ShbEmailHubApplication No active profile set, falling back to 1 default profile: "default"
-2022-09-20 11:11:10,010 INFO org.springframework.boot.devtools.restart.ChangeableUrls The Class-Path manifest attribute in C:\Users\linhdk1\.m2\repository\com\oracle\database\jdbc\ojdbc8\21.1.0.0\ojdbc8-21.1.0.0.jar referenced one or more files that do not exist: file:/C:/Users/linhdk1/.m2/repository/com/oracle/database/jdbc/ojdbc8/21.1.0.0/oraclepki.jar
-2022-09-20 11:11:10,011 INFO org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
-2022-09-20 11:11:10,570 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate Bootstrapping Spring Data JPA repositories in DEFAULT mode.
-2022-09-20 11:11:10,592 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate Finished Spring Data repository scanning in 11 ms. Found 0 JPA repository interfaces.
-2022-09-20 11:11:11,037 INFO org.hibernate.jpa.internal.util.LogHelper HHH000204: Processing PersistenceUnitInfo [name: default]
-2022-09-20 11:11:11,097 INFO org.hibernate.Version HHH000412: Hibernate ORM core version 5.6.10.Final
-2022-09-20 11:11:11,271 INFO org.hibernate.annotations.common.Version HCANN000001: Hibernate Commons Annotations {5.1.2.Final}
-2022-09-20 11:11:12,705 INFO org.hibernate.dialect.Dialect HHH000400: Using dialect: org.hibernate.dialect.Oracle10gDialect
-2022-09-20 11:11:13,535 INFO org.hibernate.engine.transaction.jta.platform.internal.JtaPlatformInitiator HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
-2022-09-20 11:11:13,546 INFO org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean Initialized JPA EntityManagerFactory for persistence unit 'default'
-2022-09-20 11:11:13,873 INFO org.quartz.impl.StdSchedulerFactory Using default implementation for ThreadExecutor
-2022-09-20 11:11:13,885 INFO org.quartz.core.SchedulerSignalerImpl Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
-2022-09-20 11:11:13,885 INFO org.quartz.core.QuartzScheduler Quartz Scheduler v.2.3.2 created.
-2022-09-20 11:11:13,886 INFO org.quartz.simpl.RAMJobStore RAMJobStore initialized.
-2022-09-20 11:11:13,887 INFO org.quartz.core.QuartzScheduler Scheduler meta-data: Quartz Scheduler (v2.3.2) 'quartzScheduler' with instanceId 'NON_CLUSTERED'
-  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
-  NOT STARTED.
-  Currently in standby mode.
-  Number of jobs executed: 0
-  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
-  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.
+	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:132)
+	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:99)
+	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:124)
+	at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:124)
+	at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.injectDependencies(DependencyInjectionTestExecutionListener.java:118)
+	at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.prepareTestInstance(DependencyInjectionTestExecutionListener.java:83)
+	at org.springframework.boot.test.autoconfigure.SpringBootDependencyInjectionTestExecutionListener.prepareTestInstance(SpringBootDependencyInjectionTestExecutionListener.java:43)
+	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:248)
+	at org.springframework.test.context.junit.jupiter.SpringExtension.postProcessTestInstance(SpringExtension.java:138)
+	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$8(ClassBasedTestDescriptor.java:363)
+	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.executeAndMaskThrowable(ClassBasedTestDescriptor.java:368)
+	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$9(ClassBasedTestDescriptor.java:363)
+	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
+	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
+	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1384)
+	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:482)
+	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:472)
+	at java.util.stream.StreamSpliterators$WrappingSpliterator.forEachRemaining(StreamSpliterators.java:313)
+	at java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:743)
+	at java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:742)
+	at java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:647)
+	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.invokeTestInstancePostProcessors(ClassBasedTestDescriptor.java:362)
+	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$instantiateAndPostProcessTestInstance$6(ClassBasedTestDescriptor.java:283)
+	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
+	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.instantiateAndPostProcessTestInstance(ClassBasedTestDescriptor.java:282)
+	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$4(ClassBasedTestDescriptor.java:272)
+	at java.util.Optional.orElseGet(Optional.java:267)
+	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$5(ClassBasedTestDescriptor.java:271)
+	at org.junit.jupiter.engine.execution.TestInstancesProvider.getTestInstances(TestInstancesProvider.java:31)
+	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$prepare$0(TestMethodTestDescriptor.java:102)
+	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
+	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:101)
+	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:66)
+	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$prepare$2(NodeTestTask.java:123)
+	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
+	at org.junit.platform.engine.support.hierarchical.NodeTestTask.prepare(NodeTestTask.java:123)
+	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:90)
+	at java.util.ArrayList.forEach(ArrayList.java:1259)
+	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
+	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
+	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
+	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
+	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
+	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
+	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
+	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
+	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
+	at java.util.ArrayList.forEach(ArrayList.java:1259)
+	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
+	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
+	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
+	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
+	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
+	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
+	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
+	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
+	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
+	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
+	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
+	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
+	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:220)
+	at org.junit.platform.launcher.core.DefaultLauncher.lambda$execute$6(DefaultLauncher.java:188)
+	at org.junit.platform.launcher.core.DefaultLauncher.withInterceptedStreams(DefaultLauncher.java:202)
+	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:181)
+	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:128)
+	at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.invokeAllTests(JUnitPlatformProvider.java:150)
+	at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.invoke(JUnitPlatformProvider.java:124)
+	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:384)
+	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:345)
+	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:126)
+	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:418)
+Caused by: java.lang.IllegalArgumentException: Could not resolve placeholder 'params.maxRecord' in value "${params.maxRecord}"
+	at org.springframework.util.PropertyPlaceholderHelper.parseStringValue(PropertyPlaceholderHelper.java:180)
+	at org.springframework.util.PropertyPlaceholderHelper.replacePlaceholders(PropertyPlaceholderHelper.java:126)
+	at org.springframework.core.env.AbstractPropertyResolver.doResolvePlaceholders(AbstractPropertyResolver.java:239)
+	at org.springframework.core.env.AbstractPropertyResolver.resolveRequiredPlaceholders(AbstractPropertyResolver.java:210)
+	at org.springframework.context.support.PropertySourcesPlaceholderConfigurer.lambda$processProperties$0(PropertySourcesPlaceholderConfigurer.java:191)
+	at org.springframework.beans.factory.support.AbstractBeanFactory.resolveEmbeddedValue(AbstractBeanFactory.java:936)
+	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1332)
+	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1311)
+	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.resolveFieldValue(AutowiredAnnotationBeanPostProcessor.java:656)
+	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:639)
+	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:119)
+	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor.java:399)
+	... 84 common frames omitted
+2023-02-14 09:25:39,037 INFO vn.shb.service.ShbEmailHubApplicationTests Starting ShbEmailHubApplicationTests using Java 1.8.0_292 on TRINHNV with PID 40800 (started by tiennv3 in E:\TienNV4\Project\NoTanThu\shb-email-hub)
+2023-02-14 09:25:39,038 INFO vn.shb.service.ShbEmailHubApplicationTests No active profile set, falling back to 1 default profile: "default"
+2023-02-14 09:25:39,464 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate Bootstrapping Spring Data JPA repositories in DEFAULT mode.
+2023-02-14 09:25:39,503 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate Finished Spring Data repository scanning in 38 ms. Found 2 JPA repository interfaces.
+2023-02-14 09:25:39,657 INFO org.hibernate.jpa.internal.util.LogHelper HHH000204: Processing PersistenceUnitInfo [name: default]
+2023-02-14 09:25:39,768 INFO org.hibernate.dialect.Dialect HHH000400: Using dialect: org.hibernate.dialect.Oracle10gDialect
+2023-02-14 09:25:39,929 INFO org.hibernate.engine.transaction.jta.platform.internal.JtaPlatformInitiator HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
+2023-02-14 09:25:39,930 INFO org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean Initialized JPA EntityManagerFactory for persistence unit 'default'
+2023-02-14 09:25:39,941 WARN org.springframework.context.annotation.AnnotationConfigApplicationContext Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'paramsConfigs': Injection of autowired dependencies failed; nested exception is java.lang.IllegalArgumentException: Could not resolve placeholder 'params.maxRecord' in value "${params.maxRecord}"
+2023-02-14 09:25:39,941 INFO org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean Closing JPA EntityManagerFactory for persistence unit 'default'
+2023-02-14 09:25:39,970 INFO org.springframework.boot.autoconfigure.logging.ConditionEvaluationReportLoggingListener 
 
-2022-09-20 11:11:13,887 INFO org.quartz.impl.StdSchedulerFactory Quartz scheduler 'quartzScheduler' initialized from an externally provided properties instance.
-2022-09-20 11:11:13,887 INFO org.quartz.impl.StdSchedulerFactory Quartz scheduler version: 2.3.2
-2022-09-20 11:11:13,887 INFO org.quartz.core.QuartzScheduler JobFactory set to: org.springframework.scheduling.quartz.SpringBeanJobFactory@62c10e84
-2022-09-20 11:11:13,935 INFO org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer LiveReload server is running on port 35729
-2022-09-20 11:11:13,951 INFO org.springframework.scheduling.quartz.SchedulerFactoryBean Starting Quartz Scheduler now
-2022-09-20 11:11:13,951 INFO org.quartz.core.QuartzScheduler Scheduler quartzScheduler_$_NON_CLUSTERED started.
-2022-09-20 11:11:13,968 INFO vn.shb.service.ShbEmailHubApplication Started ShbEmailHubApplication in 4.728 seconds (JVM running for 6.443)
-2022-09-20 11:11:15,001 INFO vn.shb.service.jobs.HolidayByCurrencyJob <!-----------Start HolidayByCurrency Job --------------->
-2022-09-20 11:11:30,016 INFO vn.shb.service.jobs.HolidayByCurrencyJob <!-----------Start HolidayByCurrency Job --------------->
-2022-09-20 11:11:45,005 INFO vn.shb.service.jobs.HolidayByCurrencyJob <!-----------Start HolidayByCurrency Job --------------->
-2022-09-20 11:12:00,010 INFO vn.shb.service.jobs.HolidayByCurrencyJob <!-----------Start HolidayByCurrency Job --------------->
-2022-09-20 11:12:15,006 INFO vn.shb.service.jobs.HolidayByCurrencyJob <!-----------Start HolidayByCurrency Job --------------->
-2022-09-20 11:12:30,010 INFO vn.shb.service.jobs.HolidayByCurrencyJob <!-----------Start HolidayByCurrency Job --------------->
-2022-09-20 11:12:45,012 INFO vn.shb.service.jobs.HolidayByCurrencyJob <!-----------Start HolidayByCurrency Job --------------->
-2022-09-20 11:12:47,792 INFO org.quartz.core.QuartzScheduler Scheduler quartzScheduler_$_NON_CLUSTERED paused.
-2022-09-20 11:12:47,794 INFO org.springframework.scheduling.quartz.SchedulerFactoryBean Shutting down Quartz Scheduler
-2022-09-20 11:12:47,795 INFO org.quartz.core.QuartzScheduler Scheduler quartzScheduler_$_NON_CLUSTERED shutting down.
-2022-09-20 11:12:47,795 INFO org.quartz.core.QuartzScheduler Scheduler quartzScheduler_$_NON_CLUSTERED paused.
-2022-09-20 11:12:47,795 INFO org.quartz.core.QuartzScheduler Scheduler quartzScheduler_$_NON_CLUSTERED shutdown complete.
-2022-09-20 11:12:47,798 INFO org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean Closing JPA EntityManagerFactory for persistence unit 'default'
-2022-09-20 15:02:44,874 INFO vn.shb.service.ShbEmailHubApplication Starting ShbEmailHubApplication using Java 1.8.0_191 on LINHDK1 with PID 42468 (D:\Projects\shb-email-hub\target\classes started by linhdk1 in D:\Projects\shb-email-hub)
-2022-09-20 15:02:44,875 INFO vn.shb.service.ShbEmailHubApplication No active profile set, falling back to 1 default profile: "default"
-2022-09-20 15:02:44,930 INFO org.springframework.boot.devtools.restart.ChangeableUrls The Class-Path manifest attribute in C:\Users\linhdk1\.m2\repository\com\oracle\database\jdbc\ojdbc8\21.1.0.0\ojdbc8-21.1.0.0.jar referenced one or more files that do not exist: file:/C:/Users/linhdk1/.m2/repository/com/oracle/database/jdbc/ojdbc8/21.1.0.0/oraclepki.jar
-2022-09-20 15:02:44,930 INFO org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
-2022-09-20 15:02:45,489 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate Bootstrapping Spring Data JPA repositories in DEFAULT mode.
-2022-09-20 15:02:45,509 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate Finished Spring Data repository scanning in 10 ms. Found 0 JPA repository interfaces.
-2022-09-20 15:02:45,901 INFO org.hibernate.jpa.internal.util.LogHelper HHH000204: Processing PersistenceUnitInfo [name: default]
-2022-09-20 15:02:45,955 INFO org.hibernate.Version HHH000412: Hibernate ORM core version 5.6.10.Final
-2022-09-20 15:02:46,120 INFO org.hibernate.annotations.common.Version HCANN000001: Hibernate Commons Annotations {5.1.2.Final}
-2022-09-20 15:02:47,515 INFO org.hibernate.dialect.Dialect HHH000400: Using dialect: org.hibernate.dialect.Oracle10gDialect
-2022-09-20 15:02:48,270 INFO org.hibernate.engine.transaction.jta.platform.internal.JtaPlatformInitiator HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
-2022-09-20 15:02:48,281 INFO org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean Initialized JPA EntityManagerFactory for persistence unit 'default'
-2022-09-20 15:02:48,597 INFO org.quartz.impl.StdSchedulerFactory Using default implementation for ThreadExecutor
-2022-09-20 15:02:48,609 INFO org.quartz.core.SchedulerSignalerImpl Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
-2022-09-20 15:02:48,610 INFO org.quartz.core.QuartzScheduler Quartz Scheduler v.2.3.2 created.
-2022-09-20 15:02:48,611 INFO org.quartz.simpl.RAMJobStore RAMJobStore initialized.
-2022-09-20 15:02:48,612 INFO org.quartz.core.QuartzScheduler Scheduler meta-data: Quartz Scheduler (v2.3.2) 'quartzScheduler' with instanceId 'NON_CLUSTERED'
-  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
-  NOT STARTED.
-  Currently in standby mode.
-  Number of jobs executed: 0
-  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
-  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.
-
-2022-09-20 15:02:48,612 INFO org.quartz.impl.StdSchedulerFactory Quartz scheduler 'quartzScheduler' initialized from an externally provided properties instance.
-2022-09-20 15:02:48,612 INFO org.quartz.impl.StdSchedulerFactory Quartz scheduler version: 2.3.2
-2022-09-20 15:02:48,612 INFO org.quartz.core.QuartzScheduler JobFactory set to: org.springframework.scheduling.quartz.SpringBeanJobFactory@5799aa57
-2022-09-20 15:02:48,661 INFO org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer LiveReload server is running on port 35729
-2022-09-20 15:02:48,675 INFO org.springframework.scheduling.quartz.SchedulerFactoryBean Starting Quartz Scheduler now
-2022-09-20 15:02:48,676 INFO org.quartz.core.QuartzScheduler Scheduler quartzScheduler_$_NON_CLUSTERED started.
-2022-09-20 15:02:48,691 INFO vn.shb.service.ShbEmailHubApplication Started ShbEmailHubApplication in 4.505 seconds (JVM running for 6.227)
-2022-09-20 15:02:50,003 INFO vn.shb.service.jobs.HolidayByCurrencyJob <!-----------Start HolidayByCurrency Job --------------->
-2022-09-20 15:02:55,009 INFO vn.shb.service.jobs.HolidayByCurrencyJob <!-----------Start HolidayByCurrency Job --------------->
-2022-09-20 15:03:00,009 INFO vn.shb.service.jobs.HolidayByCurrencyJob <!-----------Start HolidayByCurrency Job --------------->
-2022-09-20 15:03:03,122 INFO org.quartz.core.QuartzScheduler Scheduler quartzScheduler_$_NON_CLUSTERED paused.
-2022-09-20 15:03:03,126 INFO org.springframework.scheduling.quartz.SchedulerFactoryBean Shutting down Quartz Scheduler
-2022-09-20 15:03:03,126 INFO org.quartz.core.QuartzScheduler Scheduler quartzScheduler_$_NON_CLUSTERED shutting down.
-2022-09-20 15:03:03,127 INFO org.quartz.core.QuartzScheduler Scheduler quartzScheduler_$_NON_CLUSTERED paused.
-2022-09-20 15:03:03,127 INFO org.quartz.core.QuartzScheduler Scheduler quartzScheduler_$_NON_CLUSTERED shutdown complete.
-2022-09-20 15:03:03,129 INFO org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean Closing JPA EntityManagerFactory for persistence unit 'default'
-2022-09-20 15:03:33,346 INFO vn.shb.service.ShbEmailHubApplication Starting ShbEmailHubApplication using Java 1.8.0_191 on LINHDK1 with PID 19076 (D:\Projects\shb-email-hub\target\classes started by linhdk1 in D:\Projects\shb-email-hub)
-2022-09-20 15:03:33,347 INFO vn.shb.service.ShbEmailHubApplication No active profile set, falling back to 1 default profile: "default"
-2022-09-20 15:03:33,402 INFO org.springframework.boot.devtools.restart.ChangeableUrls The Class-Path manifest attribute in C:\Users\linhdk1\.m2\repository\com\oracle\database\jdbc\ojdbc8\21.1.0.0\ojdbc8-21.1.0.0.jar referenced one or more files that do not exist: file:/C:/Users/linhdk1/.m2/repository/com/oracle/database/jdbc/ojdbc8/21.1.0.0/oraclepki.jar
-2022-09-20 15:03:33,402 INFO org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
-2022-09-20 15:03:33,937 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate Bootstrapping Spring Data JPA repositories in DEFAULT mode.
-2022-09-20 15:03:33,956 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate Finished Spring Data repository scanning in 10 ms. Found 0 JPA repository interfaces.
-2022-09-20 15:03:34,353 INFO org.hibernate.jpa.internal.util.LogHelper HHH000204: Processing PersistenceUnitInfo [name: default]
-2022-09-20 15:03:34,407 INFO org.hibernate.Version HHH000412: Hibernate ORM core version 5.6.10.Final
-2022-09-20 15:03:34,571 INFO org.hibernate.annotations.common.Version HCANN000001: Hibernate Commons Annotations {5.1.2.Final}
-2022-09-20 15:03:35,996 INFO org.hibernate.dialect.Dialect HHH000400: Using dialect: org.hibernate.dialect.Oracle10gDialect
-2022-09-20 15:03:36,773 INFO org.hibernate.engine.transaction.jta.platform.internal.JtaPlatformInitiator HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
-2022-09-20 15:03:36,788 INFO org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean Initialized JPA EntityManagerFactory for persistence unit 'default'
-2022-09-20 15:03:37,093 INFO org.quartz.impl.StdSchedulerFactory Using default implementation for ThreadExecutor
-2022-09-20 15:03:37,104 INFO org.quartz.core.SchedulerSignalerImpl Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
-2022-09-20 15:03:37,105 INFO org.quartz.core.QuartzScheduler Quartz Scheduler v.2.3.2 created.
-2022-09-20 15:03:37,105 INFO org.quartz.simpl.RAMJobStore RAMJobStore initialized.
-2022-09-20 15:03:37,106 INFO org.quartz.core.QuartzScheduler Scheduler meta-data: Quartz Scheduler (v2.3.2) 'quartzScheduler' with instanceId 'NON_CLUSTERED'
-  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
-  NOT STARTED.
-  Currently in standby mode.
-  Number of jobs executed: 0
-  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
-  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.
+Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
+2023-02-14 09:25:39,974 ERROR org.springframework.boot.SpringApplication Application run failed
+org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'paramsConfigs': Injection of autowired dependencies failed; nested exception is java.lang.IllegalArgumentException: Could not resolve placeholder 'params.maxRecord' in value "${params.maxRecord}"
+	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor.java:405)
+	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1431)
+	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:619)
+	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:542)
+	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:335)
+	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
+	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:333)
+	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
+	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:955)
+	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:918)
+	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:583)
+	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:734)
+	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:408)
+	at org.springframework.boot.SpringApplication.run(SpringApplication.java:308)
+	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:132)
+	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:99)
+	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:124)
+	at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:124)
+	at org.springframework.boot.test.autoconfigure.SpringBootDependencyInjectionTestExecutionListener.outputConditionEvaluationReport(SpringBootDependencyInjectionTestExecutionListener.java:53)
+	at org.springframework.boot.test.autoconfigure.SpringBootDependencyInjectionTestExecutionListener.prepareTestInstance(SpringBootDependencyInjectionTestExecutionListener.java:46)
+	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:248)
+	at org.springframework.test.context.junit.jupiter.SpringExtension.postProcessTestInstance(SpringExtension.java:138)
+	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$8(ClassBasedTestDescriptor.java:363)
+	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.executeAndMaskThrowable(ClassBasedTestDescriptor.java:368)
+	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$9(ClassBasedTestDescriptor.java:363)
+	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
+	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
+	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1384)
+	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:482)
+	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:472)
+	at java.util.stream.StreamSpliterators$WrappingSpliterator.forEachRemaining(StreamSpliterators.java:313)
+	at java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:743)
+	at java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:742)
+	at java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:647)
+	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.invokeTestInstancePostProcessors(ClassBasedTestDescriptor.java:362)
+	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$instantiateAndPostProcessTestInstance$6(ClassBasedTestDescriptor.java:283)
+	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
+	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.instantiateAndPostProcessTestInstance(ClassBasedTestDescriptor.java:282)
+	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$4(ClassBasedTestDescriptor.java:272)
+	at java.util.Optional.orElseGet(Optional.java:267)
+	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$5(ClassBasedTestDescriptor.java:271)
+	at org.junit.jupiter.engine.execution.TestInstancesProvider.getTestInstances(TestInstancesProvider.java:31)
+	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$prepare$0(TestMethodTestDescriptor.java:102)
+	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
+	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:101)
+	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:66)
+	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$prepare$2(NodeTestTask.java:123)
+	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
+	at org.junit.platform.engine.support.hierarchical.NodeTestTask.prepare(NodeTestTask.java:123)
+	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:90)
+	at java.util.ArrayList.forEach(ArrayList.java:1259)
+	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
+	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
+	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
+	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
+	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
+	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
+	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
+	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
+	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
+	at java.util.ArrayList.forEach(ArrayList.java:1259)
+	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
+	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
+	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
+	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
+	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
+	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
+	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
+	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
+	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
+	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
+	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
+	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
+	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:220)
+	at org.junit.platform.launcher.core.DefaultLauncher.lambda$execute$6(DefaultLauncher.java:188)
+	at org.junit.platform.launcher.core.DefaultLauncher.withInterceptedStreams(DefaultLauncher.java:202)
+	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:181)
+	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:128)
+	at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.invokeAllTests(JUnitPlatformProvider.java:150)
+	at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.invoke(JUnitPlatformProvider.java:124)
+	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:384)
+	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:345)
+	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:126)
+	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:418)
+Caused by: java.lang.IllegalArgumentException: Could not resolve placeholder 'params.maxRecord' in value "${params.maxRecord}"
+	at org.springframework.util.PropertyPlaceholderHelper.parseStringValue(PropertyPlaceholderHelper.java:180)
+	at org.springframework.util.PropertyPlaceholderHelper.replacePlaceholders(PropertyPlaceholderHelper.java:126)
+	at org.springframework.core.env.AbstractPropertyResolver.doResolvePlaceholders(AbstractPropertyResolver.java:239)
+	at org.springframework.core.env.AbstractPropertyResolver.resolveRequiredPlaceholders(AbstractPropertyResolver.java:210)
+	at org.springframework.context.support.PropertySourcesPlaceholderConfigurer.lambda$processProperties$0(PropertySourcesPlaceholderConfigurer.java:191)
+	at org.springframework.beans.factory.support.AbstractBeanFactory.resolveEmbeddedValue(AbstractBeanFactory.java:936)
+	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1332)
+	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1311)
+	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.resolveFieldValue(AutowiredAnnotationBeanPostProcessor.java:656)
+	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:639)
+	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:119)
+	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor.java:399)
+	... 83 common frames omitted
+2023-02-14 09:25:39,975 ERROR org.springframework.test.context.TestContextManager Caught exception while allowing TestExecutionListener [org.springframework.boot.test.autoconfigure.SpringBootDependencyInjectionTestExecutionListener@645aa696] to prepare test instance [vn.shb.service.ShbEmailHubApplicationTests@65987993]
+java.lang.IllegalStateException: Failed to load ApplicationContext
+	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:132)
+	at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:124)
+	at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.injectDependencies(DependencyInjectionTestExecutionListener.java:118)
+	at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.prepareTestInstance(DependencyInjectionTestExecutionListener.java:83)
+	at org.springframework.boot.test.autoconfigure.SpringBootDependencyInjectionTestExecutionListener.prepareTestInstance(SpringBootDependencyInjectionTestExecutionListener.java:43)
+	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:248)
+	at org.springframework.test.context.junit.jupiter.SpringExtension.postProcessTestInstance(SpringExtension.java:138)
+	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$8(ClassBasedTestDescriptor.java:363)
+	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.executeAndMaskThrowable(ClassBasedTestDescriptor.java:368)
+	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$9(ClassBasedTestDescriptor.java:363)
+	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
+	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
+	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1384)
+	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:482)
+	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:472)
+	at java.util.stream.StreamSpliterators$WrappingSpliterator.forEachRemaining(StreamSpliterators.java:313)
+	at java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:743)
+	at java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:742)
+	at java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:647)
+	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.invokeTestInstancePostProcessors(ClassBasedTestDescriptor.java:362)
+	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$instantiateAndPostProcessTestInstance$6(ClassBasedTestDescriptor.java:283)
+	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
+	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.instantiateAndPostProcessTestInstance(ClassBasedTestDescriptor.java:282)
+	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$4(ClassBasedTestDescriptor.java:272)
+	at java.util.Optional.orElseGet(Optional.java:267)
+	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$5(ClassBasedTestDescriptor.java:271)
+	at org.junit.jupiter.engine.execution.TestInstancesProvider.getTestInstances(TestInstancesProvider.java:31)
+	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$prepare$0(TestMethodTestDescriptor.java:102)
+	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
+	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:101)
+	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:66)
+	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$prepare$2(NodeTestTask.java:123)
+	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
+	at org.junit.platform.engine.support.hierarchical.NodeTestTask.prepare(NodeTestTask.java:123)
+	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:90)
+	at java.util.ArrayList.forEach(ArrayList.java:1259)
+	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
+	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
+	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
+	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
+	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
+	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
+	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
+	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
+	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
+	at java.util.ArrayList.forEach(ArrayList.java:1259)
+	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
+	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
+	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
+	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
+	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
+	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
+	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
+	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
+	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
+	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
+	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
+	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
+	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:220)
+	at org.junit.platform.launcher.core.DefaultLauncher.lambda$execute$6(DefaultLauncher.java:188)
+	at org.junit.platform.launcher.core.DefaultLauncher.withInterceptedStreams(DefaultLauncher.java:202)
+	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:181)
+	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:128)
+	at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.invokeAllTests(JUnitPlatformProvider.java:150)
+	at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.invoke(JUnitPlatformProvider.java:124)
+	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:384)
+	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:345)
+	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:126)
+	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:418)
+Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'paramsConfigs': Injection of autowired dependencies failed; nested exception is java.lang.IllegalArgumentException: Could not resolve placeholder 'params.maxRecord' in value "${params.maxRecord}"
+	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor.java:405)
+	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1431)
+	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:619)
+	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:542)
+	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:335)
+	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
+	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:333)
+	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
+	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:955)
+	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:918)
+	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:583)
+	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:734)
+	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:408)
+	at org.springframework.boot.SpringApplication.run(SpringApplication.java:308)
+	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:132)
+	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:99)
+	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:124)
+	... 68 common frames omitted
+Caused by: java.lang.IllegalArgumentException: Could not resolve placeholder 'params.maxRecord' in value "${params.maxRecord}"
+	at org.springframework.util.PropertyPlaceholderHelper.parseStringValue(PropertyPlaceholderHelper.java:180)
+	at org.springframework.util.PropertyPlaceholderHelper.replacePlaceholders(PropertyPlaceholderHelper.java:126)
+	at org.springframework.core.env.AbstractPropertyResolver.doResolvePlaceholders(AbstractPropertyResolver.java:239)
+	at org.springframework.core.env.AbstractPropertyResolver.resolveRequiredPlaceholders(AbstractPropertyResolver.java:210)
+	at org.springframework.context.support.PropertySourcesPlaceholderConfigurer.lambda$processProperties$0(PropertySourcesPlaceholderConfigurer.java:191)
+	at org.springframework.beans.factory.support.AbstractBeanFactory.resolveEmbeddedValue(AbstractBeanFactory.java:936)
+	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1332)
+	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1311)
+	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.resolveFieldValue(AutowiredAnnotationBeanPostProcessor.java:656)
+	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:639)
+	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:119)
+	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor.java:399)
+	... 84 common frames omitted
+2023-02-14 09:46:57,630 INFO vn.shb.service.ShbEmailHubApplicationTests Starting ShbEmailHubApplicationTests using Java 1.8.0_292 on TRINHNV with PID 27656 (started by tiennv3 in E:\TienNV4\Project\NoTanThu\shb-email-hub)
+2023-02-14 09:46:57,651 INFO vn.shb.service.ShbEmailHubApplicationTests No active profile set, falling back to 1 default profile: "default"
+2023-02-14 09:46:58,406 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate Bootstrapping Spring Data JPA repositories in DEFAULT mode.
+2023-02-14 09:46:58,505 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate Finished Spring Data repository scanning in 87 ms. Found 2 JPA repository interfaces.
+2023-02-14 09:46:59,596 INFO org.hibernate.jpa.internal.util.LogHelper HHH000204: Processing PersistenceUnitInfo [name: default]
+2023-02-14 09:46:59,807 INFO org.hibernate.Version HHH000412: Hibernate ORM core version 5.6.10.Final
+2023-02-14 09:47:00,431 INFO org.hibernate.annotations.common.Version HCANN000001: Hibernate Commons Annotations {5.1.2.Final}
+2023-02-14 09:47:04,567 INFO org.hibernate.dialect.Dialect HHH000400: Using dialect: org.hibernate.dialect.Oracle10gDialect
+2023-02-14 09:47:05,966 INFO org.hibernate.engine.transaction.jta.platform.internal.JtaPlatformInitiator HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
+2023-02-14 09:47:05,988 INFO org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean Initialized JPA EntityManagerFactory for persistence unit 'default'
+2023-02-14 09:47:06,003 WARN org.springframework.context.annotation.AnnotationConfigApplicationContext Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'paramsConfigs': Injection of autowired dependencies failed; nested exception is java.lang.IllegalArgumentException: Could not resolve placeholder 'params.maxRecord' in value "${params.maxRecord}"
+2023-02-14 09:47:06,004 INFO org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean Closing JPA EntityManagerFactory for persistence unit 'default'
+2023-02-14 09:47:06,072 INFO org.springframework.boot.autoconfigure.logging.ConditionEvaluationReportLoggingListener 
 
-2022-09-20 15:03:37,107 INFO org.quartz.impl.StdSchedulerFactory Quartz scheduler 'quartzScheduler' initialized from an externally provided properties instance.
-2022-09-20 15:03:37,107 INFO org.quartz.impl.StdSchedulerFactory Quartz scheduler version: 2.3.2
-2022-09-20 15:03:37,107 INFO org.quartz.core.QuartzScheduler JobFactory set to: org.springframework.scheduling.quartz.SpringBeanJobFactory@5799aa57
-2022-09-20 15:03:37,159 INFO org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer LiveReload server is running on port 35729
-2022-09-20 15:03:37,175 INFO org.springframework.scheduling.quartz.SchedulerFactoryBean Starting Quartz Scheduler now
-2022-09-20 15:03:37,175 INFO org.quartz.core.QuartzScheduler Scheduler quartzScheduler_$_NON_CLUSTERED started.
-2022-09-20 15:03:37,191 INFO vn.shb.service.ShbEmailHubApplication Started ShbEmailHubApplication in 4.543 seconds (JVM running for 6.315)
-2022-09-20 15:03:40,017 INFO vn.shb.service.jobs.HolidayByCurrencyJob <!-----------Start HolidayByCurrency Job --------------->
-2022-09-20 15:05:13,353 INFO org.quartz.core.QuartzScheduler Scheduler quartzScheduler_$_NON_CLUSTERED paused.
-2022-09-20 15:05:13,355 INFO org.springframework.scheduling.quartz.SchedulerFactoryBean Shutting down Quartz Scheduler
-2022-09-20 15:05:13,355 INFO org.quartz.core.QuartzScheduler Scheduler quartzScheduler_$_NON_CLUSTERED shutting down.
-2022-09-20 15:05:13,355 INFO org.quartz.core.QuartzScheduler Scheduler quartzScheduler_$_NON_CLUSTERED paused.
-2022-09-20 15:05:13,356 INFO org.quartz.core.QuartzScheduler Scheduler quartzScheduler_$_NON_CLUSTERED shutdown complete.
-2022-09-20 15:05:13,358 INFO org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean Closing JPA EntityManagerFactory for persistence unit 'default'
-2022-09-20 15:05:13,360 WARN org.hibernate.engine.jdbc.spi.SqlExceptionHelper SQL Error: 17002, SQLState: 08006
-2022-09-20 15:05:13,360 ERROR org.hibernate.engine.jdbc.spi.SqlExceptionHelper IO Error: Socket read interrupted
-2022-09-20 15:05:13,386 ERROR vn.shb.service.services.HolidayByCurrencyImpl {"message":"PKG_SHB_EMAIL_HUB.GET_HOLIDAY_BY_CURRENCY/org.hibernate.exception.JDBCConnectionException: Error extracting results from CallableStatement","detailMessage":"org.hibernate.exception.JDBCConnectionException: Error extracting results from CallableStatement","elements":[{"declaringClass":"org.hibernate.internal.ExceptionConverterImpl","methodName":"convert","fileName":"ExceptionConverterImpl.java","lineNumber":154},{"declaringClass":"org.hibernate.internal.ExceptionConverterImpl","methodName":"convert","fileName":"ExceptionConverterImpl.java","lineNumber":181},{"declaringClass":"org.hibernate.procedure.internal.ProcedureCallImpl","methodName":"getResultList","fileName":"ProcedureCallImpl.java","lineNumber":733},{"declaringClass":"vn.shb.service.services.HolidayByCurrencyImpl","methodName":"getListHolidayCCY","fileName":"HolidayByCurrencyImpl.java","lineNumber":32},{"declaringClass":"vn.shb.service.services.HolidayByCurrencyJobService","methodName":"run","fileName":"HolidayByCurrencyJobService.java","lineNumber":30},{"declaringClass":"vn.shb.service.jobs.HolidayByCurrencyJob","methodName":"execute","fileName":"HolidayByCurrencyJob.java","lineNumber":26},{"declaringClass":"sun.reflect.NativeMethodAccessorImpl","methodName":"invoke0","fileName":"NativeMethodAccessorImpl.java","lineNumber":-2},{"declaringClass":"sun.reflect.NativeMethodAccessorImpl","methodName":"invoke","fileName":"NativeMethodAccessorImpl.java","lineNumber":62},{"declaringClass":"sun.reflect.DelegatingMethodAccessorImpl","methodName":"invoke","fileName":"DelegatingMethodAccessorImpl.java","lineNumber":43},{"declaringClass":"java.lang.reflect.Method","methodName":"invoke","fileName":"Method.java","lineNumber":498},{"declaringClass":"org.springframework.scheduling.support.ScheduledMethodRunnable","methodName":"run","fileName":"ScheduledMethodRunnable.java","lineNumber":84},{"declaringClass":"org.springframework.scheduling.support.DelegatingErrorHandlingRunnable","methodName":"run","fileName":"DelegatingErrorHandlingRunnable.java","lineNumber":54},{"declaringClass":"org.springframework.scheduling.concurrent.ReschedulingRunnable","methodName":"run","fileName":"ReschedulingRunnable.java","lineNumber":95},{"declaringClass":"java.util.concurrent.Executors$RunnableAdapter","methodName":"call","fileName":"Executors.java","lineNumber":511},{"declaringClass":"java.util.concurrent.FutureTask","methodName":"run$$$capture","fileName":"FutureTask.java","lineNumber":266},{"declaringClass":"java.util.concurrent.FutureTask","methodName":"run","fileName":"FutureTask.java","lineNumber":-1},{"declaringClass":"java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask","methodName":"access$201","fileName":"ScheduledThreadPoolExecutor.java","lineNumber":180},{"declaringClass":"java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask","methodName":"run","fileName":"ScheduledThreadPoolExecutor.java","lineNumber":293},{"declaringClass":"java.util.concurrent.ThreadPoolExecutor","methodName":"runWorker","fileName":"ThreadPoolExecutor.java","lineNumber":1149},{"declaringClass":"java.util.concurrent.ThreadPoolExecutor$Worker","methodName":"run","fileName":"ThreadPoolExecutor.java","lineNumber":624},{"declaringClass":"java.lang.Thread","methodName":"run","fileName":"Thread.java","lineNumber":748}]}
-2022-09-20 15:14:24,134 INFO vn.shb.service.ShbEmailHubApplication Starting ShbEmailHubApplication using Java 1.8.0_191 on LINHDK1 with PID 47040 (D:\Projects\shb-email-hub\target\classes started by linhdk1 in D:\Projects\shb-email-hub)
-2022-09-20 15:14:24,134 INFO vn.shb.service.ShbEmailHubApplication No active profile set, falling back to 1 default profile: "default"
-2022-09-20 15:14:24,192 INFO org.springframework.boot.devtools.restart.ChangeableUrls The Class-Path manifest attribute in C:\Users\linhdk1\.m2\repository\com\oracle\database\jdbc\ojdbc8\21.1.0.0\ojdbc8-21.1.0.0.jar referenced one or more files that do not exist: file:/C:/Users/linhdk1/.m2/repository/com/oracle/database/jdbc/ojdbc8/21.1.0.0/oraclepki.jar
-2022-09-20 15:14:24,192 INFO org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
-2022-09-20 15:14:24,769 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate Bootstrapping Spring Data JPA repositories in DEFAULT mode.
-2022-09-20 15:14:24,791 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate Finished Spring Data repository scanning in 11 ms. Found 0 JPA repository interfaces.
-2022-09-20 15:14:25,204 INFO org.hibernate.jpa.internal.util.LogHelper HHH000204: Processing PersistenceUnitInfo [name: default]
-2022-09-20 15:14:25,259 INFO org.hibernate.Version HHH000412: Hibernate ORM core version 5.6.10.Final
-2022-09-20 15:14:25,435 INFO org.hibernate.annotations.common.Version HCANN000001: Hibernate Commons Annotations {5.1.2.Final}
-2022-09-20 15:14:26,841 INFO org.hibernate.dialect.Dialect HHH000400: Using dialect: org.hibernate.dialect.Oracle10gDialect
-2022-09-20 15:14:27,663 INFO org.hibernate.engine.transaction.jta.platform.internal.JtaPlatformInitiator HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
-2022-09-20 15:14:27,675 INFO org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean Initialized JPA EntityManagerFactory for persistence unit 'default'
-2022-09-20 15:14:27,997 INFO org.quartz.impl.StdSchedulerFactory Using default implementation for ThreadExecutor
-2022-09-20 15:14:28,011 INFO org.quartz.core.SchedulerSignalerImpl Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
-2022-09-20 15:14:28,011 INFO org.quartz.core.QuartzScheduler Quartz Scheduler v.2.3.2 created.
-2022-09-20 15:14:28,012 INFO org.quartz.simpl.RAMJobStore RAMJobStore initialized.
-2022-09-20 15:14:28,013 INFO org.quartz.core.QuartzScheduler Scheduler meta-data: Quartz Scheduler (v2.3.2) 'quartzScheduler' with instanceId 'NON_CLUSTERED'
-  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
-  NOT STARTED.
-  Currently in standby mode.
-  Number of jobs executed: 0
-  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
-  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.
+Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
+2023-02-14 09:47:06,110 ERROR org.springframework.boot.SpringApplication Application run failed
+org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'paramsConfigs': Injection of autowired dependencies failed; nested exception is java.lang.IllegalArgumentException: Could not resolve placeholder 'params.maxRecord' in value "${params.maxRecord}"
+	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor.java:405)
+	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1431)
+	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:619)
+	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:542)
+	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:335)
+	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
+	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:333)
+	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
+	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:955)
+	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:918)
+	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:583)
+	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:734)
+	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:408)
+	at org.springframework.boot.SpringApplication.run(SpringApplication.java:308)
+	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:132)
+	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:99)
+	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:124)
+	at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:124)
+	at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.injectDependencies(DependencyInjectionTestExecutionListener.java:118)
+	at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.prepareTestInstance(DependencyInjectionTestExecutionListener.java:83)
+	at org.springframework.boot.test.autoconfigure.SpringBootDependencyInjectionTestExecutionListener.prepareTestInstance(SpringBootDependencyInjectionTestExecutionListener.java:43)
+	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:248)
+	at org.springframework.test.context.junit.jupiter.SpringExtension.postProcessTestInstance(SpringExtension.java:138)
+	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$8(ClassBasedTestDescriptor.java:363)
+	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.executeAndMaskThrowable(ClassBasedTestDescriptor.java:368)
+	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$9(ClassBasedTestDescriptor.java:363)
+	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
+	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
+	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1384)
+	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:482)
+	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:472)
+	at java.util.stream.StreamSpliterators$WrappingSpliterator.forEachRemaining(StreamSpliterators.java:313)
+	at java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:743)
+	at java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:742)
+	at java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:647)
+	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.invokeTestInstancePostProcessors(ClassBasedTestDescriptor.java:362)
+	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$instantiateAndPostProcessTestInstance$6(ClassBasedTestDescriptor.java:283)
+	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
+	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.instantiateAndPostProcessTestInstance(ClassBasedTestDescriptor.java:282)
+	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$4(ClassBasedTestDescriptor.java:272)
+	at java.util.Optional.orElseGet(Optional.java:267)
+	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$5(ClassBasedTestDescriptor.java:271)
+	at org.junit.jupiter.engine.execution.TestInstancesProvider.getTestInstances(TestInstancesProvider.java:31)
+	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$prepare$0(TestMethodTestDescriptor.java:102)
+	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
+	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:101)
+	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:66)
+	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$prepare$2(NodeTestTask.java:123)
+	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
+	at org.junit.platform.engine.support.hierarchical.NodeTestTask.prepare(NodeTestTask.java:123)
+	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:90)
+	at java.util.ArrayList.forEach(ArrayList.java:1259)
+	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
+	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
+	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
+	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
+	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
+	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
+	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
+	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
+	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
+	at java.util.ArrayList.forEach(ArrayList.java:1259)
+	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
+	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
+	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
+	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
+	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
+	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
+	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
+	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
+	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
+	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
+	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
+	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
+	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:220)
+	at org.junit.platform.launcher.core.DefaultLauncher.lambda$execute$6(DefaultLauncher.java:188)
+	at org.junit.platform.launcher.core.DefaultLauncher.withInterceptedStreams(DefaultLauncher.java:202)
+	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:181)
+	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:128)
+	at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.invokeAllTests(JUnitPlatformProvider.java:150)
+	at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.invoke(JUnitPlatformProvider.java:124)
+	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:384)
+	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:345)
+	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:126)
+	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:418)
+Caused by: java.lang.IllegalArgumentException: Could not resolve placeholder 'params.maxRecord' in value "${params.maxRecord}"
+	at org.springframework.util.PropertyPlaceholderHelper.parseStringValue(PropertyPlaceholderHelper.java:180)
+	at org.springframework.util.PropertyPlaceholderHelper.replacePlaceholders(PropertyPlaceholderHelper.java:126)
+	at org.springframework.core.env.AbstractPropertyResolver.doResolvePlaceholders(AbstractPropertyResolver.java:239)
+	at org.springframework.core.env.AbstractPropertyResolver.resolveRequiredPlaceholders(AbstractPropertyResolver.java:210)
+	at org.springframework.context.support.PropertySourcesPlaceholderConfigurer.lambda$processProperties$0(PropertySourcesPlaceholderConfigurer.java:191)
+	at org.springframework.beans.factory.support.AbstractBeanFactory.resolveEmbeddedValue(AbstractBeanFactory.java:936)
+	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1332)
+	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1311)
+	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.resolveFieldValue(AutowiredAnnotationBeanPostProcessor.java:656)
+	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:639)
+	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:119)
+	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor.java:399)
+	... 84 common frames omitted
+2023-02-14 09:47:06,181 INFO vn.shb.service.ShbEmailHubApplicationTests Starting ShbEmailHubApplicationTests using Java 1.8.0_292 on TRINHNV with PID 27656 (started by tiennv3 in E:\TienNV4\Project\NoTanThu\shb-email-hub)
+2023-02-14 09:47:06,181 INFO vn.shb.service.ShbEmailHubApplicationTests No active profile set, falling back to 1 default profile: "default"
+2023-02-14 09:47:06,598 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate Bootstrapping Spring Data JPA repositories in DEFAULT mode.
+2023-02-14 09:47:06,650 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate Finished Spring Data repository scanning in 51 ms. Found 2 JPA repository interfaces.
+2023-02-14 09:47:06,856 INFO org.hibernate.jpa.internal.util.LogHelper HHH000204: Processing PersistenceUnitInfo [name: default]
+2023-02-14 09:47:07,028 INFO org.hibernate.dialect.Dialect HHH000400: Using dialect: org.hibernate.dialect.Oracle10gDialect
+2023-02-14 09:47:07,262 INFO org.hibernate.engine.transaction.jta.platform.internal.JtaPlatformInitiator HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
+2023-02-14 09:47:07,262 INFO org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean Initialized JPA EntityManagerFactory for persistence unit 'default'
+2023-02-14 09:47:07,271 WARN org.springframework.context.annotation.AnnotationConfigApplicationContext Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'paramsConfigs': Injection of autowired dependencies failed; nested exception is java.lang.IllegalArgumentException: Could not resolve placeholder 'params.maxRecord' in value "${params.maxRecord}"
+2023-02-14 09:47:07,271 INFO org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean Closing JPA EntityManagerFactory for persistence unit 'default'
+2023-02-14 09:47:07,292 INFO org.springframework.boot.autoconfigure.logging.ConditionEvaluationReportLoggingListener 
 
-2022-09-20 15:14:28,013 INFO org.quartz.impl.StdSchedulerFactory Quartz scheduler 'quartzScheduler' initialized from an externally provided properties instance.
-2022-09-20 15:14:28,013 INFO org.quartz.impl.StdSchedulerFactory Quartz scheduler version: 2.3.2
-2022-09-20 15:14:28,013 INFO org.quartz.core.QuartzScheduler JobFactory set to: org.springframework.scheduling.quartz.SpringBeanJobFactory@16db778
-2022-09-20 15:14:28,061 INFO org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer LiveReload server is running on port 35729
-2022-09-20 15:14:28,077 INFO org.springframework.scheduling.quartz.SchedulerFactoryBean Starting Quartz Scheduler now
-2022-09-20 15:14:28,077 INFO org.quartz.core.QuartzScheduler Scheduler quartzScheduler_$_NON_CLUSTERED started.
-2022-09-20 15:14:28,093 INFO vn.shb.service.ShbEmailHubApplication Started ShbEmailHubApplication in 4.646 seconds (JVM running for 6.453)
-2022-09-20 15:14:30,015 INFO vn.shb.service.jobs.HolidayByCurrencyJob <!-----------Start HolidayByCurrency Job --------------->
-2022-09-20 15:14:54,304 INFO org.quartz.core.QuartzScheduler Scheduler quartzScheduler_$_NON_CLUSTERED paused.
-2022-09-20 15:14:54,306 INFO org.springframework.scheduling.quartz.SchedulerFactoryBean Shutting down Quartz Scheduler
-2022-09-20 15:14:54,306 INFO org.quartz.core.QuartzScheduler Scheduler quartzScheduler_$_NON_CLUSTERED shutting down.
-2022-09-20 15:14:54,307 INFO org.quartz.core.QuartzScheduler Scheduler quartzScheduler_$_NON_CLUSTERED paused.
-2022-09-20 15:14:54,307 INFO org.quartz.core.QuartzScheduler Scheduler quartzScheduler_$_NON_CLUSTERED shutdown complete.
-2022-09-20 15:14:54,310 INFO org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean Closing JPA EntityManagerFactory for persistence unit 'default'
+Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
+2023-02-14 09:47:07,296 ERROR org.springframework.boot.SpringApplication Application run failed
+org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'paramsConfigs': Injection of autowired dependencies failed; nested exception is java.lang.IllegalArgumentException: Could not resolve placeholder 'params.maxRecord' in value "${params.maxRecord}"
+	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor.java:405)
+	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1431)
+	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:619)
+	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:542)
+	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:335)
+	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
+	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:333)
+	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
+	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:955)
+	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:918)
+	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:583)
+	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:734)
+	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:408)
+	at org.springframework.boot.SpringApplication.run(SpringApplication.java:308)
+	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:132)
+	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:99)
+	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:124)
+	at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:124)
+	at org.springframework.boot.test.autoconfigure.SpringBootDependencyInjectionTestExecutionListener.outputConditionEvaluationReport(SpringBootDependencyInjectionTestExecutionListener.java:53)
+	at org.springframework.boot.test.autoconfigure.SpringBootDependencyInjectionTestExecutionListener.prepareTestInstance(SpringBootDependencyInjectionTestExecutionListener.java:46)
+	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:248)
+	at org.springframework.test.context.junit.jupiter.SpringExtension.postProcessTestInstance(SpringExtension.java:138)
+	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$8(ClassBasedTestDescriptor.java:363)
+	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.executeAndMaskThrowable(ClassBasedTestDescriptor.java:368)
+	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$9(ClassBasedTestDescriptor.java:363)
+	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
+	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
+	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1384)
+	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:482)
+	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:472)
+	at java.util.stream.StreamSpliterators$WrappingSpliterator.forEachRemaining(StreamSpliterators.java:313)
+	at java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:743)
+	at java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:742)
+	at java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:647)
+	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.invokeTestInstancePostProcessors(ClassBasedTestDescriptor.java:362)
+	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$instantiateAndPostProcessTestInstance$6(ClassBasedTestDescriptor.java:283)
+	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
+	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.instantiateAndPostProcessTestInstance(ClassBasedTestDescriptor.java:282)
+	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$4(ClassBasedTestDescriptor.java:272)
+	at java.util.Optional.orElseGet(Optional.java:267)
+	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$5(ClassBasedTestDescriptor.java:271)
+	at org.junit.jupiter.engine.execution.TestInstancesProvider.getTestInstances(TestInstancesProvider.java:31)
+	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$prepare$0(TestMethodTestDescriptor.java:102)
+	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
+	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:101)
+	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:66)
+	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$prepare$2(NodeTestTask.java:123)
+	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
+	at org.junit.platform.engine.support.hierarchical.NodeTestTask.prepare(NodeTestTask.java:123)
+	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:90)
+	at java.util.ArrayList.forEach(ArrayList.java:1259)
+	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
+	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
+	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
+	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
+	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
+	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
+	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
+	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
+	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
+	at java.util.ArrayList.forEach(ArrayList.java:1259)
+	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
+	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
+	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
+	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
+	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
+	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
+	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
+	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
+	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
+	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
+	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
+	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
+	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:220)
+	at org.junit.platform.launcher.core.DefaultLauncher.lambda$execute$6(DefaultLauncher.java:188)
+	at org.junit.platform.launcher.core.DefaultLauncher.withInterceptedStreams(DefaultLauncher.java:202)
+	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:181)
+	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:128)
+	at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.invokeAllTests(JUnitPlatformProvider.java:150)
+	at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.invoke(JUnitPlatformProvider.java:124)
+	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:384)
+	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:345)
+	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:126)
+	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:418)
+Caused by: java.lang.IllegalArgumentException: Could not resolve placeholder 'params.maxRecord' in value "${params.maxRecord}"
+	at org.springframework.util.PropertyPlaceholderHelper.parseStringValue(PropertyPlaceholderHelper.java:180)
+	at org.springframework.util.PropertyPlaceholderHelper.replacePlaceholders(PropertyPlaceholderHelper.java:126)
+	at org.springframework.core.env.AbstractPropertyResolver.doResolvePlaceholders(AbstractPropertyResolver.java:239)
+	at org.springframework.core.env.AbstractPropertyResolver.resolveRequiredPlaceholders(AbstractPropertyResolver.java:210)
+	at org.springframework.context.support.PropertySourcesPlaceholderConfigurer.lambda$processProperties$0(PropertySourcesPlaceholderConfigurer.java:191)
+	at org.springframework.beans.factory.support.AbstractBeanFactory.resolveEmbeddedValue(AbstractBeanFactory.java:936)
+	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1332)
+	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1311)
+	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.resolveFieldValue(AutowiredAnnotationBeanPostProcessor.java:656)
+	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:639)
+	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:119)
+	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor.java:399)
+	... 83 common frames omitted
+2023-02-14 09:47:07,298 ERROR org.springframework.test.context.TestContextManager Caught exception while allowing TestExecutionListener [org.springframework.boot.test.autoconfigure.SpringBootDependencyInjectionTestExecutionListener@645aa696] to prepare test instance [vn.shb.service.ShbEmailHubApplicationTests@65987993]
+java.lang.IllegalStateException: Failed to load ApplicationContext
+	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:132)
+	at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:124)
+	at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.injectDependencies(DependencyInjectionTestExecutionListener.java:118)
+	at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.prepareTestInstance(DependencyInjectionTestExecutionListener.java:83)
+	at org.springframework.boot.test.autoconfigure.SpringBootDependencyInjectionTestExecutionListener.prepareTestInstance(SpringBootDependencyInjectionTestExecutionListener.java:43)
+	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:248)
+	at org.springframework.test.context.junit.jupiter.SpringExtension.postProcessTestInstance(SpringExtension.java:138)
+	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$8(ClassBasedTestDescriptor.java:363)
+	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.executeAndMaskThrowable(ClassBasedTestDescriptor.java:368)
+	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$9(ClassBasedTestDescriptor.java:363)
+	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
+	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
+	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1384)
+	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:482)
+	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:472)
+	at java.util.stream.StreamSpliterators$WrappingSpliterator.forEachRemaining(StreamSpliterators.java:313)
+	at java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:743)
+	at java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:742)
+	at java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:647)
+	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.invokeTestInstancePostProcessors(ClassBasedTestDescriptor.java:362)
+	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$instantiateAndPostProcessTestInstance$6(ClassBasedTestDescriptor.java:283)
+	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
+	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.instantiateAndPostProcessTestInstance(ClassBasedTestDescriptor.java:282)
+	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$4(ClassBasedTestDescriptor.java:272)
+	at java.util.Optional.orElseGet(Optional.java:267)
+	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$5(ClassBasedTestDescriptor.java:271)
+	at org.junit.jupiter.engine.execution.TestInstancesProvider.getTestInstances(TestInstancesProvider.java:31)
+	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$prepare$0(TestMethodTestDescriptor.java:102)
+	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
+	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:101)
+	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:66)
+	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$prepare$2(NodeTestTask.java:123)
+	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
+	at org.junit.platform.engine.support.hierarchical.NodeTestTask.prepare(NodeTestTask.java:123)
+	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:90)
+	at java.util.ArrayList.forEach(ArrayList.java:1259)
+	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
+	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
+	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
+	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
+	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
+	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
+	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
+	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
+	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
+	at java.util.ArrayList.forEach(ArrayList.java:1259)
+	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
+	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
+	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
+	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
+	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
+	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
+	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
+	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
+	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
+	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
+	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
+	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
+	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:220)
+	at org.junit.platform.launcher.core.DefaultLauncher.lambda$execute$6(DefaultLauncher.java:188)
+	at org.junit.platform.launcher.core.DefaultLauncher.withInterceptedStreams(DefaultLauncher.java:202)
+	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:181)
+	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:128)
+	at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.invokeAllTests(JUnitPlatformProvider.java:150)
+	at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.invoke(JUnitPlatformProvider.java:124)
+	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:384)
+	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:345)
+	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:126)
+	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:418)
+Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'paramsConfigs': Injection of autowired dependencies failed; nested exception is java.lang.IllegalArgumentException: Could not resolve placeholder 'params.maxRecord' in value "${params.maxRecord}"
+	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor.java:405)
+	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1431)
+	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:619)
+	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:542)
+	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:335)
+	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
+	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:333)
+	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
+	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:955)
+	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:918)
+	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:583)
+	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:734)
+	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:408)
+	at org.springframework.boot.SpringApplication.run(SpringApplication.java:308)
+	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:132)
+	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:99)
+	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:124)
+	... 68 common frames omitted
+Caused by: java.lang.IllegalArgumentException: Could not resolve placeholder 'params.maxRecord' in value "${params.maxRecord}"
+	at org.springframework.util.PropertyPlaceholderHelper.parseStringValue(PropertyPlaceholderHelper.java:180)
+	at org.springframework.util.PropertyPlaceholderHelper.replacePlaceholders(PropertyPlaceholderHelper.java:126)
+	at org.springframework.core.env.AbstractPropertyResolver.doResolvePlaceholders(AbstractPropertyResolver.java:239)
+	at org.springframework.core.env.AbstractPropertyResolver.resolveRequiredPlaceholders(AbstractPropertyResolver.java:210)
+	at org.springframework.context.support.PropertySourcesPlaceholderConfigurer.lambda$processProperties$0(PropertySourcesPlaceholderConfigurer.java:191)
+	at org.springframework.beans.factory.support.AbstractBeanFactory.resolveEmbeddedValue(AbstractBeanFactory.java:936)
+	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1332)
+	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1311)
+	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.resolveFieldValue(AutowiredAnnotationBeanPostProcessor.java:656)
+	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:639)
+	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:119)
+	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor.java:399)
+	... 84 common frames omitted
diff --git a/pom.xml b/pom.xml
index ecbcdce..be1d198 100644
--- a/pom.xml
+++ b/pom.xml
@@ -1,6 +1,6 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
-  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
+         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
   <modelVersion>4.0.0</modelVersion>
   <parent>
     <groupId>org.springframework.boot</groupId>
@@ -31,11 +31,11 @@
       <scope>runtime</scope>
       <optional>true</optional>
     </dependency>
-   <!-- <dependency>
-      <groupId>com.oracle.database.jdbc</groupId>
-      <artifactId>ojdbc8</artifactId>
-      <scope>21.1.0.0</scope>
-    </dependency>-->
+    <!-- <dependency>
+       <groupId>com.oracle.database.jdbc</groupId>
+       <artifactId>ojdbc8</artifactId>
+       <scope>21.1.0.0</scope>
+     </dependency>-->
     <dependency>
       <groupId>com.oracle.database.jdbc</groupId>
       <artifactId>ojdbc8</artifactId>
@@ -97,6 +97,16 @@
       <artifactId>jackson-annotations</artifactId>
       <version>2.13.2</version>
     </dependency>
+    <dependency>
+      <groupId>org.springframework.boot</groupId>
+      <artifactId>spring-boot-starter-mail</artifactId>
+    </dependency>
+    <dependency>
+      <groupId>com.sun.mail</groupId>
+      <artifactId>jakarta.mail</artifactId>
+      <version>1.6.7</version>
+    </dependency>
+
   </dependencies>
   <build>
     <plugins>
@@ -112,6 +122,12 @@
           </excludes>
         </configuration>
       </plugin>
+
+      <plugin>
+        <groupId>org.apache.maven.plugins</groupId>
+        <artifactId>maven-surefire-plugin</artifactId>
+        <version>2.19.1</version>
+      </plugin>
     </plugins>
   </build>
 
diff --git a/src/main/java/vn/shb/service/Test.java b/src/main/java/vn/shb/service/Test.java
new file mode 100644
index 0000000..02d2dea
--- /dev/null
+++ b/src/main/java/vn/shb/service/Test.java
@@ -0,0 +1,14 @@
+package vn.shb.service;
+
+import java.text.DecimalFormat;
+import java.text.NumberFormat;
+import java.util.Locale;
+
+public class Test {
+
+    public static void main(String[] args) {
+        Locale locale = new Locale("vi", "VI");
+        DecimalFormat nf = (DecimalFormat) NumberFormat.getNumberInstance(Locale.GERMANY);
+        System.out.printf(nf.format(2669215L));
+    }
+}
diff --git a/src/main/java/vn/shb/service/configs/AES.java b/src/main/java/vn/shb/service/configs/AES.java
index 360a937..c4093df 100644
--- a/src/main/java/vn/shb/service/configs/AES.java
+++ b/src/main/java/vn/shb/service/configs/AES.java
@@ -17,9 +17,9 @@ import org.springframework.stereotype.Service;
 @Slf4j
 @Service
 public class AES {
-    private SecretKeySpec secretKey;
+    private static SecretKeySpec secretKey;
 
-    private void setKey() throws NoSuchAlgorithmException {
+    private static void setKey() throws NoSuchAlgorithmException {
         String myKey = "LINHDK_VODOI";
         MessageDigest sha;
         try {
@@ -29,7 +29,7 @@ public class AES {
             key = Arrays.copyOf(key, 16);
             secretKey = new SecretKeySpec(key, "AES");
         } catch (NoSuchAlgorithmException e) {
-           throw e;
+            throw e;
         }
     }
     public  String encrypt(final String strToEncrypt) throws NoSuchPaddingException, IllegalBlockSizeException, NoSuchAlgorithmException, BadPaddingException, InvalidKeyException {
@@ -38,18 +38,18 @@ public class AES {
             Cipher cipher = Cipher.getInstance("AES/ECB/PKCS5Padding");
             cipher.init(Cipher.ENCRYPT_MODE, secretKey);
             return Base64.getEncoder()
-                .encodeToString(cipher.doFinal(strToEncrypt.getBytes(StandardCharsets.UTF_8)));
+                    .encodeToString(cipher.doFinal(strToEncrypt.getBytes(StandardCharsets.UTF_8)));
         } catch (Exception e) {
             throw e;
         }
     }
-    public String decrypt(final String strToDecrypt) throws NoSuchPaddingException, IllegalBlockSizeException, NoSuchAlgorithmException, BadPaddingException, InvalidKeyException {
+    public static String decrypt(final String strToDecrypt) throws NoSuchPaddingException, IllegalBlockSizeException, NoSuchAlgorithmException, BadPaddingException, InvalidKeyException {
         try {
             setKey();
             Cipher cipher = Cipher.getInstance("AES/ECB/PKCS5PADDING");
             cipher.init(Cipher.DECRYPT_MODE, secretKey);
             return new String(cipher.doFinal(Base64.getDecoder()
-                .decode(strToDecrypt)));
+                    .decode(strToDecrypt)));
         } catch (Exception e) {
             throw e;
         }
diff --git a/src/main/java/vn/shb/service/configs/ConfigConts.java b/src/main/java/vn/shb/service/configs/ConfigConts.java
index 0ace42e..698d4ab 100644
--- a/src/main/java/vn/shb/service/configs/ConfigConts.java
+++ b/src/main/java/vn/shb/service/configs/ConfigConts.java
@@ -6,4 +6,7 @@ public class ConfigConts {
     public static final String KHCN_TYPE = "KHCN";
     public static final String JOB_ENABLE = "ENABLE";
 
+
+
+
 }
diff --git a/src/main/java/vn/shb/service/configs/DataConfigs.java b/src/main/java/vn/shb/service/configs/DataConfigs.java
index 4ae0ded..b3d06c8 100644
--- a/src/main/java/vn/shb/service/configs/DataConfigs.java
+++ b/src/main/java/vn/shb/service/configs/DataConfigs.java
@@ -1,23 +1,22 @@
 package vn.shb.service.configs;
 
-import com.zaxxer.hikari.HikariConfig;
 import com.zaxxer.hikari.HikariDataSource;
 import java.security.InvalidKeyException;
 import java.security.NoSuchAlgorithmException;
-import java.util.Properties;
 import javax.crypto.BadPaddingException;
 import javax.crypto.IllegalBlockSizeException;
 import javax.crypto.NoSuchPaddingException;
 import javax.persistence.EntityManagerFactory;
+import org.hibernate.jpa.HibernatePersistenceProvider;
 import org.springframework.beans.factory.annotation.Value;
-import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
-import org.springframework.context.annotation.Primary;
+import org.springframework.data.jpa.repository.config.EnableJpaRepositories;
 import org.springframework.jdbc.core.JdbcTemplate;
 import org.springframework.orm.jpa.JpaTransactionManager;
 import org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean;
 import org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter;
+import org.springframework.transaction.annotation.EnableTransactionManagement;
 
 @Configuration
 public class DataConfigs {
@@ -30,7 +29,6 @@ public class DataConfigs {
     private String password;
     @Value("${db.encrypt}")
     private boolean passwordEcrypt;
-
     private final AES aes;
 
     public DataConfigs(AES aes) {
@@ -38,7 +36,7 @@ public class DataConfigs {
     }
 
     //@Bean(destroyMethod = "close")
-    @Bean
+    @Bean(destroyMethod = "close")
     public HikariDataSource dataSource() throws NoSuchPaddingException, IllegalBlockSizeException, NoSuchAlgorithmException, BadPaddingException, InvalidKeyException {
         final HikariDataSource ds = new HikariDataSource();
         ds.setDriverClassName("oracle.jdbc.OracleDriver");
@@ -50,25 +48,30 @@ public class DataConfigs {
             ds.setPassword(password);
         }
         //ds.addDataSourceProperty("autoReconnect", true);
-        ds.addDataSourceProperty("cachePrepStmts", true);
+       /* ds.addDataSourceProperty("cachePrepStmts", true);
         ds.addDataSourceProperty("prepStmtCacheSize", 250);
         ds.addDataSourceProperty("prepStmtCacheSqlLimit", 2048);
         ds.addDataSourceProperty("useServerPrepStmts", true);
-        ds.addDataSourceProperty("cacheResultSetMetadata", true);
+        ds.addDataSourceProperty("cacheResultSetMetadata", true);*/
 
         ds.setMaximumPoolSize(20);
         ds.setConnectionTimeout(30000);
         return ds;
     }
-    @Bean
+    @Bean(name="entityManagerFactory")
     public LocalContainerEntityManagerFactoryBean localEntityManagerFactory(HikariDataSource dataSource) {
         final LocalContainerEntityManagerFactoryBean entityManagerFactoryBean = new LocalContainerEntityManagerFactoryBean();
         entityManagerFactoryBean.setDataSource(dataSource);
-        entityManagerFactoryBean.setJpaVendorAdapter(new HibernateJpaVendorAdapter());
+        entityManagerFactoryBean.setPersistenceProviderClass(HibernatePersistenceProvider.class);
+        entityManagerFactoryBean.setJpaVendorAdapter(vendorAdaptor());
         entityManagerFactoryBean.setPackagesToScan("vn.shb.service");
         return entityManagerFactoryBean;
     }
-
+    private HibernateJpaVendorAdapter vendorAdaptor() {
+        HibernateJpaVendorAdapter vendorAdapter = new HibernateJpaVendorAdapter();
+        //vendorAdapter.setShowSql(true);
+        return vendorAdapter;
+    }
     @Bean
     public JpaTransactionManager transactionManager(EntityManagerFactory entityManagerFactory) {
         final JpaTransactionManager transactionManager = new JpaTransactionManager();
@@ -80,4 +83,5 @@ public class DataConfigs {
     public JdbcTemplate jdbcTemplate(HikariDataSource dataSource) {
         return new JdbcTemplate(dataSource);
     }
+
 }
diff --git a/src/main/java/vn/shb/service/configs/EmailTemplateCode.java b/src/main/java/vn/shb/service/configs/EmailTemplateCode.java
index 8f5766b..f932e8d 100644
--- a/src/main/java/vn/shb/service/configs/EmailTemplateCode.java
+++ b/src/main/java/vn/shb/service/configs/EmailTemplateCode.java
@@ -2,7 +2,9 @@ package vn.shb.service.configs;
 
 public enum EmailTemplateCode {
     HTLS_TEMPLATE("1","HTLS_TEMPLATE"),
-    HOLIDAY_BY_CURRENCY("2","HOLIDAY_BY_CURRENCY");
+    HTLS_TEMPLATE_CN("3","HTLS_TEMPLATE_CN"),
+    HOLIDAY_BY_CURRENCY("2","HOLIDAY_BY_CURRENCY"),
+    CASA_NGUON_VON("4","CASA_NGUON_VON");
     private String code;
     private String text;
 
diff --git a/src/main/java/vn/shb/service/configs/ParamsConfigs.java b/src/main/java/vn/shb/service/configs/ParamsConfigs.java
index b195198..f61135d 100644
--- a/src/main/java/vn/shb/service/configs/ParamsConfigs.java
+++ b/src/main/java/vn/shb/service/configs/ParamsConfigs.java
@@ -17,6 +17,9 @@ public final class ParamsConfigs {
     @Value("${params.queueCapacity}")
     private int queueCapacity;
 
+    @Value("${params.maxRecord}")
+    private int maxRecord;
+
     @Value("${api.url}")
     private String apiUrl;
 
@@ -46,4 +49,16 @@ public final class ParamsConfigs {
 
     @Value("${tasks.casa_nguonvon}")
     private String casa_nguonvon_status;
+
+    @Value("${tasks.ban_chinh_ban_cheo}")
+    private String ban_chinh_ban_cheo;
+
+    @Value("${tasks.shb_email_job}")
+    private String shb_email_job;
+
+    @Value("${environmentTest.test.testDate}")
+    private String testDate;
+
+    @Value("${environmentTest.test.testDateCasa}")
+    private String testDateCasa;
 }
diff --git a/src/main/java/vn/shb/service/entities/BanChinhBanCheo.java b/src/main/java/vn/shb/service/entities/BanChinhBanCheo.java
new file mode 100644
index 0000000..6a895d7
--- /dev/null
+++ b/src/main/java/vn/shb/service/entities/BanChinhBanCheo.java
@@ -0,0 +1,58 @@
+package vn.shb.service.entities;
+
+import javax.persistence.Column;
+import javax.persistence.Entity;
+import javax.persistence.Id;
+import javax.persistence.Table;
+import java.math.BigDecimal;
+
+@Entity
+public class BanChinhBanCheo {
+    @Id
+    private Long ID;
+    private String REF;
+    private String CSL_EMAIL_ADDRESS;
+    private String CSL_EMAIL_CONTENT;
+    private String CSL_EMAIL_TITLE;
+
+    public Long getID() {
+        return ID;
+    }
+
+    public void setID(Long ID) {
+        this.ID = ID;
+    }
+
+    public String getCSL_EMAIL_ADDRESS() {
+        return CSL_EMAIL_ADDRESS;
+    }
+
+    public void setCSL_EMAIL_ADDRESS(String CSL_EMAIL_ADDRESS) {
+        this.CSL_EMAIL_ADDRESS = CSL_EMAIL_ADDRESS;
+    }
+
+    public String getCSL_EMAIL_CONTENT() {
+        return CSL_EMAIL_CONTENT;
+    }
+
+    public void setCSL_EMAIL_CONTENT(String CSL_EMAIL_CONTENT) {
+        this.CSL_EMAIL_CONTENT = CSL_EMAIL_CONTENT;
+    }
+
+    public String getREF() {
+        return REF;
+    }
+
+    public void setREF(String REF) {
+        this.REF = REF;
+    }
+
+    public String getCSL_EMAIL_TITLE() {
+        return CSL_EMAIL_TITLE;
+    }
+
+    public void setCSL_EMAIL_TITLE(String CSL_EMAIL_TITLE) {
+        this.CSL_EMAIL_TITLE = CSL_EMAIL_TITLE;
+    }
+
+}
diff --git a/src/main/java/vn/shb/service/entities/CasaCapital.java b/src/main/java/vn/shb/service/entities/CasaCapital.java
new file mode 100644
index 0000000..d5468c5
--- /dev/null
+++ b/src/main/java/vn/shb/service/entities/CasaCapital.java
@@ -0,0 +1,133 @@
+package vn.shb.service.entities;
+
+import javax.persistence.Column;
+import javax.persistence.Entity;
+import javax.persistence.Id;
+import javax.persistence.Table;
+
+@Entity
+@Table(name = "SHB_CASA_EMAIL_LOG")
+public class CasaCapital {
+    @Id
+    private Long ID;
+    @Column(name = "SEND_DATE")
+    private String SEND_DATE;
+    @Column(name = "MKR_ID")
+    private String MKR_ID;
+    @Column(name = "AUTH_ID")
+    private String AUTH_ID;
+    @Column(name = "REF_NO")
+    private String REF_NO;
+    @Column(name = "DR_CR_FLG")
+    private String DR_CR_FLG;
+    @Column(name = "AMOUNT")
+    private String AMOUNT;
+    @Column(name = "CCY_CD")
+    private String CCY_CD;
+    @Column(name = "AC_NO")
+    private String AC_NO;
+    @Column(name = "CUST_REMARKS")
+    private String CUST_REMARKS;
+    @Column(name = "AUTH_DT")
+    private String AUTH_DT;
+    @Column(name = "STATUS")
+    private int STATUS;
+
+    public Long getID() {
+        return ID;
+    }
+
+    public CasaCapital setID(Long ID) {
+        this.ID = ID;
+        return this;
+    }
+
+    public String getMKR_ID() {
+        return MKR_ID;
+    }
+
+    public void setMKR_ID(String MKR_ID) {
+        this.MKR_ID = MKR_ID;
+    }
+
+    public String getAUTH_ID() {
+        return AUTH_ID;
+    }
+
+    public void setAUTH_ID(String AUTH_ID) {
+        this.AUTH_ID = AUTH_ID;
+    }
+
+    public String getREF_NO() {
+        return REF_NO;
+    }
+
+    public void setREF_NO(String REF_NO) {
+        this.REF_NO = REF_NO;
+    }
+
+    public String getDR_CR_FLG() {
+        return DR_CR_FLG;
+    }
+
+    public void setDR_CR_FLG(String DR_CR_FLG) {
+        this.DR_CR_FLG = DR_CR_FLG;
+    }
+
+    public String getAMOUNT() {
+        return AMOUNT;
+    }
+
+    public void setAMOUNT(String AMOUNT) {
+        this.AMOUNT = AMOUNT;
+    }
+
+    public String getCCY_CD() {
+        return CCY_CD;
+    }
+
+    public void setCCY_CD(String CCY_CD) {
+        this.CCY_CD = CCY_CD;
+    }
+
+    public String getAC_NO() {
+        return AC_NO;
+    }
+
+    public void setAC_NO(String AC_NO) {
+        this.AC_NO = AC_NO;
+    }
+
+    public String getCUST_REMARKS() {
+        return CUST_REMARKS;
+    }
+
+    public void setCUST_REMARKS(String CUST_REMARKS) {
+        this.CUST_REMARKS = CUST_REMARKS;
+    }
+
+    public String getAUTH_DT() {
+        return AUTH_DT;
+    }
+
+    public void setAUTH_DT(String AUTH_DT) {
+        this.AUTH_DT = AUTH_DT;
+    }
+
+    public int getSTATUS() {
+        return STATUS;
+    }
+
+    public void setSTATUS(int STATUS) {
+        this.STATUS = STATUS;
+    }
+
+    public String getSEND_DATE() {
+        return SEND_DATE;
+    }
+
+    public CasaCapital setSEND_DATE(String SEND_DATE) {
+        this.SEND_DATE = SEND_DATE;
+        return this;
+    }
+}
diff --git a/src/main/java/vn/shb/service/entities/CcommsData.java b/src/main/java/vn/shb/service/entities/CcommsData.java
index 0f0d10c..946abb4 100644
--- a/src/main/java/vn/shb/service/entities/CcommsData.java
+++ b/src/main/java/vn/shb/service/entities/CcommsData.java
@@ -1,7 +1,5 @@
 package vn.shb.service.entities;
 
-import com.fasterxml.jackson.annotation.JsonProperty;
-
 public class CcommsData {
 
     private String Id;
diff --git a/src/main/java/vn/shb/service/entities/CcommsResponse.java b/src/main/java/vn/shb/service/entities/CcommsResponse.java
index 51a40c3..6fbad1d 100644
--- a/src/main/java/vn/shb/service/entities/CcommsResponse.java
+++ b/src/main/java/vn/shb/service/entities/CcommsResponse.java
@@ -1,7 +1,5 @@
 package vn.shb.service.entities;
 
-import com.fasterxml.jackson.annotation.JsonProperty;
-
 public class CcommsResponse {
 
     private String Message;
diff --git a/src/main/java/vn/shb/service/entities/EMAILTEMPLATES.java b/src/main/java/vn/shb/service/entities/EMAILTEMPLATES.java
index 20702b1..a1efaf4 100644
--- a/src/main/java/vn/shb/service/entities/EMAILTEMPLATES.java
+++ b/src/main/java/vn/shb/service/entities/EMAILTEMPLATES.java
@@ -8,7 +8,6 @@ import javax.persistence.Id;
 import javax.persistence.Table;
 
 @Entity
-@Table(name = "EMAIL_TEMPLATES")
 public class EMAILTEMPLATES extends BaseEntity {
     @Id
     private Long ID;
diff --git a/src/main/java/vn/shb/service/entities/EmailEntity.java b/src/main/java/vn/shb/service/entities/EmailEntity.java
new file mode 100644
index 0000000..ca56a93
--- /dev/null
+++ b/src/main/java/vn/shb/service/entities/EmailEntity.java
@@ -0,0 +1,59 @@
+package vn.shb.service.entities;
+
+public class EmailEntity {
+    private String emailTo;
+    private String emailTitle;
+    private String emailContent;
+    private String mailFrom;
+    private String mailUser;
+    private String mailPassword;
+
+    public String getEmailTo()
+    {
+        return emailTo;
+    }
+    public EmailEntity setEmailTo(String emailTo)
+    {
+        this.emailTo = emailTo;        return this;
+    }
+    public String getEmailTitle()
+    {
+        return emailTitle;
+    }
+    public EmailEntity setEmailTitle(String emailTitle)
+    {
+        this.emailTitle = emailTitle;        return this;
+    }
+    public String getEmailContent()
+    {
+        return emailContent;
+    }
+    public EmailEntity setEmailContent(String emailContent)
+    {
+        this.emailContent = emailContent;        return this;
+    }
+
+    public String getMailFrom() {
+        return mailFrom;
+    }
+
+    public void setMailFrom(String mailFrom) {
+        this.mailFrom = mailFrom;
+    }
+
+    public String getMailUser() {
+        return mailUser;
+    }
+
+    public void setMailUser(String mailUser) {
+        this.mailUser = mailUser;
+    }
+
+    public String getMailPassword() {
+        return mailPassword;
+    }
+
+    public void setMailPassword(String mailPassword) {
+        this.mailPassword = mailPassword;
+    }
+}
diff --git a/src/main/java/vn/shb/service/entities/EmailTemplateSendTo.java b/src/main/java/vn/shb/service/entities/EmailTemplateSendTo.java
new file mode 100644
index 0000000..245cfb7
--- /dev/null
+++ b/src/main/java/vn/shb/service/entities/EmailTemplateSendTo.java
@@ -0,0 +1,139 @@
+package vn.shb.service.entities;
+
+import javax.persistence.*;
+import javax.persistence.Entity;
+
+@Entity
+@Table(name = "EMAIL_TEMPLATES_SENDTO")
+public class EmailTemplateSendTo {
+    @javax.persistence.Id
+    private Long Id;
+    @Column(name = "LIST_EMAIL")
+    private String listMail;
+    @Column(name = "STATUS")
+    private String status;
+    @Column(name = "CREATEBY")
+    private String createBy;
+    @Column(name = "CREATEDATE")
+    private String createDate;
+    @Column(name = "LASTMODIFIEDBY")
+    private String lastModifiedBy;
+    @Column(name = "LASTMODIFIEDDATE")
+    private String lastModifiedDate;
+    @Column(name = "APPROVERBY")
+    private String approverBy;
+    @Column(name = "APPROVERDATE")
+    private String approverDate;
+    @Column(name = "CODE")
+    private String code;
+    @Column(name = "MAIL_FROM")
+    private String mailFrom;
+    @Column(name = "MAIL_USER")
+    private String mailUser;
+    @Column(name = "MAIL_PASS")
+    private String mailPass;
+
+    public Long getId() {
+        return Id;
+    }
+
+    public void setId(Long id) {
+        Id = id;
+    }
+
+    public String getListMail() {
+        return listMail;
+    }
+
+    public void setListMail(String listMail) {
+        this.listMail = listMail;
+    }
+
+    public String getStatus() {
+        return status;
+    }
+
+    public void setStatus(String status) {
+        this.status = status;
+    }
+
+    public String getCreateBy() {
+        return createBy;
+    }
+
+    public void setCreateBy(String createBy) {
+        this.createBy = createBy;
+    }
+
+    public String getCreateDate() {
+        return createDate;
+    }
+
+    public void setCreateDate(String createDate) {
+        this.createDate = createDate;
+    }
+
+    public String getLastModifiedBy() {
+        return lastModifiedBy;
+    }
+
+    public void setLastModifiedBy(String lastModifiedBy) {
+        this.lastModifiedBy = lastModifiedBy;
+    }
+
+    public String getLastModifiedDate() {
+        return lastModifiedDate;
+    }
+
+    public void setLastModifiedDate(String lastModifiedDate) {
+        this.lastModifiedDate = lastModifiedDate;
+    }
+
+    public String getApproverBy() {
+        return approverBy;
+    }
+
+    public void setApproverBy(String approverBy) {
+        this.approverBy = approverBy;
+    }
+
+    public String getApproverDate() {
+        return approverDate;
+    }
+
+    public void setApproverDate(String approverDate) {
+        this.approverDate = approverDate;
+    }
+
+    public String getCode() {
+        return code;
+    }
+
+    public void setCode(String code) {
+        this.code = code;
+    }
+
+    public String getMailFrom() {
+        return mailFrom;
+    }
+
+    public void setMailFrom(String mailFrom) {
+        this.mailFrom = mailFrom;
+    }
+
+    public String getMailUser() {
+        return mailUser;
+    }
+
+    public void setMailUser(String mailUser) {
+        this.mailUser = mailUser;
+    }
+
+    public String getMailPass() {
+        return mailPass;
+    }
+
+    public void setMailPass(String mailPass) {
+        this.mailPass = mailPass;
+    }
+}
diff --git a/src/main/java/vn/shb/service/entities/HolidayCCY.java b/src/main/java/vn/shb/service/entities/HolidayCCY.java
index 146897a..25077ec 100644
--- a/src/main/java/vn/shb/service/entities/HolidayCCY.java
+++ b/src/main/java/vn/shb/service/entities/HolidayCCY.java
@@ -22,6 +22,18 @@ public class HolidayCCY {
     private String shortDesc;
     @Column(name = "CCY_DESC")
     private String ccyDesc;
+    @Column(name = "MAIL_FROM")
+    private String mailFrom;
+    @Column(name = "MAIL_TO")
+    private String mailTo;
+    @Column(name = "SUBJECT")
+    private String subject;
+    @Column(name = "CREATE_DATE")
+    private String createDate;
+    @Column(name = "SEND_DATE")
+    private String sendDate;
+    @Column(name = "HOLI_DT_BEFORE")
+    private String holiDTBefore;
 
     public Long getID() {
         return ID;
@@ -94,4 +106,52 @@ public class HolidayCCY {
         this.ccyDesc = ccyDesc;
         return this;
     }
+
+    public String getMailFrom() {
+        return mailFrom;
+    }
+
+    public void setMailFrom(String mailFrom) {
+        this.mailFrom = mailFrom;
+    }
+
+    public String getMailTo() {
+        return mailTo;
+    }
+
+    public void setMailTo(String mailTo) {
+        this.mailTo = mailTo;
+    }
+
+    public String getSubject() {
+        return subject;
+    }
+
+    public void setSubject(String subject) {
+        this.subject = subject;
+    }
+
+    public String getCreateDate() {
+        return createDate;
+    }
+
+    public void setCreateDate(String createDate) {
+        this.createDate = createDate;
+    }
+
+    public String getSendDate() {
+        return sendDate;
+    }
+
+    public void setSendDate(String sendDate) {
+        this.sendDate = sendDate;
+    }
+
+    public String getHoliDTBefore() {
+        return holiDTBefore;
+    }
+
+    public void setHoliDTBefore(String holiDTBefore) {
+        this.holiDTBefore = holiDTBefore;
+    }
 }
diff --git a/src/main/java/vn/shb/service/entities/HtlsEmailAdd.java b/src/main/java/vn/shb/service/entities/HtlsEmailAdd.java
index c713751..bdf040e 100644
--- a/src/main/java/vn/shb/service/entities/HtlsEmailAdd.java
+++ b/src/main/java/vn/shb/service/entities/HtlsEmailAdd.java
@@ -6,7 +6,6 @@ import javax.persistence.Id;
 import javax.persistence.Table;
 
 @Entity
-@Table(name = "HTLS_EMAIL_ADD")
 public class HtlsEmailAdd {
     @Id
     private Long Id;
diff --git a/src/main/java/vn/shb/service/entities/HtlsSumary.java b/src/main/java/vn/shb/service/entities/HtlsSumary.java
index f52bdda..b290bfe 100644
--- a/src/main/java/vn/shb/service/entities/HtlsSumary.java
+++ b/src/main/java/vn/shb/service/entities/HtlsSumary.java
@@ -1,14 +1,10 @@
 package vn.shb.service.entities;
 
-import java.io.Serializable;
-import java.util.Date;
 import javax.persistence.Column;
 import javax.persistence.Entity;
 import javax.persistence.Id;
-import javax.persistence.Table;
 
 @Entity
-@Table(name = "HTLS_SUMARY")
 public class HtlsSumary extends BaseEntity {
     @Id
     private Long ID;
@@ -54,6 +50,8 @@ public class HtlsSumary extends BaseEntity {
     private String ERROR_CODE;
     @Column(name = "ERROR_MSG")
     private String ERROR_MSG;
+//    @Column(name = "FLAG_SENT_YESTERDAY")
+//    private String FLAG_SENT_YESTERDAY ;
 
     public Long getID() {
         return ID;
@@ -252,6 +250,15 @@ public class HtlsSumary extends BaseEntity {
         this.ERROR_MSG = ERROR_MSG;
         return this;
     }
+
+//    public String getFLAG_SENT_YESTERDAY() {
+//        return FLAG_SENT_YESTERDAY;
+//    }
+//
+//    public void setFLAG_SENT_YESTERDAY(String FLAG_SENT_YESTERDAY) {
+//        this.FLAG_SENT_YESTERDAY = FLAG_SENT_YESTERDAY;
+//    }
+
     /*public String getValDt() {
         return valDt;
     }
diff --git a/src/main/java/vn/shb/service/entities/SHBEmailJob.java b/src/main/java/vn/shb/service/entities/SHBEmailJob.java
new file mode 100644
index 0000000..6014eeb
--- /dev/null
+++ b/src/main/java/vn/shb/service/entities/SHBEmailJob.java
@@ -0,0 +1,55 @@
+package vn.shb.service.entities;
+
+import lombok.Getter;
+import lombok.Setter;
+
+import javax.persistence.Column;
+import javax.persistence.Entity;
+import javax.persistence.Id;
+
+@Setter
+@Getter
+@Entity
+public class SHBEmailJob {
+    @Id
+    private Long ID;
+    @Column(name = "SYSTEM_CODE")
+    private String systemCode;
+    @Column(name = "TYPE")
+    private String type;
+    @Column(name = "REFERENCE_ID")
+    private String referenceId;
+    @Column(name = "REFERENCE_DES")
+    private String referenceDes;
+    @Column(name = "EMAIL_FROM")
+    private String emailFrom;
+    @Column(name = "EMAIL_TO")
+    private String emailTo;
+    @Column(name = "EMAIL_TITTLE")
+    private String emailTitle;
+    @Column(name = "EMAIL_CONTENT")
+    private String emailContent;
+    @Column(name = "EMAIL_USER")
+    private String emailUser;
+    @Column(name = "EMAIL_PASSWORD")
+    private String emailPassWord;
+    @Column(name = "ATTACH_FILE_PATH")
+    private String attactFilePath;
+    @Column(name = "CREATE_DATE")
+    private String createDate;
+    @Column(name = "EMAIL_STATUS")
+    private String emailStatus;
+    @Column(name = "SMS_STATUS")
+    private String smsStatus;
+    @Column(name = "SEND_DATE")
+    private String sendDate;
+    @Column(name = "CHANNEL")
+    private String channel;
+    @Column(name = "PHONE_NUMBER")
+    private String phoneNumer;
+    @Column(name = "SMS_CONTENT")
+    private String smsContent;
+    @Column(name = "RETRY_NUMBER")
+    private String retryNumber;
+
+}
diff --git a/src/main/java/vn/shb/service/helper/EmailHelper.java b/src/main/java/vn/shb/service/helper/EmailHelper.java
new file mode 100644
index 0000000..14ad264
--- /dev/null
+++ b/src/main/java/vn/shb/service/helper/EmailHelper.java
@@ -0,0 +1,97 @@
+package vn.shb.service.helper;
+
+import com.sun.mail.util.MailSSLSocketFactory;
+import lombok.extern.slf4j.Slf4j;
+import org.springframework.beans.factory.annotation.Value;
+import org.springframework.mail.javamail.JavaMailSender;
+import org.springframework.mail.javamail.JavaMailSenderImpl;
+import org.springframework.stereotype.Component;
+import vn.shb.service.configs.AES;
+import vn.shb.service.entities.EmailEntity;
+import vn.shb.service.entities.ErrorDetailService;
+
+import javax.mail.*;
+import javax.mail.internet.InternetAddress;
+import javax.mail.internet.MimeBodyPart;
+import javax.mail.internet.MimeMessage;
+import javax.mail.internet.MimeMultipart;
+import java.io.File;
+import java.security.GeneralSecurityException;
+import java.util.Date;
+import java.util.Properties;
+//import vn.shb.service.entities.recon.EmailEntity;
+
+@Slf4j
+@Component
+public class EmailHelper {
+
+    @Value("${email.host}")
+    private String host;
+    @Value("${email.port}")
+    private String port;
+
+    private JavaMailSender setJavaMailSender(String host, int port, String user, String pass) throws GeneralSecurityException {
+        MailSSLSocketFactory mailSSLSocketFactory = new MailSSLSocketFactory();
+        mailSSLSocketFactory.setTrustAllHosts(true);
+        JavaMailSenderImpl mailSender = new JavaMailSenderImpl();
+        mailSender.setHost(host);
+        mailSender.setPort(port);
+        mailSender.setUsername(user);
+        mailSender.setPassword(pass);
+        mailSender.setDefaultEncoding("UTF-8");
+        Properties properties = new Properties();
+        properties.setProperty("mail.smtp.auth", "true");
+        properties.setProperty("mail.smtp.starttls.enable", "false");
+        properties.setProperty("mail.smtp.debug", "true");
+        properties.setProperty("mail.smtp.localhost", "localhost");
+        properties.setProperty("mail.smtp.allow8bitmime", "true");
+        properties.setProperty("mail.smtps.allow8bitmime", "true");
+        properties.put("mail.smtp.ssl.socketFactory", mailSSLSocketFactory);
+        mailSender.setJavaMailProperties(properties);
+        return mailSender;
+    }
+
+    public int sendHtmlEmail(EmailEntity model, File fileAttch) throws Exception {
+        try {
+            final int status;
+            String plainPassword = AES.decrypt(model.getMailPassword());
+            Properties props = new Properties();
+            props.put("mail.smtp.auth", "true");
+            props.put("mail.smtp.starttls.enable", "false");
+            props.put("mail.smtp.host", host);
+            props.put("mail.smtp.port", port);
+            Session session = Session.getInstance(props, new Authenticator() {
+                @Override
+                protected PasswordAuthentication getPasswordAuthentication() {
+                    return new PasswordAuthentication(model.getMailUser(), plainPassword);
+                }
+            });
+            Message msg = new MimeMessage(session);
+            msg.setFrom(new InternetAddress(model.getMailFrom(), false));
+            msg.setRecipients(Message.RecipientType.TO, InternetAddress.parse(model.getEmailTo()));
+            msg.setSubject(model.getEmailTitle());
+            msg.setContent(model.getEmailContent(), "text/html; charset=UTF-8");
+            msg.setSentDate(new Date());
+
+            MimeBodyPart messageBodyPart = new MimeBodyPart();
+            messageBodyPart.setContent(model.getEmailContent(), "text/html; charset=UTF-8");
+
+            Multipart multipart = new MimeMultipart();
+            multipart.addBodyPart(messageBodyPart);
+
+            if(fileAttch.exists() && fileAttch.isDirectory()){
+                MimeBodyPart attachPart = new MimeBodyPart();
+                attachPart.attachFile(fileAttch);
+                multipart.addBodyPart(attachPart);
+            }
+
+            msg.setContent(multipart);
+            Transport.send(msg);
+            return 1;
+        } catch (Exception ex) {
+            ErrorDetailService error = new ErrorDetailService(ex.getMessage(), ex.getLocalizedMessage(), ex.getStackTrace());
+            log.error(error.toString());
+            return 9999;
+        }
+    }
+}
diff --git a/src/main/java/vn/shb/service/jobs/BanChinhBanCheoJob.java b/src/main/java/vn/shb/service/jobs/BanChinhBanCheoJob.java
new file mode 100644
index 0000000..62a6160
--- /dev/null
+++ b/src/main/java/vn/shb/service/jobs/BanChinhBanCheoJob.java
@@ -0,0 +1,34 @@
+package vn.shb.service.jobs;
+
+import lombok.extern.slf4j.Slf4j;
+import org.springframework.scheduling.annotation.Scheduled;
+import org.springframework.stereotype.Component;
+import vn.shb.service.configs.ConfigConts;
+import vn.shb.service.configs.ParamsConfigs;
+import vn.shb.service.entities.ErrorDetailService;
+import vn.shb.service.services.BanChinhBanCheoJobService;
+
+@Slf4j
+@Component
+public class BanChinhBanCheoJob {
+    private final BanChinhBanCheoJobService banChinhBanCheoJobService;
+
+    private final ParamsConfigs paramsConfigs;
+
+    public BanChinhBanCheoJob(BanChinhBanCheoJobService banChinhBanCheoJobService, ParamsConfigs paramsConfigs) {
+        this.banChinhBanCheoJobService = banChinhBanCheoJobService;
+        this.paramsConfigs = paramsConfigs;
+    }
+    @Scheduled(cron = "${cronExpression.ban_chinh_ban_cheo}")
+    protected void execute() {
+        if (paramsConfigs.getBan_chinh_ban_cheo().equalsIgnoreCase(ConfigConts.JOB_ENABLE)){
+            try {
+                log.info("<!-----------Start ban_chinh_ban_cheo Job --------------->");
+                banChinhBanCheoJobService.run();
+            }catch (Exception e) {
+                ErrorDetailService error =new ErrorDetailService(e.getMessage(),e.getLocalizedMessage(),e.getStackTrace());
+                log.error(error.toString());
+            }
+        }
+    }
+}
diff --git a/src/main/java/vn/shb/service/jobs/CaseCapitalJob.java b/src/main/java/vn/shb/service/jobs/CaseCapitalJob.java
new file mode 100644
index 0000000..ccb3199
--- /dev/null
+++ b/src/main/java/vn/shb/service/jobs/CaseCapitalJob.java
@@ -0,0 +1,34 @@
+package vn.shb.service.jobs;
+
+import lombok.extern.slf4j.Slf4j;
+import org.springframework.scheduling.annotation.Scheduled;
+import org.springframework.stereotype.Component;
+import vn.shb.service.configs.ConfigConts;
+import vn.shb.service.configs.ParamsConfigs;
+import vn.shb.service.entities.ErrorDetailService;
+import vn.shb.service.services.CasaCapitalJobService;
+
+@Slf4j
+@Component
+public class CaseCapitalJob {
+    private final CasaCapitalJobService casaCapitalJobService;
+
+    private final ParamsConfigs paramsConfigs;
+
+    public CaseCapitalJob(CasaCapitalJobService casaCapitalJobService,ParamsConfigs paramsConfigs) {
+        this.casaCapitalJobService = casaCapitalJobService;
+        this.paramsConfigs = paramsConfigs;
+    }
+    @Scheduled(cron = "${cronExpression.casa_nguonvon}")
+    protected void execute() {
+        if (paramsConfigs.getCasa_nguonvon_status().equalsIgnoreCase(ConfigConts.JOB_ENABLE)){
+            try {
+                log.info("<!-----------Start casa_nguonvon Job --------------->");
+                casaCapitalJobService.run();
+            }catch (Exception e) {
+                ErrorDetailService error =new ErrorDetailService(e.getMessage(),e.getLocalizedMessage(),e.getStackTrace());
+                log.error(error.toString());
+            }
+        }
+    }
+}
diff --git a/src/main/java/vn/shb/service/jobs/HTLSCNAllBranchJob.java b/src/main/java/vn/shb/service/jobs/HTLSCNAllBranchJob.java
index 08b20ad..d2156e4 100644
--- a/src/main/java/vn/shb/service/jobs/HTLSCNAllBranchJob.java
+++ b/src/main/java/vn/shb/service/jobs/HTLSCNAllBranchJob.java
@@ -1,6 +1,7 @@
 package vn.shb.service.jobs;
 
 import lombok.extern.slf4j.Slf4j;
+import org.quartz.DisallowConcurrentExecution;
 import org.springframework.scheduling.annotation.Scheduled;
 import org.springframework.stereotype.Component;
 import vn.shb.service.configs.ConfigConts;
@@ -23,11 +24,8 @@ public class HTLSCNAllBranchJob {
         if (paramsConfigs.getHtls_cn_all_branch_status().equalsIgnoreCase(ConfigConts.JOB_ENABLE)){
             try {
                 log.info("<!-----------Start HTLSCN All Branch Job --------------->");
-                htlscnJobService.setApiUrl(paramsConfigs.getApiUrl());
+//                htlscnJobService.setApiUrl(paramsConfigs.getApiUrl());
                 htlscnJobService.setDevelopment(paramsConfigs.isDevelopment());
-                htlscnJobService.setDevelopmentDay(paramsConfigs.getDevelopmentDay());
-                htlscnJobService.setDevelopmentYear(paramsConfigs.getDevelopmentYear());
-                htlscnJobService.setDevelopmentMonth(paramsConfigs.getDevelopmentMonth());
                 htlscnJobService.run();
             }catch (Exception e) {
                 ErrorDetailService error =new ErrorDetailService(e.getMessage(),e.getLocalizedMessage(),e.getStackTrace());
diff --git a/src/main/java/vn/shb/service/jobs/HTLSDNJob.java b/src/main/java/vn/shb/service/jobs/HTLSDNJob.java
index 82391da..e664ad7 100644
--- a/src/main/java/vn/shb/service/jobs/HTLSDNJob.java
+++ b/src/main/java/vn/shb/service/jobs/HTLSDNJob.java
@@ -22,12 +22,9 @@ public class HTLSDNJob  {
     protected void execute() {
         if (paramsConfigs.getHtls_dn_status().equalsIgnoreCase(ConfigConts.JOB_ENABLE)){
             try {
-                log.info("<!-----------Start HTLSDN Job --------------->");
-                htlsdnJobService.setApiUrl(paramsConfigs.getApiUrl());
+                log.info("<!-----------Start HTLSDN Branch Job --------------->");
+//                htlsdnJobService.setApiUrl(paramsConfigs.getApiUrl());
                 htlsdnJobService.setDevelopment(paramsConfigs.isDevelopment());
-                htlsdnJobService.setDevelopmentDay(paramsConfigs.getDevelopmentDay());
-                htlsdnJobService.setDevelopmentYear(paramsConfigs.getDevelopmentYear());
-                htlsdnJobService.setDevelopmentMonth(paramsConfigs.getDevelopmentMonth());
                 htlsdnJobService.run();
             } catch (Exception e) {
                 ErrorDetailService error =new ErrorDetailService(e.getMessage(),e.getLocalizedMessage(),e.getStackTrace());
diff --git a/src/main/java/vn/shb/service/repositories/CasaCapitalRepo.java b/src/main/java/vn/shb/service/repositories/CasaCapitalRepo.java
new file mode 100644
index 0000000..b139855
--- /dev/null
+++ b/src/main/java/vn/shb/service/repositories/CasaCapitalRepo.java
@@ -0,0 +1,26 @@
+package vn.shb.service.repositories;
+
+import org.springframework.data.jpa.repository.JpaRepository;
+import org.springframework.data.jpa.repository.Query;
+import org.springframework.data.repository.query.Param;
+import org.springframework.stereotype.Repository;
+import vn.shb.service.entities.CasaCapital;
+
+import java.util.List;
+
+@Repository
+public interface CasaCapitalRepo extends JpaRepository<CasaCapital, Long> {
+
+//    List<CasaCapital> findCasaCapitalByAUTH_DT(String authDT);
+
+    @Query(nativeQuery = true, value =
+            "SELECT ID, SEND_DATE, MKR_ID, AUTH_ID, REF_NO, DR_CR_FLG, AMOUNT, CCY_CD, AC_NO, CUST_REMARKS, AUTH_DT, STATUS \n" +
+                    "    FROM SHB_CASA_EMAIL_LOG \n" +
+                    "    WHERE 1=1 \n" +
+                    "      AND  TO_CHAR (TO_DATE (auth_dt, 'dd-MM-yyyy HH24:MI:SS'),'dd/MM/yyyy')  = :auth_dt\n" +
+                    "      AND STATUS = 0\n" +
+                    "ORDER BY ID DESC")
+    List<CasaCapital> getPaging(
+            @Param("auth_dt") String authDt
+    );
+}
diff --git a/src/main/java/vn/shb/service/repositories/EmailTemplateSendToRepo.java b/src/main/java/vn/shb/service/repositories/EmailTemplateSendToRepo.java
new file mode 100644
index 0000000..b5a9af4
--- /dev/null
+++ b/src/main/java/vn/shb/service/repositories/EmailTemplateSendToRepo.java
@@ -0,0 +1,9 @@
+package vn.shb.service.repositories;
+
+import org.springframework.stereotype.Repository;
+import vn.shb.service.entities.EmailTemplateSendTo;
+
+@Repository
+public interface EmailTemplateSendToRepo {
+    EmailTemplateSendTo getSendToByCode(String code);
+}
diff --git a/src/main/java/vn/shb/service/repositories/HtlsEmailAddRepo.java b/src/main/java/vn/shb/service/repositories/HtlsEmailAddRepo.java
index ca156b0..504855c 100644
--- a/src/main/java/vn/shb/service/repositories/HtlsEmailAddRepo.java
+++ b/src/main/java/vn/shb/service/repositories/HtlsEmailAddRepo.java
@@ -3,8 +3,12 @@ package vn.shb.service.repositories;
 import org.springframework.stereotype.Repository;
 import vn.shb.service.entities.HtlsEmailAdd;
 
+import java.util.List;
+
 @Repository
 public interface HtlsEmailAddRepo  {
 
     HtlsEmailAdd getHtlsEmailAddBymainPos(String mainPos);
+
+//    List<HtlsEmailAdd> getAllHtlsEmailAdd();
 }
diff --git a/src/main/java/vn/shb/service/repositories/ShbEmailJobRepo.java b/src/main/java/vn/shb/service/repositories/ShbEmailJobRepo.java
new file mode 100644
index 0000000..27f5629
--- /dev/null
+++ b/src/main/java/vn/shb/service/repositories/ShbEmailJobRepo.java
@@ -0,0 +1,21 @@
+package vn.shb.service.repositories;
+
+import org.springframework.data.jpa.repository.JpaRepository;
+import org.springframework.data.jpa.repository.Query;
+import org.springframework.stereotype.Repository;
+import vn.shb.service.entities.SHBEmailJob;
+
+import java.util.List;
+@Repository
+
+public interface ShbEmailJobRepo extends JpaRepository<SHBEmailJob, Long> {
+
+    @Query(nativeQuery = true, value =
+            "SELECT ID, SYSTEM_CODE, TYPE, REFERENCE_ID, REFERENCE_DES, EMAIL_FROM, EMAIL_TO, EMAIL_TITTLE, EMAIL_CONTENT, EMAIL_USER, EMAIL_PASSWORD,\n" +
+                    " ATTACH_FILE_PATH, CREATE_DATE, EMAIL_STATUS, SMS_STATUS, SEND_DATE, CHANNEL, PHONE_NUMBER, SMS_CONTENT, RETRY_NUMBER \n" +
+                    " FROM SHB_EMAIL_JOB_TABLE \n" +
+                    " WHERE (EMAIL_STATUS <> 1 OR SMS_STATUS <> 1) AND EMAIL_CONTENT is not null AND ID IN (87582) AND RETRY_NUMBER < 4 AND ROWNUM <= :maxRecord \n" +
+                    "ORDER BY ID" )
+        List<SHBEmailJob> getShbEmailJob(int maxRecord
+    );
+}
diff --git a/src/main/java/vn/shb/service/services/BanChinhBanCheoImpl.java b/src/main/java/vn/shb/service/services/BanChinhBanCheoImpl.java
new file mode 100644
index 0000000..9630806
--- /dev/null
+++ b/src/main/java/vn/shb/service/services/BanChinhBanCheoImpl.java
@@ -0,0 +1,70 @@
+package vn.shb.service.services;
+
+import lombok.extern.slf4j.Slf4j;
+import org.springframework.stereotype.Service;
+import vn.shb.service.entities.BanChinhBanCheo;
+import vn.shb.service.entities.CasaCapital;
+import vn.shb.service.entities.ErrorDetailService;
+import vn.shb.service.entities.HtlsSumary;
+
+import javax.persistence.EntityManager;
+import javax.persistence.EntityManagerFactory;
+import javax.persistence.ParameterMode;
+import javax.persistence.StoredProcedureQuery;
+import java.util.List;
+
+@Slf4j
+@Service
+public class BanChinhBanCheoImpl {
+
+    private final EntityManager entityManager;
+
+    public BanChinhBanCheoImpl(EntityManagerFactory entityManagerFactory) {
+        entityManager = entityManagerFactory.createEntityManager();
+    }
+
+    public List<BanChinhBanCheo> getListBanChinhBanCheo() {
+        List<BanChinhBanCheo> banChinhBanCheoList = null;
+        StoredProcedureQuery storedProcedure;
+        try {
+            storedProcedure = entityManager.createStoredProcedureQuery(
+                "CSL_SEND_MAIL", BanChinhBanCheo.class);
+            storedProcedure.registerStoredProcedureParameter("aoutcursordata", void.class, ParameterMode.REF_CURSOR);
+            return (List<BanChinhBanCheo>)storedProcedure.getResultList();
+//            storedProcedure.execute();
+//            banChinhBanCheoList = storedProcedure.getResultList();
+        } catch (Exception e) {
+            String errorMsg = "CSL_SEND_MAIL/" + e.getMessage();
+            ErrorDetailService error = new ErrorDetailService(errorMsg, e.getLocalizedMessage(), e.getStackTrace());
+            log.error(error.toString());
+        } finally {
+            entityManager.clear();
+        }
+        return banChinhBanCheoList;
+    }
+
+    public void insertBanChinhBanCheo(String content, String title, String address, String status) {
+        StoredProcedureQuery storedProcedure;
+        try {
+            storedProcedure = entityManager.createStoredProcedureQuery(
+                "PKG_SHB_EMAIL_HUB.INSERT_BAN_CHINH_BAN_CHEO");
+            storedProcedure.registerStoredProcedureParameter("P_CONTENT", String.class, ParameterMode.IN);
+            storedProcedure.registerStoredProcedureParameter("P_TITTLE", String.class, ParameterMode.IN);
+            storedProcedure.registerStoredProcedureParameter("P_ADDRESS", String.class, ParameterMode.IN);
+            storedProcedure.registerStoredProcedureParameter("P_STATUS", String.class, ParameterMode.IN);
+            storedProcedure.registerStoredProcedureParameter("OUT_CUR", void.class, ParameterMode.REF_CURSOR);
+            storedProcedure.setParameter("P_CONTENT", content);
+            storedProcedure.setParameter("P_TITTLE", title);
+            storedProcedure.setParameter("P_ADDRESS", address);
+            storedProcedure.setParameter("P_STATUS", status);
+            storedProcedure.execute();
+            String result = (String) storedProcedure.getSingleResult();
+            log.info(" updateBanChinhBanCheo Status >>>>>>>>>>>>: " + status + "/" + result);
+        } catch (Exception e) {
+            String errorMsg = "PKG_SHB_EMAIL_HUB.INSERT_BAN_CHINH_BAN_CHEO/" + e.getMessage();
+            ErrorDetailService error = new ErrorDetailService(errorMsg, e.getLocalizedMessage(), e.getStackTrace());
+            log.error(error.toString());
+        }
+    }
+}
+
diff --git a/src/main/java/vn/shb/service/services/BanChinhBanCheoJobService.java b/src/main/java/vn/shb/service/services/BanChinhBanCheoJobService.java
new file mode 100644
index 0000000..43fe351
--- /dev/null
+++ b/src/main/java/vn/shb/service/services/BanChinhBanCheoJobService.java
@@ -0,0 +1,94 @@
+package vn.shb.service.services;
+
+import com.google.gson.Gson;
+import lombok.extern.slf4j.Slf4j;
+import org.springframework.stereotype.Component;
+import vn.shb.service.configs.ParamsConfigs;
+import vn.shb.service.entities.*;
+import vn.shb.service.helper.CallApiHelper;
+import vn.shb.service.repositories.EmailTemplateSendToRepo;
+
+import java.util.List;
+
+@Slf4j
+@Component
+public class BanChinhBanCheoJobService {
+
+    final String banChinhBanCheoCode = "BanChinhBanCheo";
+    final String mailFrom = "banchinhbancheo@shb.com.vn";
+    private final BanChinhBanCheoImpl banChinhBanCheoImpl;
+    private final EmailTemplateSendToRepo emailTemplateSendToRepo;
+    private final CallApiHelper callApiHelper;
+    private final ParamsConfigs paramsConfigs;
+
+    public BanChinhBanCheoJobService(BanChinhBanCheoImpl banChinhBanCheoImpl, EmailTemplateSendToRepo emailTemplateSendToRepo,
+                                     CallApiHelper callApiHelper, ParamsConfigs paramsConfigs) {
+        this.banChinhBanCheoImpl = banChinhBanCheoImpl;
+        this.emailTemplateSendToRepo = emailTemplateSendToRepo;
+        this.callApiHelper = callApiHelper;
+        this.paramsConfigs = paramsConfigs;
+    }
+
+    public void run() {
+        try {
+            List<BanChinhBanCheo> banChinhBanCheoList = (List<BanChinhBanCheo>)banChinhBanCheoImpl.getListBanChinhBanCheo();
+            if (null != banChinhBanCheoList && !banChinhBanCheoList.isEmpty() && banChinhBanCheoList.size() > 0) {
+                log.info("<!----------- banChinhBanCheoList: size = " + banChinhBanCheoList.size() + "---------------");
+                for (BanChinhBanCheo banChinhBanCheo : banChinhBanCheoList) {
+                    String contentDB = banChinhBanCheo.getCSL_EMAIL_CONTENT();
+                    contentDB = contentDB.replace("@@","<br>");
+                    String content = new StringBuilder().append("<!DOCTYPE html>\n")
+                            .append("<html>\n")
+                            .append("<body>\n")
+                            .append("<p>\n")
+                            .append(contentDB)
+                            .append("</p>\n")
+                            .append("</body>\n")
+                            .append("</html>").toString();
+
+                    log.info(content);
+                    String address = banChinhBanCheo.getCSL_EMAIL_ADDRESS();
+                    String title = banChinhBanCheo.getCSL_EMAIL_TITLE();
+                    sendEmail(content, address, title);
+                }
+            }
+        } catch (Exception e) {
+            ErrorDetailService error = new ErrorDetailService(e.getMessage(), e.getLocalizedMessage(), e.getStackTrace());
+            log.error(error.toString());
+        }
+    }
+
+    private void sendEmail(String content, String address, String title) {
+        EmailTemplateSendTo res;
+        String emailStatus = "";
+        if (content != null) {
+            CcomsEntity ccomsEntity = new CcomsEntity()
+                .setAPP_SRC("BAN_CHINH_BAN_CHEO")
+                .setFUNC_SRC("BAN_CHINH_BAN_CHEO")
+                .setIS_VIEW_DETAIL(0)
+                .setNEWS_COMM_TYPE("EMAIL")
+                .setPARENT_ID("")
+                .setPAYLOAD_DATA("")
+                .setPRIORITY(0)
+                .setREF_ID("")
+                .setSTATUS(0)
+                .setNEWS_CONTENT(content)
+                .setNEWS_TITLE(title)
+                .setNEWS_TO(address);
+            try {
+                String apiUrl = paramsConfigs.getApiUrl();
+                final String response = callApiHelper.sendPost(apiUrl, new Gson().toJson(ccomsEntity), true);
+                final CcommsResponse ccommsResponse = new Gson().fromJson(response, CcommsResponse.class);
+                emailStatus = ccommsResponse.getData().getStatus().equalsIgnoreCase("00") ? "1" : ccommsResponse.getData().getStatus();
+//                banChinhBanCheoImpl.insertBanChinhBanCheo(content, title, address, emailStatus);
+                log.info("<!----------- send email BanChinhBanCheo : emailStatus: " + emailStatus + "--------------->");
+            } catch (Exception e) {
+                StackTraceElement[] elements = e.getStackTrace();
+                log.error(new Gson().toJson(elements));
+                emailStatus = "9999";
+                log.info("<!----------- send email BanChinhBanCheo : emailStatus: 9999--------------->");
+            }
+        }
+    }
+
+}
diff --git a/src/main/java/vn/shb/service/services/CasaCapitalJobService.java b/src/main/java/vn/shb/service/services/CasaCapitalJobService.java
new file mode 100644
index 0000000..be1850f
--- /dev/null
+++ b/src/main/java/vn/shb/service/services/CasaCapitalJobService.java
@@ -0,0 +1,153 @@
+package vn.shb.service.services;
+
+import com.google.gson.Gson;
+import java.text.SimpleDateFormat;
+import java.util.List;
+import lombok.extern.slf4j.Slf4j;
+import org.springframework.stereotype.Component;
+import vn.shb.service.configs.EmailTemplateCode;
+import vn.shb.service.configs.ParamsConfigs;
+import vn.shb.service.entities.*;
+import vn.shb.service.helper.CallApiHelper;
+import vn.shb.service.repositories.CasaCapitalRepo;
+import vn.shb.service.repositories.EmailTemplateSendToRepo;
+import vn.shb.service.repositories.EmailTemplateService;
+
+import java.time.LocalDate;
+import java.time.YearMonth;
+import java.util.Date;
+
+@Slf4j
+@Component
+public class CasaCapitalJobService {
+
+    final String nguonVonCode = "CASA_NGUON_VON";
+    final String mailFrom = "shbhotrolaisuat@shb.com.vn";
+    private final CasaCaptitalImpl casaCaptitalImpl;
+    private final EmailTemplateSendToRepo emailTemplateSendToRepo;
+    private final EmailTemplateService emailTemplateService;
+    private final CallApiHelper callApiHelper;
+    private final ParamsConfigs paramsConfigs;
+    private final CasaCapitalRepo casaCapitalRepo;
+    YearMonth yearMonth = YearMonth.of(LocalDate.now().getYear(), LocalDate.now().getMonth());
+    private String pDateTest;
+    private Date pDate;
+
+    public CasaCapitalJobService(CasaCaptitalImpl casaCaptitalImpl,
+                                 EmailTemplateSendToRepo emailTemplateSendToRepo,
+                                 EmailTemplateService emailTemplateService,
+                                 CallApiHelper callApiHelper, ParamsConfigs paramsConfigs, CasaCapitalRepo casaCapitalRepo) {
+        this.casaCaptitalImpl = casaCaptitalImpl;
+        this.emailTemplateSendToRepo = emailTemplateSendToRepo;
+        this.emailTemplateService = emailTemplateService;
+        this.callApiHelper = callApiHelper;
+        this.paramsConfigs = paramsConfigs;
+        this.casaCapitalRepo = casaCapitalRepo;
+    }
+
+    public void run() {
+        try {
+           SimpleDateFormat formatter = new SimpleDateFormat("dd/MM/yyyy");
+            Date pDate = new Date();
+            String date = formatter.format(pDate);
+            String pDateTest = paramsConfigs.getTestDateCasa();
+            if (  pDateTest != null && pDateTest.length() > 0) {
+                date = pDateTest;
+            }
+//            boolean check = casaCaptitalImpl.insertSHBCasaEmailLog(date);
+//            if (check){
+                List<CasaCapital> casaCapitalList;
+//                casaCapitalList = casaCaptitalImpl.getListCasa(date);
+            casaCapitalList = casaCapitalRepo.getPaging(date);
+                StringBuilder tbodyStr = new StringBuilder("<table border=\"1\" cellpadding=\"1\">\n" +
+                    "<thead>\n" +
+                    "<tr>\n" +
+                    "<th>STT</th>\n" +
+                    "<th>USER MAKER</th>\n" +
+                    "<th>USER CHECKER</th>\n" +
+                    "<th>REF</th>\n" +
+                    "<th>DR\\CR</th>\n" +
+                    "<th>AMOUNT</th>\n" +
+                    "<th>CCY</th>\n" +
+                    "<th>Diễn giải</th>\n" +
+                    "<th>AC_NO</th>\n" +
+                    "<th>DATE & TIME</th>\n" +
+                    "</tr>\n" +
+                    "</thead>\n");
+                tbodyStr.append("<tbody>");
+                boolean flag = false;
+                if (null != casaCapitalList && !casaCapitalList.isEmpty() && casaCapitalList.size() > 0) {
+                    log.info("<!----------- casaCapitalList: size = " + casaCapitalList.size() + "---------------");
+                    flag = true;
+                    for (CasaCapital casaCapital : casaCapitalList) {
+                        if (casaCapital.getSTATUS() == 0) {
+                            tbodyStr.append("<tr>");
+                            tbodyStr.append("<td>").append(casaCapital.getID()).append("</td>");
+                            tbodyStr.append("<td>").append(casaCapital.getMKR_ID()).append("</td>");
+                            tbodyStr.append("<td>").append(casaCapital.getAUTH_ID()).append("</td>");
+                            tbodyStr.append("<td>").append(casaCapital.getREF_NO()).append("</td>");
+                            tbodyStr.append("<td>").append(casaCapital.getDR_CR_FLG()).append("</td>");
+                            tbodyStr.append("<td>").append(casaCapital.getAMOUNT()).append("</td>");
+                            tbodyStr.append("<td>").append(casaCapital.getCCY_CD()).append("</td>");
+                            tbodyStr.append("<td>").append(casaCapital.getCUST_REMARKS()).append("</td>");
+                            tbodyStr.append("<td>").append(casaCapital.getAC_NO()).append("</td>");
+                            tbodyStr.append("<td>").append(casaCapital.getAUTH_DT()).append("</td>");
+                            tbodyStr.append("<tr>");
+                        }
+                    }
+                }
+                tbodyStr.append("</tbody>");
+                tbodyStr.append("</table>");
+                if (flag) {
+                    sendEmail(tbodyStr.toString());
+                }
+//            }
+        } catch (Exception e) {
+            ErrorDetailService error = new ErrorDetailService(e.getMessage(), e.getLocalizedMessage(), e.getStackTrace());
+            log.error(error.toString());
+        }
+    }
+
+    private void sendEmail(String pBody) {
+        EmailTemplateSendTo res;
+        res = emailTemplateSendToRepo.getSendToByCode(nguonVonCode);
+        EMAILTEMPLATES emailtemplates = emailTemplateService.
+            getEmailTemplateByCODE(EmailTemplateCode.CASA_NGUON_VON.getText());
+        String content = emailtemplates.getTEMPLATEEMAIL();
+        if (content != null) {
+            content = content.replace("[[TABLE]]".trim(), pBody);
+            String emailStatus = "";
+            //log.info("<!----------- sendEmail Job start process send email CasaCapital : pBody: " + pBody + "--------------->");
+            final String mailTo = res.getListMail();
+            CcomsEntity ccomsEntity = new CcomsEntity()
+                .setAPP_SRC("CASA_CAPITAL")
+                .setFUNC_SRC("CASA_CAPITAL")
+                .setIS_VIEW_DETAIL(0)
+                .setNEWS_COMM_TYPE("EMAIL")
+                .setPARENT_ID("")
+                .setPAYLOAD_DATA("")
+                .setPRIORITY(0)
+                .setREF_ID("")
+                .setSTATUS(0)
+                .setNEWS_CONTENT(content)
+                .setNEWS_TITLE("Danh sách các bút toán hạch toán vào tài khoản casa trung gian")
+                .setNEWS_TO(mailTo);
+            try {
+                String apiUrl = paramsConfigs.getApiUrl();
+                //log.info(String.format("Start send email CASA_CAPITAL to :" + " %s content  : %s mailTo:", content, mailTo));
+                final String response = callApiHelper.sendPost(apiUrl, new Gson().toJson(ccomsEntity), true);
+                final CcommsResponse ccommsResponse = new Gson().fromJson(response, CcommsResponse.class);
+                emailStatus = ccommsResponse.getData().getStatus().equalsIgnoreCase("00") ? "1" : ccommsResponse.getData().getStatus();
+                casaCaptitalImpl.updateSHBCasaEmailLog(emailStatus);
+                log.info("<!----------- send email CasaCapital : emailStatus: " + emailStatus + "--------------->");
+            } catch (Exception e) {
+                StackTraceElement[] elements = e.getStackTrace();
+                log.error(new Gson().toJson(elements));
+                emailStatus = "9999";
+                log.info("<!----------- send email CasaCapital : emailStatus: 9999--------------->");
+                casaCaptitalImpl.updateSHBCasaEmailLog(emailStatus);
+            }
+        }
+    }
+
+}
diff --git a/src/main/java/vn/shb/service/services/CasaCaptitalImpl.java b/src/main/java/vn/shb/service/services/CasaCaptitalImpl.java
new file mode 100644
index 0000000..dc8608f
--- /dev/null
+++ b/src/main/java/vn/shb/service/services/CasaCaptitalImpl.java
@@ -0,0 +1,83 @@
+package vn.shb.service.services;
+
+import lombok.extern.slf4j.Slf4j;
+import org.springframework.stereotype.Service;
+import vn.shb.service.entities.CasaCapital;
+import vn.shb.service.entities.ErrorDetailService;
+
+import javax.persistence.EntityManager;
+import javax.persistence.EntityManagerFactory;
+import javax.persistence.ParameterMode;
+import javax.persistence.StoredProcedureQuery;
+import java.util.List;
+
+@Slf4j
+@Service
+public class CasaCaptitalImpl {
+
+    private final EntityManager entityManager;
+
+    public CasaCaptitalImpl(EntityManagerFactory entityManagerFactory) {
+        entityManager = entityManagerFactory.createEntityManager();
+    }
+
+    public List<CasaCapital> getListCasa(String pdate) {
+        List<CasaCapital> casaCapitalList = null;
+        StoredProcedureQuery storedProcedure;
+        try {
+            storedProcedure = entityManager.createStoredProcedureQuery(
+                "PKG_SHB_EMAIL_HUB.GET_SHB_CASA_EMAIL_LOG", CasaCapital.class);
+            storedProcedure.registerStoredProcedureParameter("P_DATE", String.class, ParameterMode.IN);
+            storedProcedure.registerStoredProcedureParameter("OUT_CUR", void.class, ParameterMode.REF_CURSOR);
+            storedProcedure.setParameter("P_DATE", pdate);
+            storedProcedure.execute();
+            casaCapitalList = (List<CasaCapital>) storedProcedure.getResultList();
+        } catch (Exception e) {
+            String errorMsg = "PKG_SHB_EMAIL_HUB.GET_SHB_CASA_EMAIL_LOG/" + e.getMessage();
+            ErrorDetailService error = new ErrorDetailService(errorMsg, e.getLocalizedMessage(), e.getStackTrace());
+            log.error(error.toString());
+        } finally {
+            entityManager.clear();
+        }
+        return casaCapitalList;
+    }
+
+    public boolean insertSHBCasaEmailLog(String date) {
+        StoredProcedureQuery storedProcedure;
+        try {
+            storedProcedure = entityManager.createStoredProcedureQuery(
+                "PKG_SHB_EMAIL_HUB.INSERT_SHB_CASA_EMAIL_LOG");
+            storedProcedure.registerStoredProcedureParameter("P_DATE", String.class, ParameterMode.IN);
+            storedProcedure.registerStoredProcedureParameter("OUT_CUR", void.class, ParameterMode.REF_CURSOR);
+            storedProcedure.setParameter("P_DATE", date);
+            storedProcedure.execute();
+            String result = (String) storedProcedure.getSingleResult();
+            log.info(" INSERT_SHB_CASA_EMAIL_LOG >>>>>>>>>>>> date/result :  " + date + "/" + result);
+            return true;
+        } catch (Exception e) {
+            String errorMsg = "PKG_SHB_EMAIL_HUB.INSERT_SHB_CASA_EMAIL_LOG/" + e.getMessage();
+            ErrorDetailService error = new ErrorDetailService(errorMsg, e.getLocalizedMessage(), e.getStackTrace());
+            log.error(error.toString());
+            return false;
+        }
+    }
+
+    public void updateSHBCasaEmailLog(String status) {
+        StoredProcedureQuery storedProcedure;
+        try {
+            storedProcedure = entityManager.createStoredProcedureQuery(
+                "PKG_SHB_EMAIL_HUB.UPDATE_SHB_CASA_EMAIL_LOG");
+            storedProcedure.registerStoredProcedureParameter("P_STATUS", String.class, ParameterMode.IN);
+            storedProcedure.registerStoredProcedureParameter("OUT_CUR", void.class, ParameterMode.REF_CURSOR);
+            storedProcedure.setParameter("P_STATUS", status);
+            storedProcedure.execute();
+            String result = (String) storedProcedure.getSingleResult();
+            log.info(" updateSHBCasaEmailLog Status >>>>>>>>>>>>: " + status + "/" + result);
+        } catch (Exception e) {
+            String errorMsg = "PKG_SHB_EMAIL_HUB.UPDATE_SHB_CASA_EMAIL_LOG/" + e.getMessage();
+            ErrorDetailService error = new ErrorDetailService(errorMsg, e.getLocalizedMessage(), e.getStackTrace());
+            log.error(error.toString());
+        }
+    }
+}
+
diff --git a/src/main/java/vn/shb/service/services/EmailCasaNguonVonJobService.java b/src/main/java/vn/shb/service/services/EmailCasaNguonVonJobService.java
index 21d6c67..bb81339 100644
--- a/src/main/java/vn/shb/service/services/EmailCasaNguonVonJobService.java
+++ b/src/main/java/vn/shb/service/services/EmailCasaNguonVonJobService.java
@@ -1,10 +1,6 @@
 package vn.shb.service.services;
 
-import lombok.extern.slf4j.Slf4j;
-import org.springframework.stereotype.Component;
 
-@Slf4j
-@Component
 public class EmailCasaNguonVonJobService {
 
 }
diff --git a/src/main/java/vn/shb/service/services/EmailTemplateImpl.java b/src/main/java/vn/shb/service/services/EmailTemplateImpl.java
index 8e9c42d..b818cfa 100644
--- a/src/main/java/vn/shb/service/services/EmailTemplateImpl.java
+++ b/src/main/java/vn/shb/service/services/EmailTemplateImpl.java
@@ -1,21 +1,19 @@
 package vn.shb.service.services;
 
-import com.zaxxer.hikari.HikariDataSource;
 import javax.persistence.EntityManager;
 import javax.persistence.EntityManagerFactory;
 import javax.persistence.ParameterMode;
 import javax.persistence.StoredProcedureQuery;
 import lombok.extern.slf4j.Slf4j;
-import org.springframework.beans.factory.annotation.Autowired;
-import org.springframework.jdbc.object.GenericStoredProcedure;
-import org.springframework.jdbc.object.StoredProcedure;
 import org.springframework.stereotype.Component;
+import org.springframework.transaction.annotation.Transactional;
 import vn.shb.service.entities.EMAILTEMPLATES;
 import vn.shb.service.entities.ErrorDetailService;
 import vn.shb.service.repositories.EmailTemplateService;
 
 @Slf4j
 @Component
+@Transactional
 public class EmailTemplateImpl  implements EmailTemplateService {
     private final EntityManager entityManager;
     public EmailTemplateImpl(EntityManagerFactory entityManagerFactory) {
diff --git a/src/main/java/vn/shb/service/services/EmailTemplateSendToImpl.java b/src/main/java/vn/shb/service/services/EmailTemplateSendToImpl.java
new file mode 100644
index 0000000..295dd3e
--- /dev/null
+++ b/src/main/java/vn/shb/service/services/EmailTemplateSendToImpl.java
@@ -0,0 +1,43 @@
+package vn.shb.service.services;
+
+import lombok.extern.slf4j.Slf4j;
+import org.springframework.stereotype.Component;
+import vn.shb.service.entities.ErrorDetailService;
+import vn.shb.service.entities.EmailTemplateSendTo;
+import vn.shb.service.repositories.EmailTemplateSendToRepo;
+
+import javax.persistence.EntityManager;
+import javax.persistence.EntityManagerFactory;
+import javax.persistence.ParameterMode;
+import javax.persistence.StoredProcedureQuery;
+
+@Slf4j
+@Component
+public class EmailTemplateSendToImpl implements EmailTemplateSendToRepo {
+    private final EntityManager entityManager;
+
+    public EmailTemplateSendToImpl(EntityManagerFactory entityManagerFactory) {
+        entityManager = entityManagerFactory.createEntityManager();
+    }
+
+    @Override
+    public EmailTemplateSendTo getSendToByCode(String code) {
+        EmailTemplateSendTo emailTemplateSendTo = new EmailTemplateSendTo();
+        StoredProcedureQuery storedProcedure;
+        try {
+            storedProcedure = entityManager.createStoredProcedureQuery(
+                    "PKG_SHB_EMAIL_HUB.HOLIDAY_BY_CCY_GET_LIST_MAIL",EmailTemplateSendTo.class);
+            storedProcedure.registerStoredProcedureParameter("P_CODE", String.class, ParameterMode.IN);
+            storedProcedure.registerStoredProcedureParameter("OUT_CUR", void.class, ParameterMode.REF_CURSOR);
+            storedProcedure.setParameter("P_CODE", code);
+            storedProcedure.execute();
+            Object obj = storedProcedure.getSingleResult();
+            return (EmailTemplateSendTo) obj;
+        } catch (Exception e) {
+            String errorMsg = "HOLIDAY_BY_CCY_GET_LIST_MAIL/"+ e.getMessage();
+            ErrorDetailService error = new ErrorDetailService(errorMsg, e.getLocalizedMessage(), e.getStackTrace());
+            log.error(error.toString());
+        }
+        return emailTemplateSendTo;
+    }
+}
diff --git a/src/main/java/vn/shb/service/services/HTLSCNAllBanchJobService.java b/src/main/java/vn/shb/service/services/HTLSCNAllBanchJobService.java
index 47ac027..bb2d359 100644
--- a/src/main/java/vn/shb/service/services/HTLSCNAllBanchJobService.java
+++ b/src/main/java/vn/shb/service/services/HTLSCNAllBanchJobService.java
@@ -1,21 +1,20 @@
 package vn.shb.service.services;
 
-import com.google.gson.Gson;
-import java.time.LocalDate;
-import java.time.YearMonth;
-import java.time.format.DateTimeFormatter;
+import java.io.File;
+import java.text.DecimalFormat;
+import java.text.SimpleDateFormat;
+import java.util.Calendar;
+import java.util.Date;
 import java.util.List;
-import java.util.Optional;
+
 import lombok.extern.slf4j.Slf4j;
 import org.springframework.stereotype.Component;
 import vn.shb.service.configs.ConfigConts;
-import vn.shb.service.entities.CcommsResponse;
-import vn.shb.service.entities.CcomsEntity;
-import vn.shb.service.entities.EMAILTEMPLATES;
-import vn.shb.service.entities.ErrorDetailService;
-import vn.shb.service.entities.HtlsEmailAdd;
-import vn.shb.service.entities.HtlsSumary;
-import vn.shb.service.helper.CallApiHelper;
+import vn.shb.service.configs.EmailTemplateCode;
+import vn.shb.service.configs.ParamsConfigs;
+import vn.shb.service.entities.*;
+import vn.shb.service.helper.EmailHelper;
+import vn.shb.service.repositories.EmailTemplateSendToRepo;
 import vn.shb.service.repositories.EmailTemplateService;
 import vn.shb.service.repositories.HtlsEmailAddRepo;
 
@@ -23,40 +22,43 @@ import vn.shb.service.repositories.HtlsEmailAddRepo;
 @Component
 public class HTLSCNAllBanchJobService {
 
-    private String apiUrl;
     private final EmailTemplateService emailTemplateService;
     private final HtlsSumaryRepoImp htlsSumaryRepo;
+    private final EmailTemplateSendToRepo emailTemplateSendToRepo;
     private final HtlsEmailAddRepo htlsEmailAddRepo;
+    private final ParamsConfigs paramsConfigs;
     private boolean isDevelopment;
-    private int developmentYear;
-    private int developmentMonth;
-    private int developmentDay;
-    private final CallApiHelper callApiHelper;
+    private final EmailHelper emailHelper;
     final String simpleDateFormat = "yyyyMMdd";
     final String simpleDateFormatEmail = "dd/MM/yyyy";
-    YearMonth yearMonth = YearMonth.of(LocalDate.now().getYear(), LocalDate.now().getMonth());
-    final DateTimeFormatter formatter = DateTimeFormatter.ofPattern(simpleDateFormat);
-    final DateTimeFormatter formatterEmail = DateTimeFormatter.ofPattern(simpleDateFormatEmail);
 
-    public HTLSCNAllBanchJobService(EmailTemplateService emailTemplateService, HtlsSumaryRepoImp htlsSumaryRepo, HtlsEmailAddRepo htlsEmailAddRepo,
-        CallApiHelper callApiHelper) {
+    public HTLSCNAllBanchJobService(EmailTemplateService emailTemplateService, HtlsSumaryRepoImp htlsSumaryRepo, EmailTemplateSendToRepo emailTemplateSendToRepo, HtlsEmailAddRepo htlsEmailAddRepo,
+                                    ParamsConfigs paramsConfigs, EmailHelper emailHelper) {
         this.emailTemplateService = emailTemplateService;
         this.htlsSumaryRepo = htlsSumaryRepo;
+        this.emailTemplateSendToRepo = emailTemplateSendToRepo;
         this.htlsEmailAddRepo = htlsEmailAddRepo;
-        this.callApiHelper = callApiHelper;
+        this.paramsConfigs = paramsConfigs;
+        this.emailHelper = emailHelper;
     }
 
     public void run() {
         try {
-            String valDtEOD = yearMonth.atDay(LocalDate.now().getDayOfMonth() - 1).format(formatter);
-            String valDtBeforeEOD = yearMonth.atDay(LocalDate.now().getDayOfMonth() - 2).format(formatter);
-            String valDtEmail = yearMonth.atDay(LocalDate.now().getDayOfMonth() - 1).format(formatterEmail);
+            SimpleDateFormat formatter = new SimpleDateFormat(simpleDateFormat);
+            SimpleDateFormat formatterEmail = new SimpleDateFormat(simpleDateFormatEmail);
+            Date currentDate = new Date();
             if (isDevelopment) {
-                yearMonth = YearMonth.of(developmentYear, developmentMonth);
-                valDtEOD = yearMonth.atDay(developmentDay - 1).format(formatter);
-                valDtBeforeEOD = yearMonth.atDay(developmentDay - 2).format(formatter);
-                valDtEmail = yearMonth.atDay(developmentDay - 1).format(formatterEmail);
+                String dateTest = paramsConfigs.getTestDate();
+                currentDate = formatter.parse(dateTest);
             }
+            Calendar cal = Calendar.getInstance();
+            cal.setTime(currentDate);
+            cal.add(Calendar.DATE, -1);
+            String valDtEOD = formatter.format(cal.getTime());
+            String valDtEmail = formatterEmail.format(cal.getTime());
+            cal.add(Calendar.DATE, -1);
+            String valDtBeforeEOD = formatter.format(cal.getTime());
+
             List<HtlsSumary> htlsSumaryEODCN = htlsSumaryRepo.getHtlsSumariesCNAllBranchByValDt(valDtEOD);
             if (null == htlsSumaryEODCN || htlsSumaryEODCN.isEmpty()) {
                 return;
@@ -65,30 +67,20 @@ public class HTLSCNAllBanchJobService {
             log.info("<!----------- HTLSCN All Branch Job valDtEOD : " + valDtEOD + "--------------->");
             log.info("<!----------- HTLSCN All Branch Job valDtBeforeEOD : " + valDtBeforeEOD + "--------------->");
             log.info("<!----------- HTLSCN All Branch Job valDtEmail : " + valDtEmail + "--------------->");
-            CcomsEntity ccomsEntity = new CcomsEntity()
-                .setAPP_SRC("HHLS")
-                .setFUNC_SRC("MAIL_HHLS")
-                .setIS_VIEW_DETAIL(0)
-                .setNEWS_COMM_TYPE("EMAIL")
-                .setPARENT_ID("")
-                .setPAYLOAD_DATA("")
-                .setPRIORITY(0)
-                .setREF_ID("")
-                .setSTATUS(0);
 
-            int percent = 0;
-            long tongHanMucLuyKe = 0L;
-            long tongHanMuc = 0L;
-            // kiem tra tong han muc luy ke/tong han muc
-            tongHanMucLuyKe = htlsSumaryEODCN.stream().mapToLong(x -> Long.parseLong(x.getHM_CN_LUYKE())).sum();
-            tongHanMuc = htlsSumaryEODCN.stream().mapToLong(x -> Long.parseLong(x.getHM_PHANBO_CN())).sum();
-            if (tongHanMuc <= 0) {
+
+            double percent;
+            long tongHanMucLuyKe;
+            double tyle_CN = Double.parseDouble(htlsSumaryEODCN.get(0).getTYLE_CN());
+            tongHanMucLuyKe = (long) Double.parseDouble(htlsSumaryEODCN.get(0).getHM_CN_LUYKE());
+            percent = tyle_CN;
+
+            if (tyle_CN < 90) {
                 return;
             }
-            percent = (int) (tongHanMucLuyKe / tongHanMuc) * 100;
             log.info("<!----------- HTLSCN All Branch Job percent : " + percent + "--------------->");
             if (percent >= 90) {
-                sendEmailToAllBranch(htlsSumaryEODCN, ccomsEntity, percent);
+                sendEmailToAllBranch(htlsSumaryEODCN, percent,tongHanMucLuyKe);
             }
         } catch (Exception e) {
             ErrorDetailService error = new ErrorDetailService(e.getMessage(), e.getLocalizedMessage(), e.getStackTrace());
@@ -97,84 +89,52 @@ public class HTLSCNAllBanchJobService {
         }
     }
 
-    private void sendEmailToAllBranch(final List<HtlsSumary> htlsSumaryEODCN, final CcomsEntity ccomsEntity, int percent) {
-        htlsSumaryEODCN.forEach(s -> {
-            String emailStatus = "";
+    private void sendEmailToAllBranch(final List<HtlsSumary> htlsSumaryEODCN, double percent
+            ,long tongHanMucLuyKe){
+        String pattern = "#,###";
+        DecimalFormat decimalFormat = new DecimalFormat(pattern);
+        for (HtlsSumary s : htlsSumaryEODCN) {
+            int emailStatus;
+            EmailTemplateSendTo res = emailTemplateSendToRepo.getSendToByCode("HTLS");
             HtlsEmailAdd htlsEmailAdd = htlsEmailAddRepo.getHtlsEmailAddBymainPos(s.getMAIN_POS());
-            EMAILTEMPLATES emailtemplates = emailTemplateService.getEmailTemplateByCODE("HTLS_TEMPLATE");
-            final String title = emailtemplates.getSENDTITLE().replaceAll("KH_TYPE".trim(), "KHCN".trim());
-            final String mailTo = htlsEmailAdd.getEmailBgd() + ";" + htlsEmailAdd.getEmailTpKhcn() + ";" + htlsEmailAdd.getEmailPgd();
+            EMAILTEMPLATES emailtemplates = emailTemplateService.getEmailTemplateByCODE(EmailTemplateCode.HTLS_TEMPLATE_CN.getText());
+            String title = emailtemplates.getSENDTITLE().replaceAll("KH_TYPE".trim(), "KHCN".trim());
+            title = title.replace("[DEN_NGAY]".trim(), s.getVAL_DT());
+            final String mailTo = htlsEmailAdd.getEmailBgd() + ","
+                                + htlsEmailAdd.getEmailTpKhcn() + ","
+                                + htlsEmailAdd.getEmailPgd() + ","
+                                + htlsEmailAdd.getEmailHttd()  + ","
+                                + htlsEmailAdd.getEmailTpKetoan();
             String content = emailtemplates.getTEMPLATEEMAIL();
-            content = content.replace("[SO_TIEN]".trim(), s.getHM_CN_LUYKE());
-            content = content.replace("[TY_LE]".trim(), s.getTYLE_CN());
-            ccomsEntity.setNEWS_CONTENT(content)
-                .setNEWS_TITLE(title)
-                .setNEWS_TO(mailTo)
-                .setPOSCD(s.getMAIN_POS());
+            content = content.replace("[CHI_NHANH]".trim(), htlsEmailAdd.getTenChiNhanh());
+            content = content.replace("[DEN_NGAY]".trim(), s.getVAL_DT());
+            content = content.replace("[SO_TIEN]".trim(), decimalFormat.format(tongHanMucLuyKe));
+            content = content.replace("[TY_LE]".trim(), percent + "%");
+            String mailFrom = res.getMailFrom();
+            String mailUser = res.getMailUser();
+            String mailPassword = res.getMailPass();
+
             try {
                 log.info(String.format("Start sendEmailToAllBranch HTLS KHCN to : %s Main pos : %s", mailTo, s.getMAIN_POS()));
-                final String response = callApiHelper.sendPost(apiUrl, new Gson().toJson(ccomsEntity), true);
-                final CcommsResponse ccommsResponse = new Gson().fromJson(response, CcommsResponse.class);
-                if (ccommsResponse.getData().getStatus().equalsIgnoreCase("00")) {
-                    if (percent == 90) {
-                        emailStatus = "1";
-                    } else if (percent == 100) {
-                        emailStatus = "3";
-                    }
-                } else {
-                    emailStatus = "5";
-                }
+                EmailEntity emailEntity = new EmailEntity();
+                emailEntity.setEmailTo(mailTo);
+                emailEntity.setEmailContent(content);
+                emailEntity.setEmailTitle(title);
+                emailEntity.setMailFrom(mailFrom);
+                emailEntity.setMailUser(mailUser);
+                emailEntity.setMailPassword(mailPassword);
+                File fileAttch = new File("");
+                emailStatus = emailHelper.sendHtmlEmail(emailEntity, fileAttch);
             } catch (Exception e) {
-                StackTraceElement[] elements = e.getStackTrace();
-                log.error(new Gson().toJson(elements));
-                emailStatus = "9999";
+                log.error(String.valueOf(e));
+                emailStatus = 9999;
             }
-            htlsSumaryRepo.updateEmailStatus(emailStatus, s.getMAIN_POS(), s.getVAL_DT(), ConfigConts.KHCN_TYPE);
-        });
-    }
-
-    public String getApiUrl() {
-        return apiUrl;
-    }
-
-    public HTLSCNAllBanchJobService setApiUrl(String apiUrl) {
-        this.apiUrl = apiUrl;
-        return this;
+            htlsSumaryRepo.updateEmailStatus(Integer.toString(emailStatus), s.getMAIN_POS(), s.getVAL_DT(), ConfigConts.KHCN_TYPE);
+        }
     }
 
-    public boolean isDevelopment() {
-        return isDevelopment;
-    }
 
-    public HTLSCNAllBanchJobService setDevelopment(boolean development) {
+    public void setDevelopment(boolean development) {
         isDevelopment = development;
-        return this;
-    }
-
-    public int getDevelopmentYear() {
-        return developmentYear;
-    }
-
-    public HTLSCNAllBanchJobService setDevelopmentYear(int developmentYear) {
-        this.developmentYear = developmentYear;
-        return this;
-    }
-
-    public int getDevelopmentMonth() {
-        return developmentMonth;
-    }
-
-    public HTLSCNAllBanchJobService setDevelopmentMonth(int developmentMonth) {
-        this.developmentMonth = developmentMonth;
-        return this;
-    }
-
-    public int getDevelopmentDay() {
-        return developmentDay;
-    }
-
-    public HTLSCNAllBanchJobService setDevelopmentDay(int developmentDay) {
-        this.developmentDay = developmentDay;
-        return this;
     }
 }
diff --git a/src/main/java/vn/shb/service/services/HTLSCNBanchJobService.java b/src/main/java/vn/shb/service/services/HTLSCNBanchJobService.java
index 66fc833..a28da5b 100644
--- a/src/main/java/vn/shb/service/services/HTLSCNBanchJobService.java
+++ b/src/main/java/vn/shb/service/services/HTLSCNBanchJobService.java
@@ -1,13 +1,17 @@
 package vn.shb.service.services;
 
 import com.google.gson.Gson;
+import java.text.DecimalFormat;
+import java.text.NumberFormat;
 import java.time.LocalDate;
 import java.time.YearMonth;
 import java.time.format.DateTimeFormatter;
 import java.util.List;
+import java.util.Locale;
 import lombok.extern.slf4j.Slf4j;
 import org.springframework.stereotype.Component;
 import vn.shb.service.configs.ConfigConts;
+import vn.shb.service.configs.EmailTemplateCode;
 import vn.shb.service.entities.CcommsResponse;
 import vn.shb.service.entities.CcomsEntity;
 import vn.shb.service.entities.EMAILTEMPLATES;
@@ -21,14 +25,15 @@ import vn.shb.service.repositories.HtlsEmailAddRepo;
 @Slf4j
 @Component
 public class HTLSCNBanchJobService {
+
     private String apiUrl;
     private final EmailTemplateService emailTemplateService;
     private final HtlsSumaryRepoImp htlsSumaryRepo;
     private final HtlsEmailAddRepo htlsEmailAddRepo;
-    private  boolean isDevelopment;
-    private  int developmentYear;
-    private  int developmentMonth;
-    private  int developmentDay;
+    private boolean isDevelopment;
+    private int developmentYear;
+    private int developmentMonth;
+    private int developmentDay;
     private final CallApiHelper callApiHelper;
     final String simpleDateFormat = "yyyyMMdd";
     final String simpleDateFormatEmail = "dd/MM/yyyy";
@@ -36,24 +41,25 @@ public class HTLSCNBanchJobService {
     final DateTimeFormatter formatter = DateTimeFormatter.ofPattern(simpleDateFormat);
     final DateTimeFormatter formatterEmail = DateTimeFormatter.ofPattern(simpleDateFormatEmail);
 
-    public HTLSCNBanchJobService( EmailTemplateService emailTemplateService, HtlsSumaryRepoImp htlsSumaryRepo, HtlsEmailAddRepo htlsEmailAddRepo,
+    public HTLSCNBanchJobService(EmailTemplateService emailTemplateService, HtlsSumaryRepoImp htlsSumaryRepo, HtlsEmailAddRepo htlsEmailAddRepo,
         CallApiHelper callApiHelper) {
         this.emailTemplateService = emailTemplateService;
         this.htlsSumaryRepo = htlsSumaryRepo;
         this.htlsEmailAddRepo = htlsEmailAddRepo;
         this.callApiHelper = callApiHelper;
     }
+
     public void run() {
         try {
             String valDtEOD = yearMonth.atDay(LocalDate.now().getDayOfMonth() - 1).format(formatter);
             String valDtEmail = yearMonth.atDay(LocalDate.now().getDayOfMonth() - 1).format(formatterEmail);
-            if (isDevelopment){
-                yearMonth = YearMonth.of(developmentYear,developmentMonth);
+            if (isDevelopment) {
+                yearMonth = YearMonth.of(developmentYear, developmentMonth);
                 valDtEOD = yearMonth.atDay(developmentDay - 1).format(formatter);
                 valDtEmail = yearMonth.atDay(developmentDay - 1).format(formatterEmail);
             }
             List<HtlsSumary> htlsSumaryEODCN = htlsSumaryRepo.getHtlsSumariesCNBranchByValDt(valDtEOD);
-            if (null == htlsSumaryEODCN ||  htlsSumaryEODCN.isEmpty()){
+            if (null == htlsSumaryEODCN || htlsSumaryEODCN.isEmpty()) {
                 return;
             }
             log.info("<!----------- HTLSCN Branch Job List htlsSumaryEODCN : " + htlsSumaryEODCN.size() + "--------------->");
@@ -69,51 +75,56 @@ public class HTLSCNBanchJobService {
                 .setPRIORITY(0)
                 .setREF_ID("")
                 .setSTATUS(0);
-            sendEmailToBranch(htlsSumaryEODCN,ccomsEntity,valDtEmail);
-        }catch (Exception e) {
-            ErrorDetailService error =new ErrorDetailService(e.getMessage(),e.getLocalizedMessage(),e.getStackTrace());
+            long tongHanMucLuyKe;
+            tongHanMucLuyKe = htlsSumaryEODCN.stream().mapToLong(x -> Long.parseLong(x.getHM_CN_LUYKE())).sum();
+            sendEmailToBranch(htlsSumaryEODCN, ccomsEntity, valDtEmail,tongHanMucLuyKe);
+        } catch (Exception e) {
+            ErrorDetailService error = new ErrorDetailService(e.getMessage(), e.getLocalizedMessage(), e.getStackTrace());
             log.error(error.toString());
             throw new RuntimeException(e);
         }
     }
-    private void sendEmailToBranch(final List<HtlsSumary> htlsSumaryEODCN,final CcomsEntity ccomsEntity,
-        final String valDtEmail){
-        htlsSumaryEODCN.forEach(s->{
+
+    private void sendEmailToBranch(final List<HtlsSumary> htlsSumaryEODCN, final CcomsEntity ccomsEntity,
+        final String valDtEmail,long tongHanMucLuyKe) {
+        htlsSumaryEODCN.forEach(s -> {
             String emailStatus = "";
             HtlsEmailAdd htlsEmailAdd = htlsEmailAddRepo.getHtlsEmailAddBymainPos(s.getMAIN_POS());
-            if (null != htlsEmailAdd){
-                    EMAILTEMPLATES emailtemplates = emailTemplateService.getEmailTemplateByCODE("HTLS_TEMPLATE");
-                    final String chiNhanh = htlsEmailAdd.getTenChiNhanh();
-                    log.info("<!----------- HTLSCN Branch Job ten chi nhanh : " + chiNhanh + "--------------->");
-                    final String title = emailtemplates.getSENDTITLE().replaceAll("KH_TYPE".trim(), "KHCN".trim());
-                    final String mailTo = htlsEmailAdd.getEmailBgd() + ";" + htlsEmailAdd.getEmailTpKhcn() + ";" + htlsEmailAdd.getEmailPgd();
-                    String content = emailtemplates.getTEMPLATEEMAIL();
-                    content = content.replace("[CHI_NHANH]".trim(), chiNhanh);
-                    content = content.replace("[DEN_NGAY]".trim(), valDtEmail);
-                    content = content.replace("[SO_TIEN]".trim(), s.getHM_CN_LUYKE());
-                    content = content.replace("[TY_LE]".trim(), s.getTYLE_CN());
-                    ccomsEntity.setNEWS_CONTENT(content)
-                        .setNEWS_TITLE(title)
-                        .setNEWS_TO(mailTo)
-                        .setPOSCD(s.getMAIN_POS());
-                    try {
-                        log.info(String.format("Start sendEmailToBranch HTLS KHCN to : %s Main pos : %s", mailTo, s.getMAIN_POS()));
-                        final String response = callApiHelper.sendPost(apiUrl, new Gson().toJson(ccomsEntity), true);
-                        final CcommsResponse ccommsResponse = new Gson().fromJson(response, CcommsResponse.class);
-                        if (ccommsResponse.getData().getStatus().equalsIgnoreCase("00")){
-                            emailStatus ="2";
-                        }else{
-                            emailStatus = "5";
-                        }
-                    } catch (Exception e) {
-                        StackTraceElement[] elements = e.getStackTrace();
-                        log.error(new Gson().toJson(elements));
-                        emailStatus = "9999";
+            if (null != htlsEmailAdd) {
+                EMAILTEMPLATES emailtemplates = emailTemplateService.getEmailTemplateByCODE(EmailTemplateCode.HTLS_TEMPLATE_CN.getText());
+                final String chiNhanh = htlsEmailAdd.getTenChiNhanh();
+                log.info("<!----------- HTLSCN Branch Job ten chi nhanh : " + chiNhanh + "--------------->");
+                final String title = emailtemplates.getSENDTITLE().replaceAll("KH_TYPE".trim(), "KHCN".trim());
+                final String mailTo = htlsEmailAdd.getEmailBgd() + ";" + htlsEmailAdd.getEmailTpKhcn() + ";" + htlsEmailAdd.getEmailPgd();
+                String content = emailtemplates.getTEMPLATEEMAIL();
+                content = content.replace("[CHI_NHANH]".trim(), chiNhanh);
+                content = content.replace("[DEN_NGAY]".trim(), s.getVAL_DT());
+                DecimalFormat nf = (DecimalFormat) NumberFormat.getNumberInstance(Locale.GERMANY);
+                content = content.replace("[SO_TIEN]".trim(), nf.format(tongHanMucLuyKe));
+                content = content.replace("[TY_LE]".trim(), s.getTYLE_CN());
+                ccomsEntity.setNEWS_CONTENT(content)
+                    .setNEWS_TITLE(title)
+                    .setNEWS_TO(mailTo)
+                    .setPOSCD(s.getMAIN_POS());
+                try {
+                    log.info(String.format("Start sendEmailToBranch HTLS KHCN to : %s Main pos : %s", mailTo, s.getMAIN_POS()));
+                    final String response = callApiHelper.sendPost(apiUrl, new Gson().toJson(ccomsEntity), true);
+                    final CcommsResponse ccommsResponse = new Gson().fromJson(response, CcommsResponse.class);
+                    if (ccommsResponse.getData().getStatus().equalsIgnoreCase("00")) {
+                        emailStatus = "2";
+                    } else {
+                        emailStatus = "5";
                     }
-                    htlsSumaryRepo.updateEmailStatus(emailStatus, s.getMAIN_POS(), s.getVAL_DT(), ConfigConts.KHCN_TYPE);
+                } catch (Exception e) {
+                    StackTraceElement[] elements = e.getStackTrace();
+                    log.error(new Gson().toJson(elements));
+                    emailStatus = "9999";
+                }
+                htlsSumaryRepo.updateEmailStatus(emailStatus, s.getMAIN_POS(), s.getVAL_DT(), ConfigConts.KHCN_TYPE);
             }
         });
     }
+
     public String getApiUrl() {
         return apiUrl;
     }
diff --git a/src/main/java/vn/shb/service/services/HTLSDNJobService.java b/src/main/java/vn/shb/service/services/HTLSDNJobService.java
index a97ebde..23bffe1 100644
--- a/src/main/java/vn/shb/service/services/HTLSDNJobService.java
+++ b/src/main/java/vn/shb/service/services/HTLSDNJobService.java
@@ -1,22 +1,23 @@
 package vn.shb.service.services;
 
 import com.google.gson.Gson;
-import java.time.LocalDate;
-import java.time.YearMonth;
-import java.time.format.DateTimeFormatter;
-import java.util.ArrayList;
+
+import java.io.File;
+import java.text.DecimalFormat;
+import java.text.NumberFormat;
+import java.text.SimpleDateFormat;
+import java.util.Calendar;
+import java.util.Date;
 import java.util.List;
+import java.util.Locale;
 import lombok.extern.slf4j.Slf4j;
 import org.springframework.stereotype.Component;
 import vn.shb.service.configs.ConfigConts;
 import vn.shb.service.configs.EmailTemplateCode;
-import vn.shb.service.entities.CcommsResponse;
-import vn.shb.service.entities.CcomsEntity;
-import vn.shb.service.entities.EMAILTEMPLATES;
-import vn.shb.service.entities.ErrorDetailService;
-import vn.shb.service.entities.HtlsEmailAdd;
-import vn.shb.service.entities.HtlsSumary;
-import vn.shb.service.helper.CallApiHelper;
+import vn.shb.service.configs.ParamsConfigs;
+import vn.shb.service.entities.*;
+import vn.shb.service.helper.EmailHelper;
+import vn.shb.service.repositories.EmailTemplateSendToRepo;
 import vn.shb.service.repositories.EmailTemplateService;
 import vn.shb.service.repositories.HtlsEmailAddRepo;
 
@@ -24,54 +25,46 @@ import vn.shb.service.repositories.HtlsEmailAddRepo;
 @Component
 public class HTLSDNJobService {
 
-    private String apiUrl;
     private final EmailTemplateService emailTemplateService;
     private final HtlsSumaryRepoImp htlsSumaryRepo;
     private final HtlsEmailAddRepo htlsEmailAddRepo;
-    private final CallApiHelper callApiHelper;
+    private final EmailTemplateSendToRepo emailTemplateSendToRepo;
+    private final EmailHelper emailHelper;
+    //    private final CallApiHelper callApiHelper;
     private boolean isDevelopment;
-    private int developmentYear;
-    private int developmentMonth;
-    private int developmentDay;
+    private final ParamsConfigs paramsConfigs;
     final String simpleDateFormat = "yyyyMMdd";
-    final String simpleDateFormatEmail = "dd/MM/yyyy";
-    YearMonth yearMonth = YearMonth.of(LocalDate.now().getYear(), LocalDate.now().getMonth());
-    final DateTimeFormatter formatter = DateTimeFormatter.ofPattern(simpleDateFormat);
-    final DateTimeFormatter formatterEmail = DateTimeFormatter.ofPattern(simpleDateFormatEmail);
 
     public HTLSDNJobService(EmailTemplateService emailTemplateService, HtlsSumaryRepoImp htlsSumaryRepo, HtlsEmailAddRepo htlsEmailAddRepo,
-        CallApiHelper callApiHelper) {
+                            EmailTemplateSendToRepo emailTemplateSendToRepo, EmailHelper emailHelper, ParamsConfigs paramsConfigs) {
         this.emailTemplateService = emailTemplateService;
         this.htlsSumaryRepo = htlsSumaryRepo;
         this.htlsEmailAddRepo = htlsEmailAddRepo;
-        this.callApiHelper = callApiHelper;
+        this.emailTemplateSendToRepo = emailTemplateSendToRepo;
+        this.emailHelper = emailHelper;
+        this.paramsConfigs = paramsConfigs;
     }
 
     public void run() {
         try {
-            String valDtEOD = yearMonth.atDay(LocalDate.now().getDayOfMonth() - 1).format(formatter);
-            String valDtEmail = yearMonth.atDay(LocalDate.now().getDayOfMonth() - 1).format(formatterEmail);
+            SimpleDateFormat formatter = new SimpleDateFormat(simpleDateFormat);
+            Date currentDate = new Date();
             if (isDevelopment) {
-                yearMonth = YearMonth.of(developmentYear, developmentMonth);
-                valDtEOD = yearMonth.atDay(developmentDay - 1).format(formatter);
-                valDtEmail = yearMonth.atDay(developmentDay - 1).format(formatterEmail);
+                String dateTest = paramsConfigs.getTestDate();
+                currentDate = formatter.parse(dateTest);
             }
+            Calendar cal = Calendar.getInstance();
+            cal.setTime(currentDate);
+            cal.add(Calendar.DATE, -1);
+            String valDtEOD = formatter.format(cal.getTime());
+            cal.add(Calendar.DATE, -1);
+
             List<HtlsSumary> htlsSumaryEOD;
             htlsSumaryEOD = htlsSumaryRepo.getHtlsSumariesDNByValDt(valDtEOD);
             if (!htlsSumaryEOD.isEmpty()) {
-                CcomsEntity ccomsEntity = new CcomsEntity()
-                    .setAPP_SRC("HHLS")
-                    .setFUNC_SRC("MAIL_HHLS")
-                    .setIS_VIEW_DETAIL(0)
-                    .setNEWS_COMM_TYPE("EMAIL")
-                    .setPARENT_ID("")
-                    .setPAYLOAD_DATA("")
-                    .setPRIORITY(0)
-                    .setREF_ID("")
-                    .setSTATUS(0);
                 log.info("<!----------- HTLSDN Job List htlsSumaryEOD : " + htlsSumaryEOD.size() + "--------------->");
                 log.info("<!----------- HTLSDN Job valDtEOD : " + valDtEOD + "--------------->");
-                sendEmail(htlsSumaryEOD, ccomsEntity, valDtEmail);
+                sendEmail(htlsSumaryEOD);
             }
         } catch (Exception e) {
             ErrorDetailService error = new ErrorDetailService(e.getCause().getMessage(), e.getCause().toString(), e.getStackTrace());
@@ -80,8 +73,11 @@ public class HTLSDNJobService {
         }
     }
 
-    private void sendEmail(final List<HtlsSumary> htlsSumaryEOD, final CcomsEntity ccomsEntity,
-        final String valDtEmail) {
+    private void sendEmail(final List<HtlsSumary> htlsSumaryEOD) {
+        EmailTemplateSendTo res = emailTemplateSendToRepo.getSendToByCode("HTLS");
+        String mailFrom = res.getMailFrom();
+        String mailUser = res.getMailUser();
+        String mailPassword = res.getMailPass();
         htlsSumaryEOD.forEach(s -> {
             HtlsEmailAdd htlsEmailAdd;
             htlsEmailAdd = htlsEmailAddRepo.getHtlsEmailAddBymainPos(s.getMAIN_POS());
@@ -90,43 +86,46 @@ public class HTLSDNJobService {
                 final String chiNhanh = htlsEmailAdd.getTenChiNhanh();
                 String content = emailtemplates.getTEMPLATEEMAIL();
                 content = content.replace("[CHI_NHANH]".trim(), chiNhanh);
-                content = content.replace("[DEN_NGAY]".trim(), valDtEmail);
-                String emailStatus = "";
+                content = content.replace("[DEN_NGAY]".trim(), s.getVAL_DT());
+                int emailStatus;
                 log.info("<!----------- HTLSDN Job start process send email main pos : " + s.getMAIN_POS() + "--------------->");
                 final String title = emailtemplates.getSENDTITLE().replaceAll("KH_TYPE".trim(), "KHDN".trim());
-                final String mailTo = htlsEmailAdd.getEmailBgd() + ";" + htlsEmailAdd.getEmailTpKhdn() + ";" + htlsEmailAdd.getEmailPgd();
-                content = content.replace("[SO_TIEN]".trim(), s.getHM_DN_LUYKE());
+                final String mailTo = htlsEmailAdd.getEmailBgd() + ","
+                                    + htlsEmailAdd.getEmailTpKhdn() + ","
+                                    + htlsEmailAdd.getEmailPgd() + ","
+                                    + htlsEmailAdd.getEmailHttd() + ","
+                                    + htlsEmailAdd.getEmailTpKetoan();
+                DecimalFormat nf = (DecimalFormat) NumberFormat.getNumberInstance(Locale.GERMANY);
+                long sotien = Long.parseLong(s.getHM_DN_LUYKE());
+                content = content.replace("[SO_TIEN]".trim(),nf.format(sotien));
                 content = content.replace("[TY_LE]".trim(), s.getTYLE_DN());
-                ccomsEntity.setNEWS_CONTENT(content)
-                    .setNEWS_TITLE(title)
-                    .setNEWS_TO(mailTo)
-                    .setPOSCD(s.getMAIN_POS());
+//                ccomsEntity.setNEWS_CONTENT(content)
+//                    .setNEWS_TITLE(title)
+//                    .setNEWS_TO(mailTo)
+//                    .setPOSCD(s.getMAIN_POS());
                 try {
-                    log.info(String.format("Start send email HTLS KHDN to : %s Main pos : %s", mailTo, s.getMAIN_POS()));
-                    final String response = callApiHelper.sendPost(apiUrl, new Gson().toJson(ccomsEntity), true);
-                    final CcommsResponse ccommsResponse = new Gson().fromJson(response, CcommsResponse.class);
-                    emailStatus = ccommsResponse.getData().getStatus().equalsIgnoreCase("00") ? "1" : ccommsResponse.getData().getStatus();
+                    EmailEntity emailEntity = new EmailEntity();
+                    emailEntity.setEmailTo(mailTo);
+                    emailEntity.setEmailContent(content);
+                    emailEntity.setEmailTitle(title);
+                    emailEntity.setMailFrom(mailFrom);
+                    emailEntity.setMailUser(mailUser);
+                    emailEntity.setMailPassword(mailPassword);
+                    File fileAttch = new File("");
+                    emailStatus = emailHelper.sendHtmlEmail(emailEntity, fileAttch);
                 } catch (Exception e) {
                     StackTraceElement[] elements = e.getStackTrace();
                     log.error(new Gson().toJson(elements));
-                    emailStatus = "9999";
+                    emailStatus = 9999;
                 }
-                htlsSumaryRepo.updateEmailStatus(emailStatus, s.getMAIN_POS(), s.getVAL_DT(), ConfigConts.KHDN_TYPE);
+                htlsSumaryRepo.updateEmailStatus(Integer.toString(emailStatus), s.getMAIN_POS(), s.getVAL_DT(), ConfigConts.KHDN_TYPE);
+
             } else {
                 log.error("<!----------- HTLSDN Job getHtlsEmailAddBymainPos null. --------------->");
             }
         });
     }
 
-    public String getApiUrl() {
-        return apiUrl;
-    }
-
-    public HTLSDNJobService setApiUrl(String apiUrl) {
-        this.apiUrl = apiUrl;
-        return this;
-    }
-
     public boolean isDevelopment() {
         return isDevelopment;
     }
@@ -136,30 +135,4 @@ public class HTLSDNJobService {
         return this;
     }
 
-    public int getDevelopmentYear() {
-        return developmentYear;
-    }
-
-    public HTLSDNJobService setDevelopmentYear(int developmentYear) {
-        this.developmentYear = developmentYear;
-        return this;
-    }
-
-    public int getDevelopmentMonth() {
-        return developmentMonth;
-    }
-
-    public HTLSDNJobService setDevelopmentMonth(int developmentMonth) {
-        this.developmentMonth = developmentMonth;
-        return this;
-    }
-
-    public int getDevelopmentDay() {
-        return developmentDay;
-    }
-
-    public HTLSDNJobService setDevelopmentDay(int developmentDay) {
-        this.developmentDay = developmentDay;
-        return this;
-    }
 }
diff --git a/src/main/java/vn/shb/service/services/HolidayByCurrencyImpl.java b/src/main/java/vn/shb/service/services/HolidayByCurrencyImpl.java
index 98ceda9..56a19e5 100644
--- a/src/main/java/vn/shb/service/services/HolidayByCurrencyImpl.java
+++ b/src/main/java/vn/shb/service/services/HolidayByCurrencyImpl.java
@@ -1,3 +1,4 @@
+
 package vn.shb.service.services;
 
 import java.util.List;
@@ -24,7 +25,7 @@ public class HolidayByCurrencyImpl {
         StoredProcedureQuery storedProcedure;
         try {
             storedProcedure = entityManager.createStoredProcedureQuery(
-                "PKG_SHB_EMAIL_HUB.GET_HOLIDAY_BY_CURRENCY", HolidayCCY.class);
+                    "PKG_SHB_EMAIL_HUB.GET_HOLIDAY_CURRENCY_LOG", HolidayCCY.class);
             storedProcedure.registerStoredProcedureParameter("P_DATE", String.class, ParameterMode.IN);
             storedProcedure.registerStoredProcedureParameter("OUT_CUR", void.class, ParameterMode.REF_CURSOR);
             storedProcedure.setParameter("P_DATE", date);
@@ -32,10 +33,97 @@ public class HolidayByCurrencyImpl {
             holidayCCYList = (List<HolidayCCY>)storedProcedure.getResultList();
 
         } catch (Exception e) {
-            String errorMsg = "PKG_SHB_EMAIL_HUB.GET_HOLIDAY_BY_CURRENCY/"+ e.getMessage();
+            String errorMsg = "PKG_SHB_EMAIL_HUB.GET_HOLIDAY_CURRENCY_LOG/"+ e.getMessage();
+            ErrorDetailService error = new ErrorDetailService(errorMsg, e.getLocalizedMessage(), e.getStackTrace());
+            log.error(error.toString());
+        }
+        return holidayCCYList;
+    }
+
+    public void insertHolidayCurencyLog(String ccyID, String holiDT, String holiDTBefore, String holiDesc,
+                                        String shortDesc, String year, String status, String sendDate) {
+        StoredProcedureQuery storedProcedure3;
+        try {
+            storedProcedure3 = entityManager.createStoredProcedureQuery(
+                    "PKG_SHB_EMAIL_HUB.INSERT_HOLIDAY_CURENCY_LOG", HolidayCCY.class);
+            storedProcedure3.registerStoredProcedureParameter("P_CCY_CD", String.class, ParameterMode.IN);
+            storedProcedure3.registerStoredProcedureParameter("P_HOLI_DT", String.class, ParameterMode.IN);
+            storedProcedure3.registerStoredProcedureParameter("P_HOLI_DT_BEFORE", String.class, ParameterMode.IN);
+            storedProcedure3.registerStoredProcedureParameter("P_HOLI_DESC", String.class, ParameterMode.IN);
+            storedProcedure3.registerStoredProcedureParameter("P_SHORT_DESC", String.class, ParameterMode.IN);
+            storedProcedure3.registerStoredProcedureParameter("P_YEAR", String.class, ParameterMode.IN);
+            storedProcedure3.registerStoredProcedureParameter("P_STATUS", String.class, ParameterMode.IN);
+            storedProcedure3.registerStoredProcedureParameter("P_SEND_DATE", String.class, ParameterMode.IN);
+            storedProcedure3.registerStoredProcedureParameter("OUT_CUR", void.class, ParameterMode.REF_CURSOR);
+            storedProcedure3.setParameter("P_CCY_CD", ccyID);
+            storedProcedure3.setParameter("P_HOLI_DT", holiDT);
+            storedProcedure3.setParameter("P_HOLI_DT_BEFORE", holiDTBefore);
+            storedProcedure3.setParameter("P_HOLI_DESC", holiDesc);
+            storedProcedure3.setParameter("P_SHORT_DESC", shortDesc);
+            storedProcedure3.setParameter("P_YEAR", year);
+            storedProcedure3.setParameter("P_STATUS", status);
+            storedProcedure3.setParameter("P_SEND_DATE", sendDate);
+            storedProcedure3.execute();
+            log.info(" INSERT_HOLIDAY_CURENCY_LOG >>>>>>>>>>>> CCY:  " + ccyID + ", holiDT" + holiDT
+                    + ", shortDesc: " + shortDesc + ", year: " + year);
+        } catch (Exception e) {
+            String errorMsg = "PKG_SHB_EMAIL_HUB.GET_HOLIDAY_BY_DAY_AND_CURRENCY/"+ e.getMessage();
+            ErrorDetailService error = new ErrorDetailService(errorMsg, e.getLocalizedMessage(), e.getStackTrace());
+            log.error(error.toString());
+        }
+    }
+
+    public List<HolidayCCY> getListSendMailDate(String date){
+        List<HolidayCCY> holidayCCYList = null;
+        StoredProcedureQuery storedProcedure;
+        try {
+            storedProcedure = entityManager.createStoredProcedureQuery(
+                    "PKG_SHB_EMAIL_HUB.GET_HOLIDAY_CURRENCY_LOG", HolidayCCY.class);
+            storedProcedure.registerStoredProcedureParameter("P_DATE", String.class, ParameterMode.IN);
+            storedProcedure.registerStoredProcedureParameter("OUT_CUR", void.class, ParameterMode.REF_CURSOR);
+            storedProcedure.setParameter("P_DATE", date);
+            storedProcedure.execute();
+            holidayCCYList = (List<HolidayCCY>)storedProcedure.getResultList();
+        } catch (Exception e) {
+            String errorMsg = "PKG_SHB_EMAIL_HUB.GET_HOLIDAY_CURRENCY_LOG/"+ e.getMessage();
             ErrorDetailService error = new ErrorDetailService(errorMsg, e.getLocalizedMessage(), e.getStackTrace());
             log.error(error.toString());
         }
         return holidayCCYList;
     }
+
+    public void updateEmailStatus(String status, String holiDt, String shortDesc, String subject, String title,
+                                  String mailFrom, String mailTo, String ccy_cd, String holi_dt_before) {
+        StoredProcedureQuery storedProcedure4;
+        try {
+            storedProcedure4 = entityManager.createStoredProcedureQuery(
+                    "PKG_SHB_EMAIL_HUB.UPDATE_HOLIDAY_CURENCY_LOG");
+            storedProcedure4.registerStoredProcedureParameter("P_STATUS", String.class, ParameterMode.IN);
+            storedProcedure4.registerStoredProcedureParameter("P_HOLI_DT", String.class, ParameterMode.IN);
+            storedProcedure4.registerStoredProcedureParameter("P_SHORT_DESC", String.class, ParameterMode.IN);
+            storedProcedure4.registerStoredProcedureParameter("P_CONTENT", String.class, ParameterMode.IN);
+            storedProcedure4.registerStoredProcedureParameter("P_SUBJECT", String.class, ParameterMode.IN);
+            storedProcedure4.registerStoredProcedureParameter("P_MAIL_FROM", String.class, ParameterMode.IN);
+            storedProcedure4.registerStoredProcedureParameter("P_MAIL_TO", String.class, ParameterMode.IN);
+            storedProcedure4.registerStoredProcedureParameter("P_CCY_CY", String.class, ParameterMode.IN);
+            storedProcedure4.registerStoredProcedureParameter("P_HOLI_DT_BEFORE", String.class, ParameterMode.IN);
+            storedProcedure4.registerStoredProcedureParameter("OUT_CUR", void.class, ParameterMode.REF_CURSOR);
+            storedProcedure4.setParameter("P_STATUS", status);
+            storedProcedure4.setParameter("P_HOLI_DT", holiDt);
+            storedProcedure4.setParameter("P_SHORT_DESC", shortDesc);
+            storedProcedure4.setParameter("P_CONTENT", subject);
+            storedProcedure4.setParameter("P_SUBJECT", title);
+            storedProcedure4.setParameter("P_MAIL_FROM", mailFrom);
+            storedProcedure4.setParameter("P_MAIL_TO", mailTo);
+            storedProcedure4.setParameter("P_CCY_CY", ccy_cd);
+            storedProcedure4.setParameter("P_HOLI_DT_BEFORE", holi_dt_before);
+            storedProcedure4.execute();
+            log.info(" Update Email Status 0>>>>>>>>>>>>: ");
+        } catch (Exception e) {
+            String errorMsg = "PKG_SHB_EMAIL_HUB.UPDATE_HOLIDAY_CURENCY_LOG/"+ e.getMessage();
+            ErrorDetailService error = new ErrorDetailService(errorMsg, e.getLocalizedMessage(), e.getStackTrace());
+            log.error(error.toString());
+        }
+    }
 }
+
diff --git a/src/main/java/vn/shb/service/services/HolidayByCurrencyJobService.java b/src/main/java/vn/shb/service/services/HolidayByCurrencyJobService.java
index 0bc9770..3202f95 100644
--- a/src/main/java/vn/shb/service/services/HolidayByCurrencyJobService.java
+++ b/src/main/java/vn/shb/service/services/HolidayByCurrencyJobService.java
@@ -1,14 +1,23 @@
 package vn.shb.service.services;
 
+import java.io.File;
+import java.text.DateFormat;
+import java.text.SimpleDateFormat;
 import java.time.DayOfWeek;
 import java.time.LocalDate;
-import java.time.YearMonth;
-import java.time.format.DateTimeFormatter;
+import java.util.Calendar;
+import java.util.Date;
 import java.util.List;
+
+import com.google.gson.Gson;
 import lombok.extern.slf4j.Slf4j;
 import org.springframework.stereotype.Component;
-import vn.shb.service.entities.ErrorDetailService;
-import vn.shb.service.entities.HolidayCCY;
+import vn.shb.service.configs.EmailTemplateCode;
+import vn.shb.service.configs.ParamsConfigs;
+import vn.shb.service.entities.*;
+import vn.shb.service.helper.EmailHelper;
+import vn.shb.service.repositories.EmailTemplateSendToRepo;
+import vn.shb.service.repositories.EmailTemplateService;
 
 @Slf4j
 @Component
@@ -16,34 +25,150 @@ public class HolidayByCurrencyJobService {
 
     final String simpleDateFormat = "yyyyMMdd";
     final String simpleDateFormatEmail = "dd/MM/yyyy";
-    YearMonth yearMonth = YearMonth.of(LocalDate.now().getYear(), LocalDate.now().getMonth());
-    final DateTimeFormatter formatter = DateTimeFormatter.ofPattern(simpleDateFormat);
-    final DateTimeFormatter formatterEmail = DateTimeFormatter.ofPattern(simpleDateFormatEmail);
+    final String holSendToCode = "HOLIDAY_BY_CURRENCY";
     private final HolidayByCurrencyImpl holidayByCurrency;
+    private final EmailTemplateSendToRepo emailTemplateSendToRepo;
+    private final EmailTemplateService emailTemplateService;
+    private final EmailHelper emailHelper;
+    private final ParamsConfigs paramsConfigs;
 
-    public HolidayByCurrencyJobService(HolidayByCurrencyImpl holidayByCurrency) {
+    public HolidayByCurrencyJobService(HolidayByCurrencyImpl holidayByCurrency,
+                                       EmailTemplateSendToRepo emailTemplateSendToRepo,
+                                       EmailTemplateService emailTemplateService,
+                                       EmailHelper emailHelper, ParamsConfigs paramsConfigs) {
         this.holidayByCurrency = holidayByCurrency;
+        this.emailTemplateSendToRepo = emailTemplateSendToRepo;
+        this.emailTemplateService = emailTemplateService;
+        this.emailHelper = emailHelper;
+        this.paramsConfigs = paramsConfigs;
     }
 
+
     public void run() {
         try {
-            String pDate = null;
-            String pDateBefore = null;
+            String pDate;
+            final String simpleDateFormat = "yyyyMMdd";
+            final String simpleDateFormatEmail = "dd/MM/yyyy";
             DayOfWeek dayOfWeek = LocalDate.now().getDayOfWeek();
-            if (dayOfWeek == DayOfWeek.FRIDAY){
-
-            }else{
-                pDate = yearMonth.atDay(LocalDate.now().getDayOfMonth() + 2).format(formatter);
-                pDateBefore = yearMonth.atDay(LocalDate.now().getDayOfMonth() + 1).format(formatterEmail);
+            SimpleDateFormat formatter = new SimpleDateFormat(simpleDateFormat);
+            SimpleDateFormat formatterEmail = new SimpleDateFormat(simpleDateFormatEmail);
+            Date currentDate = new Date();
+            String dateTest = paramsConfigs.getTestDate();
+            if(dateTest.length() != 0){
+                currentDate = formatter.parse(dateTest);
+                int year = Integer.parseInt(dateTest.substring(0,4));
+                int month = Integer.parseInt(dateTest.substring(4,6));
+                int day = Integer.parseInt(dateTest.substring(6,8));
+                dayOfWeek = LocalDate.of(year, month, day).getDayOfWeek();
+                log.info("HolidayByCurrency currentDate : " + currentDate);
             }
-            List<HolidayCCY> holidayCCYList = holidayByCurrency.getListHolidayCCY(pDate);
-            if (null != holidayCCYList || !holidayCCYList.isEmpty()){
+            Calendar cal = Calendar.getInstance();
+            cal.setTime(currentDate);
+//            DayOfWeek dayOfWeek = DayOfWeek.of(cal.get(Calendar.DAY_OF_WEEK));
+            cal.add(Calendar.DATE, 1);
+            String pNext1Day = formatterEmail.format(cal.getTime());
+            cal.add(Calendar.DATE, 1);
+            String pNext2Day = formatter.format(cal.getTime());
+            cal.add(Calendar.DATE, 1);
+            String pNext3Day = formatter.format(cal.getTime());
+            cal.add(Calendar.DATE, 1);
+            String pNext4Day = formatter.format(cal.getTime());
 
+            pDate = formatter.format(currentDate);
+            String dateStr = pDate;
+            log.info("dayOfWeek : " + dayOfWeek + "dateStr: " + dateStr);
+            //SEND MAIL AND UPDATE STATUS HOLIDAY_CURENCY_LOG
+            if (DayOfWeek.SATURDAY != dayOfWeek && DayOfWeek.SUNDAY != dayOfWeek) {
+                if (DayOfWeek.FRIDAY == dayOfWeek) {
+                    String[] checkDate = {pNext2Day, pNext3Day, pNext4Day};
+                    for (String value : checkDate) {
+                        List<HolidayCCY> holidayCCYList = holidayByCurrency.getListHolidayCCY(value);
+                        if (null != holidayCCYList) {
+                            log.info("Ngay quet: " + value + ", size = " + holidayCCYList.size());
+                            holidayCCYList.forEach(s -> {
+                                String ccyID = s.getCcyCd();
+                                String shortDesc = s.getShortDesc();
+                                try {
+                                    sendEmailHoliday(ccyID, value, shortDesc, dateStr, pNext1Day);
+                                } catch (InterruptedException e) {
+                                    e.printStackTrace();
+                                    log.error(String.valueOf(e));
+                                }
+                            });
+                        }
+                    }
+            } else {  //cac ngay MON, TUE,WE,THU
+                List<HolidayCCY> holidayCCYList = holidayByCurrency.getListHolidayCCY(pNext2Day);
+                if (null != holidayCCYList) {
+                    log.info("Ngay quet: " + pNext2Day + ", size = " + holidayCCYList.size());
+                    holidayCCYList.forEach(s -> {
+                        String ccyID = s.getCcyCd();
+                        String holiDT = s.getHoliDt();
+                        String shortDesc = s.getShortDesc();
+                        try {
+                            sendEmailHoliday(ccyID, holiDT, shortDesc, dateStr, pNext1Day);
+                        } catch (InterruptedException e) {
+                            e.printStackTrace();
+                            log.error(String.valueOf(e));
+                        }
+                    });
+                }
             }
+        }
+    } catch (Exception e) {
+        ErrorDetailService error = new ErrorDetailService(e.getMessage(), e.getLocalizedMessage(), e.getStackTrace());
+        log.error(error.toString());
+        throw new RuntimeException(e);
+    }
+}
 
+
+    private void sendEmailHoliday(String ccyID, String holiDT, String shortDesc, String dateStr, String pNext1Day) throws InterruptedException {
+        EmailTemplateSendTo res = emailTemplateSendToRepo.getSendToByCode(holSendToCode);
+        EMAILTEMPLATES emailtemplates = emailTemplateService.getEmailTemplateByCODE(EmailTemplateCode.HOLIDAY_BY_CURRENCY.getText());
+        String holiDTEmail = getDateFormatEmail(holiDT);
+        String content = emailtemplates.getTEMPLATEEMAIL();
+        content = content.replace("[[DATE]]".trim(), holiDTEmail);
+        content = content.replace("[[CURRENCY]]".trim(), shortDesc);
+        content = content.replace("[[DATE-1]]".trim(), pNext1Day);
+        int emailStatus;
+        log.info("<!----------- HolidayByCurrentcy Job start process send email HolidayByCurrency : ccy: "
+                + shortDesc + ", holiDt: " + holiDTEmail + "--------------->");
+        final String title = emailtemplates.getSENDTITLE().replace("[[CURRENCY]]".trim(), shortDesc.trim());
+        final String mailTo = res.getListMail();
+        String mailFrom = res.getMailFrom();
+        String mailUser = res.getMailUser();
+        String mailPassword = res.getMailPass();
+        try {
+            EmailEntity emailEntity = new EmailEntity();
+            emailEntity.setEmailTo(mailTo);
+            emailEntity.setEmailContent(content);
+            emailEntity.setEmailTitle(title);
+            emailEntity.setMailFrom(mailFrom);
+            emailEntity.setMailUser(mailUser);
+            emailEntity.setMailPassword(mailPassword);
+            File fileAttch = new File("");
+            emailStatus = emailHelper.sendHtmlEmail(emailEntity, fileAttch);
         } catch (Exception e) {
-            ErrorDetailService error = new ErrorDetailService(e.getMessage(), e.getLocalizedMessage(), e.getStackTrace());
-            log.error(error.toString());
+            StackTraceElement[] elements = e.getStackTrace();
+            log.error(new Gson().toJson(elements));
+            emailStatus = 9999;
+        }
+        holidayByCurrency.updateEmailStatus(Integer.toString(emailStatus), holiDT, shortDesc, content, title, mailFrom, mailTo, ccyID, pNext1Day);
+    }
+
+    private String getDateFormatEmail(String pNext1Day) {
+        Date dt;
+        SimpleDateFormat formatter = new SimpleDateFormat(simpleDateFormat);
+        DateFormat dateFormat = new SimpleDateFormat(simpleDateFormatEmail);
+        String strDate;
+        try{
+            dt = formatter.parse(pNext1Day);
+            strDate = dateFormat.format(dt);
+            System.out.println(strDate);
+            return strDate;
+        } catch (Exception e){
+            log.error(e.toString());
             throw new RuntimeException(e);
         }
     }
diff --git a/src/main/java/vn/shb/service/services/HtlsEmailAddImpl.java b/src/main/java/vn/shb/service/services/HtlsEmailAddImpl.java
index e1d0c62..666c58a 100644
--- a/src/main/java/vn/shb/service/services/HtlsEmailAddImpl.java
+++ b/src/main/java/vn/shb/service/services/HtlsEmailAddImpl.java
@@ -6,12 +6,16 @@ import javax.persistence.ParameterMode;
 import javax.persistence.StoredProcedureQuery;
 import lombok.extern.slf4j.Slf4j;
 import org.springframework.stereotype.Component;
+import org.springframework.transaction.annotation.Transactional;
 import vn.shb.service.entities.ErrorDetailService;
 import vn.shb.service.entities.HtlsEmailAdd;
 import vn.shb.service.repositories.HtlsEmailAddRepo;
 
+import java.util.List;
+
 @Slf4j
 @Component
+@Transactional
 public class HtlsEmailAddImpl implements HtlsEmailAddRepo {
 
     private final EntityManager entityManager;
@@ -40,4 +44,20 @@ public class HtlsEmailAddImpl implements HtlsEmailAddRepo {
         }
         return htlsSumary;
     }
+
+    public List<HtlsEmailAdd> getAllHtlsEmailAdd() {
+        StoredProcedureQuery storedProcedure;
+        try {
+            storedProcedure = entityManager.createStoredProcedureQuery(
+                    "PKG_SHB_EMAIL_HUB.HTLS_GET_ALL_EMAIL_ADD",HtlsEmailAdd.class);
+            storedProcedure.registerStoredProcedureParameter("OUT_CUR", void.class, ParameterMode.REF_CURSOR);
+            storedProcedure.execute();
+            return storedProcedure.getResultList();
+        } catch (Exception e) {
+            String errorMsg = "HTLS_GET_ALL_EMAIL_ADD/"+ e.getMessage();
+            ErrorDetailService error = new ErrorDetailService(errorMsg, e.getLocalizedMessage(), e.getStackTrace());
+            log.error(error.toString());
+            return null;
+        }
+    }
 }
diff --git a/src/main/java/vn/shb/service/services/HtlsSumaryRepoImp.java b/src/main/java/vn/shb/service/services/HtlsSumaryRepoImp.java
index 79b9600..9abeae7 100644
--- a/src/main/java/vn/shb/service/services/HtlsSumaryRepoImp.java
+++ b/src/main/java/vn/shb/service/services/HtlsSumaryRepoImp.java
@@ -5,16 +5,20 @@ import java.util.List;
 import javax.persistence.EntityManager;
 import javax.persistence.EntityManagerFactory;
 import javax.persistence.ParameterMode;
+import javax.persistence.PersistenceContext;
 import javax.persistence.StoredProcedureQuery;
 import lombok.extern.slf4j.Slf4j;
 import org.springframework.stereotype.Service;
+import org.springframework.transaction.annotation.Transactional;
 import vn.shb.service.entities.ErrorDetailService;
 import vn.shb.service.entities.HtlsSumary;
 
 @Slf4j
 @Service
+@Transactional
 public class HtlsSumaryRepoImp {
 
+    @PersistenceContext
     private final EntityManager entityManager;
 
     public HtlsSumaryRepoImp(EntityManagerFactory entityManagerFactory) {
@@ -45,6 +49,25 @@ public class HtlsSumaryRepoImp {
         }
     }
 
+//    public void updateEmailStatusCN(String status, String valDt) {
+//        StoredProcedureQuery storedProcedure;
+//        try {
+//            storedProcedure = entityManager.createStoredProcedureQuery(
+//                    "PKG_SHB_EMAIL_HUB.HTLS_UPDATE_EMAIL_STATUS_CN");
+//            storedProcedure.registerStoredProcedureParameter("P_STATUS", String.class, ParameterMode.IN);
+//            storedProcedure.registerStoredProcedureParameter("P_VAL_DT", String.class, ParameterMode.IN);
+//            storedProcedure.registerStoredProcedureParameter("OUT_CUR", void.class, ParameterMode.REF_CURSOR);
+//            storedProcedure.setParameter("P_STATUS", status);
+//            storedProcedure.setParameter("P_VAL_DT", valDt);
+//            storedProcedure.execute();
+//            log.info(" HTLS_UPDATE_EMAIL_STATUS_CN Status >>>>>>>>>>>>: " + status + "/");
+//        } catch (Exception e) {
+//            String errorMsg = "PKG_SHB_EMAIL_HUB.HTLS_UPDATE_EMAIL_STATUS_CN/" + e.getMessage();
+//            ErrorDetailService error = new ErrorDetailService(errorMsg, e.getLocalizedMessage(), e.getStackTrace());
+//            log.error(error.toString());
+//        }
+//    }
+
     public List<HtlsSumary> getHtlsSumariesDNByValDt(String valDt) {
         List<HtlsSumary> htlsSumaries = null;
         StoredProcedureQuery storedProcedure;
@@ -74,11 +97,10 @@ public class HtlsSumaryRepoImp {
             storedProcedure.registerStoredProcedureParameter("P_VAL_DT", String.class, ParameterMode.IN);
             storedProcedure.registerStoredProcedureParameter("OUT_CUR", void.class, ParameterMode.REF_CURSOR);
             storedProcedure.setParameter("P_VAL_DT", valDt);
-            storedProcedure.execute();
+            boolean execute = storedProcedure.execute();
             htlsSumaries = (List<HtlsSumary>)storedProcedure.getResultList();
             if (htlsSumaries.size() == 1){
                 if (!htlsSumaries.get(0).getErrorCode().equalsIgnoreCase("00")){
-                    log.info("getHtlsSumariesCNAllBranchByValDt/HTLS_GET_DATA_KHCN_ALL_BRANCH >>>>>>>>>>>> : " + htlsSumaries.get(0).toString());
                     return null;
                 }
             }
@@ -109,29 +131,28 @@ public class HtlsSumaryRepoImp {
         return htlsSumaries;
     }
 
-    public HtlsSumary getHtlsSumariesByValDtMainPos(String valDt, String mainPos) {
-        HtlsSumary htlsSumary = new HtlsSumary();
-        StoredProcedureQuery storedProcedure;
-        try {
-            storedProcedure = entityManager.createStoredProcedureQuery(
-                "PKG_SHB_EMAIL_HUB.HTLS_GET_EMAIL_ADD_BY_MAINPOS",HtlsSumary.class);
-            storedProcedure.registerStoredProcedureParameter("P_VAL_DT", String.class, ParameterMode.IN);
-            storedProcedure.registerStoredProcedureParameter("P_MAIN_POS", String.class, ParameterMode.IN);
-            storedProcedure.registerStoredProcedureParameter("OUT_CUR", void.class, ParameterMode.REF_CURSOR);
-            storedProcedure.setParameter("P_VAL_DT", valDt);
-            storedProcedure.setParameter("P_MAIN_POS", mainPos);
-            storedProcedure.execute();
-            htlsSumary = (HtlsSumary) storedProcedure.getSingleResult();
-            if (!htlsSumary.getErrorCode().equalsIgnoreCase("00")){
-                log.info("getHtlsSumariesCNAllBranchByValDt/GET_DATA_MAINPOS >>>>>>>>>>>> : " + htlsSumary.toString());
-                return null;
-            }
-
-        } catch (Exception e) {
-            String errorMsg = "PKG_SHB_EMAIL_HUB.HTLS_GET_EMAIL_ADD_BY_MAINPOS/"+ e.getMessage();
-            ErrorDetailService error = new ErrorDetailService(errorMsg, e.getLocalizedMessage(), e.getStackTrace());
-            log.error(error.toString());
-        }
-        return htlsSumary;
-    }
+//    public HtlsSumary getHtlsSumariesByValDtMainPos(String valDt, String mainPos) {
+//        HtlsSumary htlsSumary = new HtlsSumary();
+//        StoredProcedureQuery storedProcedure;
+//        try {
+//            storedProcedure = entityManager.createStoredProcedureQuery(
+//                "PKG_SHB_EMAIL_HUB.HTLS_GET_EMAIL_ADD_BY_MAINPOS",HtlsSumary.class);
+//            storedProcedure.registerStoredProcedureParameter("P_VAL_DT", String.class, ParameterMode.IN);
+//            storedProcedure.registerStoredProcedureParameter("P_MAIN_POS", String.class, ParameterMode.IN);
+//            storedProcedure.registerStoredProcedureParameter("OUT_CUR", void.class, ParameterMode.REF_CURSOR);
+//            storedProcedure.setParameter("P_VAL_DT", valDt);
+//            storedProcedure.setParameter("P_MAIN_POS", mainPos);
+//            storedProcedure.execute();
+//            htlsSumary = (HtlsSumary) storedProcedure.getSingleResult();
+//            if (!htlsSumary.getErrorCode().equalsIgnoreCase("00")){
+//                return null;
+//            }
+//
+//        } catch (Exception e) {
+//            String errorMsg = "PKG_SHB_EMAIL_HUB.HTLS_GET_EMAIL_ADD_BY_MAINPOS/"+ e.getMessage();
+//            ErrorDetailService error = new ErrorDetailService(errorMsg, e.getLocalizedMessage(), e.getStackTrace());
+//            log.error(error.toString());
+//        }
+//        return htlsSumary;
+//    }
 }
diff --git a/src/main/java/vn/shb/service/services/SHBEmailJobService.java b/src/main/java/vn/shb/service/services/SHBEmailJobService.java
new file mode 100644
index 0000000..9125d94
--- /dev/null
+++ b/src/main/java/vn/shb/service/services/SHBEmailJobService.java
@@ -0,0 +1,268 @@
+package vn.shb.service.services;
+
+import com.google.gson.Gson;
+import lombok.extern.slf4j.Slf4j;
+import org.springframework.stereotype.Component;
+import vn.shb.service.configs.ParamsConfigs;
+import vn.shb.service.entities.*;
+import vn.shb.service.helper.CallApiHelper;
+import vn.shb.service.helper.EmailHelper;
+import vn.shb.service.repositories.ShbEmailJobRepo;
+
+import javax.mail.internet.AddressException;
+import javax.mail.internet.InternetAddress;
+
+import java.io.File;
+import java.util.*;
+import java.util.regex.Matcher;
+import java.util.regex.Pattern;
+
+@Slf4j
+@Component
+public class SHBEmailJobService {
+
+    private static ShbEmailJobImpl shbEmailJob;
+    private static EmailHelper emailHelper;
+    private static CallApiHelper callApiHelper;
+    private static ParamsConfigs paramsConfigs;
+    private static ShbEmailJobRepo shbEmailJobRepo;
+
+    public SHBEmailJobService(ShbEmailJobImpl shbEmailJob, EmailHelper emailHelper, CallApiHelper callApiHelper, ParamsConfigs paramsConfigs, ShbEmailJobRepo shbEmailJobRepo) {
+        SHBEmailJobService.shbEmailJob = shbEmailJob;
+        SHBEmailJobService.emailHelper = emailHelper;
+        SHBEmailJobService.callApiHelper = callApiHelper;
+        SHBEmailJobService.paramsConfigs = paramsConfigs;
+        SHBEmailJobService.shbEmailJobRepo = shbEmailJobRepo;
+    }
+
+    public static void run() {
+        try {
+            int retryNumber = 0;
+            int maxRecord = paramsConfigs.getMaxRecord();
+//            List<SHBEmailJob> listShbEmailJob = shbEmailJob.getListSendMail();
+            List<SHBEmailJob> listShbEmailJob = shbEmailJobRepo.getShbEmailJob(maxRecord);
+            if (null != listShbEmailJob){
+                log.info("<!----------- SHBEmailJobService List listShbEmailJob : " + listShbEmailJob.size() + "--------------->");
+                for (SHBEmailJob s : listShbEmailJob) {
+                    long id = s.getID();
+                    String validateEmail;
+                    String systemCode = s.getSystemCode().trim();
+                    String emailStatus =  s.getEmailStatus().trim();
+                    String smsStatus =  s.getSmsStatus().trim();
+                    String type = s.getType().trim();
+                    String channel = s.getChannel().trim();  //channel = 0: EMAIL, channel = 1: SMS, channel = 2: EMAIL + SMS
+                    String emailFrom = s.getEmailFrom().trim();
+                    String emailTo = s.getEmailTo().trim();
+                    String emailContent = s.getEmailContent();
+                    String emailTittle = s.getEmailTitle().trim();
+                    String emailUser = s.getEmailUser().trim();
+                    String emailPassword = s.getEmailPassWord().trim();
+                    String attactFilePath = s.getAttactFilePath();
+                    String phoneNumer = s.getPhoneNumer();
+                    if(s.getRetryNumber()!=null){
+                        retryNumber = Integer.parseInt(s.getRetryNumber().trim());
+                    }
+                    if(phoneNumer!=null) {
+                        phoneNumer = phoneNumer.replaceAll("[^0-9]", "");
+                    }
+                    String smsContent = s.getSmsContent();
+                    validateEmail = isValidEmailAddress(emailTo, type);
+                    switch (channel) {
+                        case "0":
+                            if(!emailStatus.equals("1")){
+                                if (type.equals("EXTERNAL")) {
+                                    sendEmailShbEmailJobExternal(id, emailContent, validateEmail, emailTittle, systemCode, retryNumber);
+                                } else if (type.equals("INTERNAL")) {
+                                    sendEmailShbEmailJobINTERNAL(id, validateEmail, emailFrom, emailContent, emailTittle, emailUser, emailPassword, attactFilePath, retryNumber);
+                                }
+                            }
+                        break;
+                        case "1":
+                            if(!smsStatus.equals("1")){
+                                if(phoneNumer!=null){
+                                    if(validateMobileNumber(phoneNumer)){
+                                        sendSMSShbEmailJob(id, smsContent, phoneNumer, systemCode, retryNumber);
+                                    } else {
+                                        log.info("SHBEmailJobService phoneNumer khong ton tai: " + phoneNumer);
+                                    }
+                                }
+                            }
+                            break;
+                        case "2":
+                            if(!emailStatus.equals("1")) {
+                                if (type.equals("EXTERNAL")) {
+                                    sendEmailShbEmailJobExternal(id, emailContent, emailTo, emailTittle, systemCode, retryNumber);
+                                } else if (type.equals("INTERNAL")) {
+                                    sendEmailShbEmailJobINTERNAL(id, emailTo, emailFrom, emailContent, emailTittle, emailUser, emailPassword, attactFilePath,                                                                       retryNumber);
+                                }
+                            }
+                            if(!smsStatus.equals("1")) {
+                                if (phoneNumer != null) {
+                                    if (validateMobileNumber(phoneNumer)) {
+                                        sendSMSShbEmailJob(id, smsContent, phoneNumer, systemCode, retryNumber);
+                                    }
+                                }
+                            }
+                        break;
+                    }
+                }
+                Thread.sleep(1000000);
+            }
+        } catch (Exception e) {
+            ErrorDetailService error = new ErrorDetailService(e.getMessage(), e.getLocalizedMessage(), e.getStackTrace());
+            log.error(error.toString());
+            throw new RuntimeException(e);
+        }
+    }
+
+    private static void sendSMSShbEmailJob(Long id, String emailContent, String emailTo, String systemCode, int retryNumber) {
+        int smsStatus;
+        if (emailContent != null) {
+            CcomsEntity ccomsEntity = new CcomsEntity()
+                    .setAPP_SRC(systemCode)
+                    .setFUNC_SRC(systemCode)
+                    .setIS_VIEW_DETAIL(0)
+                    .setNEWS_COMM_TYPE("SMS")
+                    .setPRIORITY(0)
+                    .setSTATUS(0)
+                    .setNEWS_CONTENT(emailContent)
+                    .setNEWS_TO(emailTo);
+            try {
+                String apiUrl = paramsConfigs.getApiUrl();
+                final String response = callApiHelper.sendPost(apiUrl, new Gson().toJson(ccomsEntity), true);
+                final CcommsResponse ccommsResponse = new Gson().fromJson(response, CcommsResponse.class);
+                smsStatus = Integer.parseInt(ccommsResponse.getData().getStatus().equalsIgnoreCase("00") ? "1" : ccommsResponse.getData().getStatus());
+                log.info("<!----------- send email sendSMSShbEmailJob : smsStatus: " + smsStatus + "--------------->");
+            } catch (Exception e) {
+                retryNumber += 1;
+                StackTraceElement[] elements = e.getStackTrace();
+                log.error(new Gson().toJson(elements));
+                smsStatus = 2;
+                log.info("<!----------- send email sendEmailShbEmailJobINTERNAL : emailStatus: 2--------------->");
+                shbEmailJob.updateShbEmailJob(id, smsStatus, "SMS", retryNumber);
+                log.error(new Gson().toJson(elements));
+
+            }
+            shbEmailJob.updateShbEmailJob(id, smsStatus, "SMS", 0);
+        }
+    }
+
+    private static void sendEmailShbEmailJobExternal(Long id, String emailContent, String emailAddress, String emailTitle, String systemCode, int retryNumber) {
+        int emailStatus;
+        if (emailContent != null) {
+            CcomsEntity ccomsEntity = new CcomsEntity()
+//                    .setAPP_SRC(systemCode)
+//                    .setFUNC_SRC(systemCode)
+                    .setAPP_SRC("HHLS")
+                    .setFUNC_SRC("MAIL_HHLS")
+                    .setIS_VIEW_DETAIL(0)
+                    .setNEWS_COMM_TYPE("EMAIL")
+                    .setPARENT_ID("")
+                    .setPAYLOAD_DATA("")
+                    .setPRIORITY(0)
+                    .setREF_ID("")
+                    .setSTATUS(0)
+                    .setNEWS_CONTENT(emailContent)
+                    .setNEWS_TITLE(emailTitle)
+                    .setNEWS_TO(emailAddress);
+            try {
+                String apiUrl = paramsConfigs.getApiUrl();
+                final String response = callApiHelper.sendPost(apiUrl, new Gson().toJson(ccomsEntity), true);
+                final CcommsResponse ccommsResponse = new Gson().fromJson(response, CcommsResponse.class);
+                emailStatus = Integer.parseInt(ccommsResponse.getData().getStatus().equalsIgnoreCase("00") ? "1" : ccommsResponse.getData().getStatus());
+                log.info("<!----------- send email sendEmailShbEmailJobINTERNAL email : " + emailAddress + " : emailStatus: " + emailStatus + "--------------->");
+            } catch (Exception e) {
+                retryNumber += 1;
+                StackTraceElement[] elements = e.getStackTrace();
+                emailStatus = 2;
+                log.info("<!----------- send email sendEmailShbEmailJobINTERNAL email : \" + emailAddress + \" : emailStatus: 2--------------->");
+                shbEmailJob.updateShbEmailJob(id, emailStatus,"EMAIL", retryNumber);
+                log.error(new Gson().toJson(elements));
+            }
+            shbEmailJob.updateShbEmailJob(id, emailStatus,"EMAIL", 0);
+        }
+    }
+
+    private static void sendEmailShbEmailJobINTERNAL(Long id, String emailTo, String emailFrom, String emailContent, String emailTittle,
+                                                     String emailUser, String emailPassword, String attactFilePath, int retryNumber) {
+        EmailEntity emailEntity = new EmailEntity();
+        int emailStatus;
+        File fileAttch = new File("");
+        if(attactFilePath != null){
+            fileAttch = new File(attactFilePath);
+        }
+        emailEntity.setMailFrom(emailFrom);
+        emailEntity.setEmailTo(emailTo);
+        emailEntity.setEmailContent(emailContent);
+        emailEntity.setEmailTitle(emailTittle);
+        emailEntity.setMailUser(emailUser);
+        emailEntity.setMailPassword(emailPassword);
+        try {
+            emailStatus = emailHelper.sendHtmlEmail(emailEntity, fileAttch);
+            log.info("<!----------- sendShbEmailJob Job start process send email sendShbEmailJob : ID, STATUS  " + emailTo);
+        } catch (Exception e) {
+            retryNumber += 1;
+            StackTraceElement[] elements = e.getStackTrace();
+            emailStatus = 2;
+            log.info("<!----------- send email sendEmailShbEmailJobINTERNAL : emailStatus: 2--------------->");
+            shbEmailJob.updateShbEmailJob(id, emailStatus, "EMAIL", retryNumber);
+            log.error(new Gson().toJson(elements));
+        }
+        shbEmailJob.updateShbEmailJob(id, emailStatus, "EMAIL", 0);
+    }
+
+    public static String isValidEmailAddress(String email, String type) {
+        StringBuilder newEmail = new StringBuilder();
+        String[] emailArr = new String[0];
+        try {
+            if(email != null){
+                if(email.contains(",")){
+                    emailArr = email.split(",");
+                } else if (email.contains(";")){
+                    emailArr = email.split(";");
+                }  else {
+                    newEmail = new StringBuilder(email);
+                }
+                if(emailArr.length > 0){
+                    for (String s : emailArr) {
+                        if (validateEmailAddress(s)) {
+                            if (type.equals("INTERNAL")) {
+                                newEmail.append(s).append(",");
+                            } else if (type.equals("EXTERNAL")) {
+                                newEmail.append(s).append(";");
+                            }
+                        }
+                    }
+                }
+            }
+        } catch (Exception ex) {
+            log.error("SHBEmailJobService: isValidEmailAddress: " + Arrays.toString(emailArr) + ex);
+        }
+            return newEmail.toString();
+    }
+
+    public static boolean validateMobileNumber(String mobileNumber) {
+        Pattern regexPattern = Pattern.compile("[+-]?\\d*(\\.\\d+)?");
+        Matcher regMatcher = regexPattern.matcher(mobileNumber);
+        return regMatcher.matches();
+    }
+
+    public static boolean validateEmailAddress(String email) {
+        InternetAddress emailAddr = null;
+        try {
+            emailAddr = new InternetAddress(email);
+        } catch (AddressException e) {
+            e.printStackTrace();
+        }
+        boolean result = false;
+        try {
+            if (emailAddr != null) {
+                emailAddr.validate();
+            }
+            result = true;
+        } catch (AddressException ex) {
+            ex.printStackTrace();
+        }
+        return result;
+    }
+}
diff --git a/src/main/java/vn/shb/service/services/ShbEmailJobImpl.java b/src/main/java/vn/shb/service/services/ShbEmailJobImpl.java
new file mode 100644
index 0000000..a2e3ad9
--- /dev/null
+++ b/src/main/java/vn/shb/service/services/ShbEmailJobImpl.java
@@ -0,0 +1,69 @@
+
+package vn.shb.service.services;
+
+import lombok.extern.slf4j.Slf4j;
+import org.springframework.stereotype.Service;
+import vn.shb.service.entities.ErrorDetailService;
+import vn.shb.service.entities.SHBEmailJob;
+
+import javax.persistence.EntityManager;
+import javax.persistence.EntityManagerFactory;
+import javax.persistence.ParameterMode;
+import javax.persistence.StoredProcedureQuery;
+import java.util.List;
+
+@Slf4j
+@Service
+public class ShbEmailJobImpl {
+    private final EntityManager entityManager;
+
+    public ShbEmailJobImpl(EntityManagerFactory entityManagerFactory) {
+        entityManager = entityManagerFactory.createEntityManager();
+    }
+
+//    public List<SHBEmailJob> getListSendMail(){
+//        List<SHBEmailJob> shbEmailJobs = null;
+//        StoredProcedureQuery storedProcedure;
+//        try {
+//            storedProcedure = entityManager.createStoredProcedureQuery(
+//                    "PKG_SHB_EMAIL_HUB.GET_SHB_EMAIL_JOB", SHBEmailJob.class);
+//            storedProcedure.registerStoredProcedureParameter("OUT_CUR", void.class, ParameterMode.REF_CURSOR);
+//            storedProcedure.execute();
+//            shbEmailJobs = (List<SHBEmailJob>)storedProcedure.getResultList();
+//        } catch (Exception e) {
+//            String errorMsg = "PKG_SHB_EMAIL_HUB.GET_SHB_EMAIL_JOB/"+ e.getMessage();
+//            ErrorDetailService error = new ErrorDetailService(errorMsg, e.getLocalizedMessage(), e.getStackTrace());
+//            log.error(error.toString());
+//        }  finally {
+//            entityManager.clear();
+//        }
+//        return shbEmailJobs;
+//    }
+
+    public void updateShbEmailJob(long id, int emailStatus, String type, int retryNumber) {
+        StoredProcedureQuery storedProcedure;
+        try {
+            storedProcedure = entityManager.createStoredProcedureQuery(
+                    "PKG_SHB_EMAIL_HUB.UPDATE_SHB_EMAIL_JOB");
+            storedProcedure.registerStoredProcedureParameter("P_ID", Long.class, ParameterMode.IN);
+            storedProcedure.registerStoredProcedureParameter("P_STATUS", Integer.class, ParameterMode.IN);
+            storedProcedure.registerStoredProcedureParameter("P_TYPE", String.class, ParameterMode.IN);
+            storedProcedure.registerStoredProcedureParameter("P_RETRY_NUMBER", Integer.class, ParameterMode.IN);
+            storedProcedure.registerStoredProcedureParameter("OUT_CUR", void.class, ParameterMode.REF_CURSOR);
+            storedProcedure.setParameter("P_ID", id);
+            storedProcedure.setParameter("P_STATUS", emailStatus);
+            storedProcedure.setParameter("P_TYPE", type);
+            storedProcedure.setParameter("P_RETRY_NUMBER", retryNumber);
+            storedProcedure.execute();
+            String result = (String) storedProcedure.getSingleResult();
+            log.info(" Update Email Status >>>>>>>>>>>>: " + result);
+        } catch (Exception e) {
+            String errorMsg = "PKG_SHB_EMAIL_HUB.UPDATE_SHB_EMAIL_JOB/"+ e.getMessage();
+            ErrorDetailService error = new ErrorDetailService(errorMsg, e.getLocalizedMessage(), e.getStackTrace());
+            log.error(error.toString());
+        }  finally {
+            entityManager.clear();
+        }
+    }
+}
+
